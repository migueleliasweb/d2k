// Package openapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package openapigen

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Ping
	// (GET /_ping)
	SystemPing(ctx echo.Context) error
	// Ping
	// (HEAD /_ping)
	SystemPingHead(ctx echo.Context) error
	// Check auth configuration
	// (POST /auth)
	SystemAuth(ctx echo.Context) error
	// Build an image
	// (POST /build)
	ImageBuild(ctx echo.Context, params ImageBuildParams) error
	// Delete builder cache
	// (POST /build/prune)
	BuildPrune(ctx echo.Context, params BuildPruneParams) error
	// Create a new image from a container
	// (POST /commit)
	ImageCommit(ctx echo.Context, params ImageCommitParams) error
	// List configs
	// (GET /configs)
	ConfigList(ctx echo.Context, params ConfigListParams) error
	// Create a config
	// (POST /configs/create)
	ConfigCreate(ctx echo.Context) error
	// Delete a config
	// (DELETE /configs/{id})
	ConfigDelete(ctx echo.Context, id string) error
	// Inspect a config
	// (GET /configs/{id})
	ConfigInspect(ctx echo.Context, id string) error
	// Update a Config
	// (POST /configs/{id}/update)
	ConfigUpdate(ctx echo.Context, id string, params ConfigUpdateParams) error
	// Create a container
	// (POST /containers/create)
	ContainerCreate(ctx echo.Context, params ContainerCreateParams) error
	// List containers
	// (GET /containers/json)
	ContainerList(ctx echo.Context, params ContainerListParams) error
	// Delete stopped containers
	// (POST /containers/prune)
	ContainerPrune(ctx echo.Context, params ContainerPruneParams) error
	// Remove a container
	// (DELETE /containers/{id})
	ContainerDelete(ctx echo.Context, id string, params ContainerDeleteParams) error
	// Get an archive of a filesystem resource in a container
	// (GET /containers/{id}/archive)
	ContainerArchive(ctx echo.Context, id string, params ContainerArchiveParams) error
	// Get information about files in a container
	// (HEAD /containers/{id}/archive)
	ContainerArchiveInfo(ctx echo.Context, id string, params ContainerArchiveInfoParams) error
	// Extract an archive of files or folders to a directory in a container
	// (PUT /containers/{id}/archive)
	PutContainerArchive(ctx echo.Context, id string, params PutContainerArchiveParams) error
	// Attach to a container
	// (POST /containers/{id}/attach)
	ContainerAttach(ctx echo.Context, id string, params ContainerAttachParams) error
	// Attach to a container via a websocket
	// (GET /containers/{id}/attach/ws)
	ContainerAttachWebsocket(ctx echo.Context, id string, params ContainerAttachWebsocketParams) error
	// Get changes on a containerâ€™s filesystem
	// (GET /containers/{id}/changes)
	ContainerChanges(ctx echo.Context, id string) error
	// Create an exec instance
	// (POST /containers/{id}/exec)
	ContainerExec(ctx echo.Context, id string) error
	// Export a container
	// (GET /containers/{id}/export)
	ContainerExport(ctx echo.Context, id string) error
	// Inspect a container
	// (GET /containers/{id}/json)
	ContainerInspect(ctx echo.Context, id string, params ContainerInspectParams) error
	// Kill a container
	// (POST /containers/{id}/kill)
	ContainerKill(ctx echo.Context, id string, params ContainerKillParams) error
	// Get container logs
	// (GET /containers/{id}/logs)
	ContainerLogs(ctx echo.Context, id string, params ContainerLogsParams) error
	// Pause a container
	// (POST /containers/{id}/pause)
	ContainerPause(ctx echo.Context, id string) error
	// Rename a container
	// (POST /containers/{id}/rename)
	ContainerRename(ctx echo.Context, id string, params ContainerRenameParams) error
	// Resize a container TTY
	// (POST /containers/{id}/resize)
	ContainerResize(ctx echo.Context, id string, params ContainerResizeParams) error
	// Restart a container
	// (POST /containers/{id}/restart)
	ContainerRestart(ctx echo.Context, id string, params ContainerRestartParams) error
	// Start a container
	// (POST /containers/{id}/start)
	ContainerStart(ctx echo.Context, id string, params ContainerStartParams) error
	// Get container stats based on resource usage
	// (GET /containers/{id}/stats)
	ContainerStats(ctx echo.Context, id string, params ContainerStatsParams) error
	// Stop a container
	// (POST /containers/{id}/stop)
	ContainerStop(ctx echo.Context, id string, params ContainerStopParams) error
	// List processes running inside a container
	// (GET /containers/{id}/top)
	ContainerTop(ctx echo.Context, id string, params ContainerTopParams) error
	// Unpause a container
	// (POST /containers/{id}/unpause)
	ContainerUnpause(ctx echo.Context, id string) error
	// Update a container
	// (POST /containers/{id}/update)
	ContainerUpdate(ctx echo.Context, id string) error
	// Wait for a container
	// (POST /containers/{id}/wait)
	ContainerWait(ctx echo.Context, id string, params ContainerWaitParams) error
	// Get image information from the registry
	// (GET /distribution/{name}/json)
	DistributionInspect(ctx echo.Context, name string) error
	// Monitor events
	// (GET /events)
	SystemEvents(ctx echo.Context, params SystemEventsParams) error
	// Inspect an exec instance
	// (GET /exec/{id}/json)
	ExecInspect(ctx echo.Context, id string) error
	// Resize an exec instance
	// (POST /exec/{id}/resize)
	ExecResize(ctx echo.Context, id string, params ExecResizeParams) error
	// Start an exec instance
	// (POST /exec/{id}/start)
	ExecStart(ctx echo.Context, id string) error
	// Create an image
	// (POST /images/create)
	ImageCreate(ctx echo.Context, params ImageCreateParams) error
	// Export several images
	// (GET /images/get)
	ImageGetAll(ctx echo.Context, params ImageGetAllParams) error
	// List Images
	// (GET /images/json)
	ImageList(ctx echo.Context, params ImageListParams) error
	// Import images
	// (POST /images/load)
	ImageLoad(ctx echo.Context, params ImageLoadParams) error
	// Delete unused images
	// (POST /images/prune)
	ImagePrune(ctx echo.Context, params ImagePruneParams) error
	// Search images
	// (GET /images/search)
	ImageSearch(ctx echo.Context, params ImageSearchParams) error
	// Remove an image
	// (DELETE /images/{name})
	ImageDelete(ctx echo.Context, name string, params ImageDeleteParams) error
	// Export an image
	// (GET /images/{name}/get)
	ImageGet(ctx echo.Context, name string) error
	// Get the history of an image
	// (GET /images/{name}/history)
	ImageHistory(ctx echo.Context, name string) error
	// Inspect an image
	// (GET /images/{name}/json)
	ImageInspect(ctx echo.Context, name string) error
	// Push an image
	// (POST /images/{name}/push)
	ImagePush(ctx echo.Context, name string, params ImagePushParams) error
	// Tag an image
	// (POST /images/{name}/tag)
	ImageTag(ctx echo.Context, name string, params ImageTagParams) error
	// Get system information
	// (GET /info)
	SystemInfo(ctx echo.Context) error
	// List networks
	// (GET /networks)
	NetworkList(ctx echo.Context, params NetworkListParams) error
	// Create a network
	// (POST /networks/create)
	NetworkCreate(ctx echo.Context) error
	// Delete unused networks
	// (POST /networks/prune)
	NetworkPrune(ctx echo.Context, params NetworkPruneParams) error
	// Remove a network
	// (DELETE /networks/{id})
	NetworkDelete(ctx echo.Context, id string) error
	// Inspect a network
	// (GET /networks/{id})
	NetworkInspect(ctx echo.Context, id string, params NetworkInspectParams) error
	// Connect a container to a network
	// (POST /networks/{id}/connect)
	NetworkConnect(ctx echo.Context, id string) error
	// Disconnect a container from a network
	// (POST /networks/{id}/disconnect)
	NetworkDisconnect(ctx echo.Context, id string) error
	// List nodes
	// (GET /nodes)
	NodeList(ctx echo.Context, params NodeListParams) error
	// Delete a node
	// (DELETE /nodes/{id})
	NodeDelete(ctx echo.Context, id string, params NodeDeleteParams) error
	// Inspect a node
	// (GET /nodes/{id})
	NodeInspect(ctx echo.Context, id string) error
	// Update a node
	// (POST /nodes/{id}/update)
	NodeUpdate(ctx echo.Context, id string, params NodeUpdateParams) error
	// List plugins
	// (GET /plugins)
	PluginList(ctx echo.Context, params PluginListParams) error
	// Create a plugin
	// (POST /plugins/create)
	PluginCreate(ctx echo.Context, params PluginCreateParams) error
	// Get plugin privileges
	// (GET /plugins/privileges)
	GetPluginPrivileges(ctx echo.Context, params GetPluginPrivilegesParams) error
	// Install a plugin
	// (POST /plugins/pull)
	PluginPull(ctx echo.Context, params PluginPullParams) error
	// Remove a plugin
	// (DELETE /plugins/{name})
	PluginDelete(ctx echo.Context, name string, params PluginDeleteParams) error
	// Disable a plugin
	// (POST /plugins/{name}/disable)
	PluginDisable(ctx echo.Context, name string) error
	// Enable a plugin
	// (POST /plugins/{name}/enable)
	PluginEnable(ctx echo.Context, name string, params PluginEnableParams) error
	// Inspect a plugin
	// (GET /plugins/{name}/json)
	PluginInspect(ctx echo.Context, name string) error
	// Push a plugin
	// (POST /plugins/{name}/push)
	PluginPush(ctx echo.Context, name string) error
	// Configure a plugin
	// (POST /plugins/{name}/set)
	PluginSet(ctx echo.Context, name string) error
	// Upgrade a plugin
	// (POST /plugins/{name}/upgrade)
	PluginUpgrade(ctx echo.Context, name string, params PluginUpgradeParams) error
	// List secrets
	// (GET /secrets)
	SecretList(ctx echo.Context, params SecretListParams) error
	// Create a secret
	// (POST /secrets/create)
	SecretCreate(ctx echo.Context) error
	// Delete a secret
	// (DELETE /secrets/{id})
	SecretDelete(ctx echo.Context, id string) error
	// Inspect a secret
	// (GET /secrets/{id})
	SecretInspect(ctx echo.Context, id string) error
	// Update a Secret
	// (POST /secrets/{id}/update)
	SecretUpdate(ctx echo.Context, id string, params SecretUpdateParams) error
	// List services
	// (GET /services)
	ServiceList(ctx echo.Context, params ServiceListParams) error
	// Create a service
	// (POST /services/create)
	ServiceCreate(ctx echo.Context, params ServiceCreateParams) error
	// Delete a service
	// (DELETE /services/{id})
	ServiceDelete(ctx echo.Context, id string) error
	// Inspect a service
	// (GET /services/{id})
	ServiceInspect(ctx echo.Context, id string, params ServiceInspectParams) error
	// Get service logs
	// (GET /services/{id}/logs)
	ServiceLogs(ctx echo.Context, id string, params ServiceLogsParams) error
	// Update a service
	// (POST /services/{id}/update)
	ServiceUpdate(ctx echo.Context, id string, params ServiceUpdateParams) error
	// Initialize interactive session
	// (POST /session)
	Session(ctx echo.Context) error
	// Inspect swarm
	// (GET /swarm)
	SwarmInspect(ctx echo.Context) error
	// Initialize a new swarm
	// (POST /swarm/init)
	SwarmInit(ctx echo.Context) error
	// Join an existing swarm
	// (POST /swarm/join)
	SwarmJoin(ctx echo.Context) error
	// Leave a swarm
	// (POST /swarm/leave)
	SwarmLeave(ctx echo.Context, params SwarmLeaveParams) error
	// Unlock a locked manager
	// (POST /swarm/unlock)
	SwarmUnlock(ctx echo.Context) error
	// Get the unlock key
	// (GET /swarm/unlockkey)
	SwarmUnlockkey(ctx echo.Context) error
	// Update a swarm
	// (POST /swarm/update)
	SwarmUpdate(ctx echo.Context, params SwarmUpdateParams) error
	// Get data usage information
	// (GET /system/df)
	SystemDataUsage(ctx echo.Context) error
	// List tasks
	// (GET /tasks)
	TaskList(ctx echo.Context, params TaskListParams) error
	// Inspect a task
	// (GET /tasks/{id})
	TaskInspect(ctx echo.Context, id string) error
	// Get task logs
	// (GET /tasks/{id}/logs)
	TaskLogs(ctx echo.Context, id string, params TaskLogsParams) error
	// Get version
	// (GET /version)
	SystemVersion(ctx echo.Context) error
	// List volumes
	// (GET /volumes)
	VolumeList(ctx echo.Context, params VolumeListParams) error
	// Create a volume
	// (POST /volumes/create)
	VolumeCreate(ctx echo.Context) error
	// Delete unused volumes
	// (POST /volumes/prune)
	VolumePrune(ctx echo.Context, params VolumePruneParams) error
	// Remove a volume
	// (DELETE /volumes/{name})
	VolumeDelete(ctx echo.Context, name string, params VolumeDeleteParams) error
	// Inspect a volume
	// (GET /volumes/{name})
	VolumeInspect(ctx echo.Context, name string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SystemPing converts echo context to params.
func (w *ServerInterfaceWrapper) SystemPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SystemPing(ctx)
	return err
}

// SystemPingHead converts echo context to params.
func (w *ServerInterfaceWrapper) SystemPingHead(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SystemPingHead(ctx)
	return err
}

// SystemAuth converts echo context to params.
func (w *ServerInterfaceWrapper) SystemAuth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SystemAuth(ctx)
	return err
}

// ImageBuild converts echo context to params.
func (w *ServerInterfaceWrapper) ImageBuild(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ImageBuildParams
	// ------------- Optional query parameter "dockerfile" -------------

	err = runtime.BindQueryParameter("form", true, false, "dockerfile", ctx.QueryParams(), &params.Dockerfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dockerfile: %s", err))
	}

	// ------------- Optional query parameter "t" -------------

	err = runtime.BindQueryParameter("form", true, false, "t", ctx.QueryParams(), &params.T)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter t: %s", err))
	}

	// ------------- Optional query parameter "extrahosts" -------------

	err = runtime.BindQueryParameter("form", true, false, "extrahosts", ctx.QueryParams(), &params.Extrahosts)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter extrahosts: %s", err))
	}

	// ------------- Optional query parameter "remote" -------------

	err = runtime.BindQueryParameter("form", true, false, "remote", ctx.QueryParams(), &params.Remote)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter remote: %s", err))
	}

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "nocache" -------------

	err = runtime.BindQueryParameter("form", true, false, "nocache", ctx.QueryParams(), &params.Nocache)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nocache: %s", err))
	}

	// ------------- Optional query parameter "cachefrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "cachefrom", ctx.QueryParams(), &params.Cachefrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cachefrom: %s", err))
	}

	// ------------- Optional query parameter "pull" -------------

	err = runtime.BindQueryParameter("form", true, false, "pull", ctx.QueryParams(), &params.Pull)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pull: %s", err))
	}

	// ------------- Optional query parameter "rm" -------------

	err = runtime.BindQueryParameter("form", true, false, "rm", ctx.QueryParams(), &params.Rm)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rm: %s", err))
	}

	// ------------- Optional query parameter "forcerm" -------------

	err = runtime.BindQueryParameter("form", true, false, "forcerm", ctx.QueryParams(), &params.Forcerm)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter forcerm: %s", err))
	}

	// ------------- Optional query parameter "memory" -------------

	err = runtime.BindQueryParameter("form", true, false, "memory", ctx.QueryParams(), &params.Memory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memory: %s", err))
	}

	// ------------- Optional query parameter "memswap" -------------

	err = runtime.BindQueryParameter("form", true, false, "memswap", ctx.QueryParams(), &params.Memswap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memswap: %s", err))
	}

	// ------------- Optional query parameter "cpushares" -------------

	err = runtime.BindQueryParameter("form", true, false, "cpushares", ctx.QueryParams(), &params.Cpushares)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cpushares: %s", err))
	}

	// ------------- Optional query parameter "cpusetcpus" -------------

	err = runtime.BindQueryParameter("form", true, false, "cpusetcpus", ctx.QueryParams(), &params.Cpusetcpus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cpusetcpus: %s", err))
	}

	// ------------- Optional query parameter "cpuperiod" -------------

	err = runtime.BindQueryParameter("form", true, false, "cpuperiod", ctx.QueryParams(), &params.Cpuperiod)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cpuperiod: %s", err))
	}

	// ------------- Optional query parameter "cpuquota" -------------

	err = runtime.BindQueryParameter("form", true, false, "cpuquota", ctx.QueryParams(), &params.Cpuquota)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cpuquota: %s", err))
	}

	// ------------- Optional query parameter "buildargs" -------------

	err = runtime.BindQueryParameter("form", true, false, "buildargs", ctx.QueryParams(), &params.Buildargs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter buildargs: %s", err))
	}

	// ------------- Optional query parameter "shmsize" -------------

	err = runtime.BindQueryParameter("form", true, false, "shmsize", ctx.QueryParams(), &params.Shmsize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shmsize: %s", err))
	}

	// ------------- Optional query parameter "squash" -------------

	err = runtime.BindQueryParameter("form", true, false, "squash", ctx.QueryParams(), &params.Squash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter squash: %s", err))
	}

	// ------------- Optional query parameter "labels" -------------

	err = runtime.BindQueryParameter("form", true, false, "labels", ctx.QueryParams(), &params.Labels)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter labels: %s", err))
	}

	// ------------- Optional query parameter "networkmode" -------------

	err = runtime.BindQueryParameter("form", true, false, "networkmode", ctx.QueryParams(), &params.Networkmode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter networkmode: %s", err))
	}

	// ------------- Optional query parameter "platform" -------------

	err = runtime.BindQueryParameter("form", true, false, "platform", ctx.QueryParams(), &params.Platform)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter platform: %s", err))
	}

	// ------------- Optional query parameter "target" -------------

	err = runtime.BindQueryParameter("form", true, false, "target", ctx.QueryParams(), &params.Target)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter target: %s", err))
	}

	// ------------- Optional query parameter "outputs" -------------

	err = runtime.BindQueryParameter("form", true, false, "outputs", ctx.QueryParams(), &params.Outputs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter outputs: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Content-type" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-type")]; found {
		var ContentType ImageBuildParamsContentType
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Content-type, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Content-type", runtime.ParamLocationHeader, valueList[0], &ContentType)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Content-type: %s", err))
		}

		params.ContentType = &ContentType
	}
	// ------------- Optional header parameter "X-Registry-Config" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Registry-Config")]; found {
		var XRegistryConfig string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Registry-Config, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Registry-Config", runtime.ParamLocationHeader, valueList[0], &XRegistryConfig)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Registry-Config: %s", err))
		}

		params.XRegistryConfig = &XRegistryConfig
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImageBuild(ctx, params)
	return err
}

// BuildPrune converts echo context to params.
func (w *ServerInterfaceWrapper) BuildPrune(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BuildPruneParams
	// ------------- Optional query parameter "keep-storage" -------------

	err = runtime.BindQueryParameter("form", true, false, "keep-storage", ctx.QueryParams(), &params.KeepStorage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keep-storage: %s", err))
	}

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", ctx.QueryParams(), &params.All)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter all: %s", err))
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BuildPrune(ctx, params)
	return err
}

// ImageCommit converts echo context to params.
func (w *ServerInterfaceWrapper) ImageCommit(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ImageCommitParams
	// ------------- Optional query parameter "container" -------------

	err = runtime.BindQueryParameter("form", true, false, "container", ctx.QueryParams(), &params.Container)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter container: %s", err))
	}

	// ------------- Optional query parameter "repo" -------------

	err = runtime.BindQueryParameter("form", true, false, "repo", ctx.QueryParams(), &params.Repo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repo: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "comment" -------------

	err = runtime.BindQueryParameter("form", true, false, "comment", ctx.QueryParams(), &params.Comment)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter comment: %s", err))
	}

	// ------------- Optional query parameter "author" -------------

	err = runtime.BindQueryParameter("form", true, false, "author", ctx.QueryParams(), &params.Author)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter author: %s", err))
	}

	// ------------- Optional query parameter "pause" -------------

	err = runtime.BindQueryParameter("form", true, false, "pause", ctx.QueryParams(), &params.Pause)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pause: %s", err))
	}

	// ------------- Optional query parameter "changes" -------------

	err = runtime.BindQueryParameter("form", true, false, "changes", ctx.QueryParams(), &params.Changes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter changes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImageCommit(ctx, params)
	return err
}

// ConfigList converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ConfigListParams
	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfigList(ctx, params)
	return err
}

// ConfigCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfigCreate(ctx)
	return err
}

// ConfigDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfigDelete(ctx, id)
	return err
}

// ConfigInspect converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigInspect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfigInspect(ctx, id)
	return err
}

// ConfigUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ConfigUpdateParams
	// ------------- Required query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, true, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfigUpdate(ctx, id, params)
	return err
}

// ContainerCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerCreate(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerCreateParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerCreate(ctx, params)
	return err
}

// ContainerList converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerListParams
	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", ctx.QueryParams(), &params.All)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerList(ctx, params)
	return err
}

// ContainerPrune converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerPrune(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerPruneParams
	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerPrune(ctx, params)
	return err
}

// ContainerDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerDeleteParams
	// ------------- Optional query parameter "v" -------------

	err = runtime.BindQueryParameter("form", true, false, "v", ctx.QueryParams(), &params.V)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter v: %s", err))
	}

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "link" -------------

	err = runtime.BindQueryParameter("form", true, false, "link", ctx.QueryParams(), &params.Link)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter link: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerDelete(ctx, id, params)
	return err
}

// ContainerArchive converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerArchive(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerArchiveParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerArchive(ctx, id, params)
	return err
}

// ContainerArchiveInfo converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerArchiveInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerArchiveInfoParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerArchiveInfo(ctx, id, params)
	return err
}

// PutContainerArchive converts echo context to params.
func (w *ServerInterfaceWrapper) PutContainerArchive(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutContainerArchiveParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "noOverwriteDirNonDir" -------------

	err = runtime.BindQueryParameter("form", true, false, "noOverwriteDirNonDir", ctx.QueryParams(), &params.NoOverwriteDirNonDir)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter noOverwriteDirNonDir: %s", err))
	}

	// ------------- Optional query parameter "copyUIDGID" -------------

	err = runtime.BindQueryParameter("form", true, false, "copyUIDGID", ctx.QueryParams(), &params.CopyUIDGID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter copyUIDGID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutContainerArchive(ctx, id, params)
	return err
}

// ContainerAttach converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerAttach(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerAttachParams
	// ------------- Optional query parameter "detachKeys" -------------

	err = runtime.BindQueryParameter("form", true, false, "detachKeys", ctx.QueryParams(), &params.DetachKeys)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter detachKeys: %s", err))
	}

	// ------------- Optional query parameter "logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "logs", ctx.QueryParams(), &params.Logs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter logs: %s", err))
	}

	// ------------- Optional query parameter "stream" -------------

	err = runtime.BindQueryParameter("form", true, false, "stream", ctx.QueryParams(), &params.Stream)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stream: %s", err))
	}

	// ------------- Optional query parameter "stdin" -------------

	err = runtime.BindQueryParameter("form", true, false, "stdin", ctx.QueryParams(), &params.Stdin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stdin: %s", err))
	}

	// ------------- Optional query parameter "stdout" -------------

	err = runtime.BindQueryParameter("form", true, false, "stdout", ctx.QueryParams(), &params.Stdout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stdout: %s", err))
	}

	// ------------- Optional query parameter "stderr" -------------

	err = runtime.BindQueryParameter("form", true, false, "stderr", ctx.QueryParams(), &params.Stderr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stderr: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerAttach(ctx, id, params)
	return err
}

// ContainerAttachWebsocket converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerAttachWebsocket(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerAttachWebsocketParams
	// ------------- Optional query parameter "detachKeys" -------------

	err = runtime.BindQueryParameter("form", true, false, "detachKeys", ctx.QueryParams(), &params.DetachKeys)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter detachKeys: %s", err))
	}

	// ------------- Optional query parameter "logs" -------------

	err = runtime.BindQueryParameter("form", true, false, "logs", ctx.QueryParams(), &params.Logs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter logs: %s", err))
	}

	// ------------- Optional query parameter "stream" -------------

	err = runtime.BindQueryParameter("form", true, false, "stream", ctx.QueryParams(), &params.Stream)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stream: %s", err))
	}

	// ------------- Optional query parameter "stdin" -------------

	err = runtime.BindQueryParameter("form", true, false, "stdin", ctx.QueryParams(), &params.Stdin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stdin: %s", err))
	}

	// ------------- Optional query parameter "stdout" -------------

	err = runtime.BindQueryParameter("form", true, false, "stdout", ctx.QueryParams(), &params.Stdout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stdout: %s", err))
	}

	// ------------- Optional query parameter "stderr" -------------

	err = runtime.BindQueryParameter("form", true, false, "stderr", ctx.QueryParams(), &params.Stderr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stderr: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerAttachWebsocket(ctx, id, params)
	return err
}

// ContainerChanges converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerChanges(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerChanges(ctx, id)
	return err
}

// ContainerExec converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerExec(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerExec(ctx, id)
	return err
}

// ContainerExport converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerExport(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerExport(ctx, id)
	return err
}

// ContainerInspect converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerInspect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerInspectParams
	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerInspect(ctx, id, params)
	return err
}

// ContainerKill converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerKill(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerKillParams
	// ------------- Optional query parameter "signal" -------------

	err = runtime.BindQueryParameter("form", true, false, "signal", ctx.QueryParams(), &params.Signal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter signal: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerKill(ctx, id, params)
	return err
}

// ContainerLogs converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerLogsParams
	// ------------- Optional query parameter "follow" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow", ctx.QueryParams(), &params.Follow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow: %s", err))
	}

	// ------------- Optional query parameter "stdout" -------------

	err = runtime.BindQueryParameter("form", true, false, "stdout", ctx.QueryParams(), &params.Stdout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stdout: %s", err))
	}

	// ------------- Optional query parameter "stderr" -------------

	err = runtime.BindQueryParameter("form", true, false, "stderr", ctx.QueryParams(), &params.Stderr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stderr: %s", err))
	}

	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", ctx.QueryParams(), &params.Since)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since: %s", err))
	}

	// ------------- Optional query parameter "until" -------------

	err = runtime.BindQueryParameter("form", true, false, "until", ctx.QueryParams(), &params.Until)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter until: %s", err))
	}

	// ------------- Optional query parameter "timestamps" -------------

	err = runtime.BindQueryParameter("form", true, false, "timestamps", ctx.QueryParams(), &params.Timestamps)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timestamps: %s", err))
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", ctx.QueryParams(), &params.Tail)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tail: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerLogs(ctx, id, params)
	return err
}

// ContainerPause converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerPause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerPause(ctx, id)
	return err
}

// ContainerRename converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerRename(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerRenameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerRename(ctx, id, params)
	return err
}

// ContainerResize converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerResize(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerResizeParams
	// ------------- Optional query parameter "h" -------------

	err = runtime.BindQueryParameter("form", true, false, "h", ctx.QueryParams(), &params.H)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter h: %s", err))
	}

	// ------------- Optional query parameter "w" -------------

	err = runtime.BindQueryParameter("form", true, false, "w", ctx.QueryParams(), &params.W)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter w: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerResize(ctx, id, params)
	return err
}

// ContainerRestart converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerRestart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerRestartParams
	// ------------- Optional query parameter "t" -------------

	err = runtime.BindQueryParameter("form", true, false, "t", ctx.QueryParams(), &params.T)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter t: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerRestart(ctx, id, params)
	return err
}

// ContainerStart converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerStartParams
	// ------------- Optional query parameter "detachKeys" -------------

	err = runtime.BindQueryParameter("form", true, false, "detachKeys", ctx.QueryParams(), &params.DetachKeys)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter detachKeys: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerStart(ctx, id, params)
	return err
}

// ContainerStats converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerStatsParams
	// ------------- Optional query parameter "stream" -------------

	err = runtime.BindQueryParameter("form", true, false, "stream", ctx.QueryParams(), &params.Stream)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stream: %s", err))
	}

	// ------------- Optional query parameter "one-shot" -------------

	err = runtime.BindQueryParameter("form", true, false, "one-shot", ctx.QueryParams(), &params.OneShot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter one-shot: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerStats(ctx, id, params)
	return err
}

// ContainerStop converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerStopParams
	// ------------- Optional query parameter "t" -------------

	err = runtime.BindQueryParameter("form", true, false, "t", ctx.QueryParams(), &params.T)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter t: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerStop(ctx, id, params)
	return err
}

// ContainerTop converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerTop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerTopParams
	// ------------- Optional query parameter "ps_args" -------------

	err = runtime.BindQueryParameter("form", true, false, "ps_args", ctx.QueryParams(), &params.PsArgs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ps_args: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerTop(ctx, id, params)
	return err
}

// ContainerUnpause converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerUnpause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerUnpause(ctx, id)
	return err
}

// ContainerUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerUpdate(ctx, id)
	return err
}

// ContainerWait converts echo context to params.
func (w *ServerInterfaceWrapper) ContainerWait(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ContainerWaitParams
	// ------------- Optional query parameter "condition" -------------

	err = runtime.BindQueryParameter("form", true, false, "condition", ctx.QueryParams(), &params.Condition)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter condition: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContainerWait(ctx, id, params)
	return err
}

// DistributionInspect converts echo context to params.
func (w *ServerInterfaceWrapper) DistributionInspect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DistributionInspect(ctx, name)
	return err
}

// SystemEvents converts echo context to params.
func (w *ServerInterfaceWrapper) SystemEvents(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SystemEventsParams
	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", ctx.QueryParams(), &params.Since)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since: %s", err))
	}

	// ------------- Optional query parameter "until" -------------

	err = runtime.BindQueryParameter("form", true, false, "until", ctx.QueryParams(), &params.Until)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter until: %s", err))
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SystemEvents(ctx, params)
	return err
}

// ExecInspect converts echo context to params.
func (w *ServerInterfaceWrapper) ExecInspect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExecInspect(ctx, id)
	return err
}

// ExecResize converts echo context to params.
func (w *ServerInterfaceWrapper) ExecResize(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ExecResizeParams
	// ------------- Optional query parameter "h" -------------

	err = runtime.BindQueryParameter("form", true, false, "h", ctx.QueryParams(), &params.H)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter h: %s", err))
	}

	// ------------- Optional query parameter "w" -------------

	err = runtime.BindQueryParameter("form", true, false, "w", ctx.QueryParams(), &params.W)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter w: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExecResize(ctx, id, params)
	return err
}

// ExecStart converts echo context to params.
func (w *ServerInterfaceWrapper) ExecStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExecStart(ctx, id)
	return err
}

// ImageCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ImageCreate(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ImageCreateParams
	// ------------- Optional query parameter "fromImage" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromImage", ctx.QueryParams(), &params.FromImage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromImage: %s", err))
	}

	// ------------- Optional query parameter "fromSrc" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromSrc", ctx.QueryParams(), &params.FromSrc)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromSrc: %s", err))
	}

	// ------------- Optional query parameter "repo" -------------

	err = runtime.BindQueryParameter("form", true, false, "repo", ctx.QueryParams(), &params.Repo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repo: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "message" -------------

	err = runtime.BindQueryParameter("form", true, false, "message", ctx.QueryParams(), &params.Message)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message: %s", err))
	}

	// ------------- Optional query parameter "platform" -------------

	err = runtime.BindQueryParameter("form", true, false, "platform", ctx.QueryParams(), &params.Platform)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter platform: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Registry-Auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Registry-Auth")]; found {
		var XRegistryAuth string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Registry-Auth, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Registry-Auth", runtime.ParamLocationHeader, valueList[0], &XRegistryAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Registry-Auth: %s", err))
		}

		params.XRegistryAuth = &XRegistryAuth
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImageCreate(ctx, params)
	return err
}

// ImageGetAll converts echo context to params.
func (w *ServerInterfaceWrapper) ImageGetAll(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ImageGetAllParams
	// ------------- Optional query parameter "names" -------------

	err = runtime.BindQueryParameter("form", false, false, "names", ctx.QueryParams(), &params.Names)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter names: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImageGetAll(ctx, params)
	return err
}

// ImageList converts echo context to params.
func (w *ServerInterfaceWrapper) ImageList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ImageListParams
	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", ctx.QueryParams(), &params.All)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter all: %s", err))
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// ------------- Optional query parameter "digests" -------------

	err = runtime.BindQueryParameter("form", true, false, "digests", ctx.QueryParams(), &params.Digests)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter digests: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImageList(ctx, params)
	return err
}

// ImageLoad converts echo context to params.
func (w *ServerInterfaceWrapper) ImageLoad(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ImageLoadParams
	// ------------- Optional query parameter "quiet" -------------

	err = runtime.BindQueryParameter("form", true, false, "quiet", ctx.QueryParams(), &params.Quiet)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter quiet: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImageLoad(ctx, params)
	return err
}

// ImagePrune converts echo context to params.
func (w *ServerInterfaceWrapper) ImagePrune(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ImagePruneParams
	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImagePrune(ctx, params)
	return err
}

// ImageSearch converts echo context to params.
func (w *ServerInterfaceWrapper) ImageSearch(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ImageSearchParams
	// ------------- Required query parameter "term" -------------

	err = runtime.BindQueryParameter("form", true, true, "term", ctx.QueryParams(), &params.Term)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter term: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImageSearch(ctx, params)
	return err
}

// ImageDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ImageDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ImageDeleteParams
	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// ------------- Optional query parameter "noprune" -------------

	err = runtime.BindQueryParameter("form", true, false, "noprune", ctx.QueryParams(), &params.Noprune)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter noprune: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImageDelete(ctx, name, params)
	return err
}

// ImageGet converts echo context to params.
func (w *ServerInterfaceWrapper) ImageGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImageGet(ctx, name)
	return err
}

// ImageHistory converts echo context to params.
func (w *ServerInterfaceWrapper) ImageHistory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImageHistory(ctx, name)
	return err
}

// ImageInspect converts echo context to params.
func (w *ServerInterfaceWrapper) ImageInspect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImageInspect(ctx, name)
	return err
}

// ImagePush converts echo context to params.
func (w *ServerInterfaceWrapper) ImagePush(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ImagePushParams
	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Registry-Auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Registry-Auth")]; found {
		var XRegistryAuth string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Registry-Auth, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Registry-Auth", runtime.ParamLocationHeader, valueList[0], &XRegistryAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Registry-Auth: %s", err))
		}

		params.XRegistryAuth = XRegistryAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Registry-Auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImagePush(ctx, name, params)
	return err
}

// ImageTag converts echo context to params.
func (w *ServerInterfaceWrapper) ImageTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ImageTagParams
	// ------------- Optional query parameter "repo" -------------

	err = runtime.BindQueryParameter("form", true, false, "repo", ctx.QueryParams(), &params.Repo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repo: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImageTag(ctx, name, params)
	return err
}

// SystemInfo converts echo context to params.
func (w *ServerInterfaceWrapper) SystemInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SystemInfo(ctx)
	return err
}

// NetworkList converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkListParams
	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkList(ctx, params)
	return err
}

// NetworkCreate converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkCreate(ctx)
	return err
}

// NetworkPrune converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkPrune(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkPruneParams
	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkPrune(ctx, params)
	return err
}

// NetworkDelete converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkDelete(ctx, id)
	return err
}

// NetworkInspect converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkInspect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkInspectParams
	// ------------- Optional query parameter "verbose" -------------

	err = runtime.BindQueryParameter("form", true, false, "verbose", ctx.QueryParams(), &params.Verbose)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter verbose: %s", err))
	}

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkInspect(ctx, id, params)
	return err
}

// NetworkConnect converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkConnect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkConnect(ctx, id)
	return err
}

// NetworkDisconnect converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkDisconnect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkDisconnect(ctx, id)
	return err
}

// NodeList converts echo context to params.
func (w *ServerInterfaceWrapper) NodeList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params NodeListParams
	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NodeList(ctx, params)
	return err
}

// NodeDelete converts echo context to params.
func (w *ServerInterfaceWrapper) NodeDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params NodeDeleteParams
	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NodeDelete(ctx, id, params)
	return err
}

// NodeInspect converts echo context to params.
func (w *ServerInterfaceWrapper) NodeInspect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NodeInspect(ctx, id)
	return err
}

// NodeUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) NodeUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params NodeUpdateParams
	// ------------- Required query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, true, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NodeUpdate(ctx, id, params)
	return err
}

// PluginList converts echo context to params.
func (w *ServerInterfaceWrapper) PluginList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PluginListParams
	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PluginList(ctx, params)
	return err
}

// PluginCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PluginCreate(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PluginCreateParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PluginCreate(ctx, params)
	return err
}

// GetPluginPrivileges converts echo context to params.
func (w *ServerInterfaceWrapper) GetPluginPrivileges(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPluginPrivilegesParams
	// ------------- Required query parameter "remote" -------------

	err = runtime.BindQueryParameter("form", true, true, "remote", ctx.QueryParams(), &params.Remote)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter remote: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPluginPrivileges(ctx, params)
	return err
}

// PluginPull converts echo context to params.
func (w *ServerInterfaceWrapper) PluginPull(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PluginPullParams
	// ------------- Required query parameter "remote" -------------

	err = runtime.BindQueryParameter("form", true, true, "remote", ctx.QueryParams(), &params.Remote)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter remote: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Registry-Auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Registry-Auth")]; found {
		var XRegistryAuth string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Registry-Auth, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Registry-Auth", runtime.ParamLocationHeader, valueList[0], &XRegistryAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Registry-Auth: %s", err))
		}

		params.XRegistryAuth = &XRegistryAuth
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PluginPull(ctx, params)
	return err
}

// PluginDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PluginDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PluginDeleteParams
	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PluginDelete(ctx, name, params)
	return err
}

// PluginDisable converts echo context to params.
func (w *ServerInterfaceWrapper) PluginDisable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PluginDisable(ctx, name)
	return err
}

// PluginEnable converts echo context to params.
func (w *ServerInterfaceWrapper) PluginEnable(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PluginEnableParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PluginEnable(ctx, name, params)
	return err
}

// PluginInspect converts echo context to params.
func (w *ServerInterfaceWrapper) PluginInspect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PluginInspect(ctx, name)
	return err
}

// PluginPush converts echo context to params.
func (w *ServerInterfaceWrapper) PluginPush(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PluginPush(ctx, name)
	return err
}

// PluginSet converts echo context to params.
func (w *ServerInterfaceWrapper) PluginSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PluginSet(ctx, name)
	return err
}

// PluginUpgrade converts echo context to params.
func (w *ServerInterfaceWrapper) PluginUpgrade(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PluginUpgradeParams
	// ------------- Required query parameter "remote" -------------

	err = runtime.BindQueryParameter("form", true, true, "remote", ctx.QueryParams(), &params.Remote)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter remote: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Registry-Auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Registry-Auth")]; found {
		var XRegistryAuth string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Registry-Auth, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Registry-Auth", runtime.ParamLocationHeader, valueList[0], &XRegistryAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Registry-Auth: %s", err))
		}

		params.XRegistryAuth = &XRegistryAuth
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PluginUpgrade(ctx, name, params)
	return err
}

// SecretList converts echo context to params.
func (w *ServerInterfaceWrapper) SecretList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SecretListParams
	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SecretList(ctx, params)
	return err
}

// SecretCreate converts echo context to params.
func (w *ServerInterfaceWrapper) SecretCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SecretCreate(ctx)
	return err
}

// SecretDelete converts echo context to params.
func (w *ServerInterfaceWrapper) SecretDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SecretDelete(ctx, id)
	return err
}

// SecretInspect converts echo context to params.
func (w *ServerInterfaceWrapper) SecretInspect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SecretInspect(ctx, id)
	return err
}

// SecretUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SecretUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SecretUpdateParams
	// ------------- Required query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, true, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SecretUpdate(ctx, id, params)
	return err
}

// ServiceList converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceListParams
	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceList(ctx, params)
	return err
}

// ServiceCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceCreate(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceCreateParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Registry-Auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Registry-Auth")]; found {
		var XRegistryAuth string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Registry-Auth, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Registry-Auth", runtime.ParamLocationHeader, valueList[0], &XRegistryAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Registry-Auth: %s", err))
		}

		params.XRegistryAuth = &XRegistryAuth
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceCreate(ctx, params)
	return err
}

// ServiceDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceDelete(ctx, id)
	return err
}

// ServiceInspect converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceInspect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceInspectParams
	// ------------- Optional query parameter "insertDefaults" -------------

	err = runtime.BindQueryParameter("form", true, false, "insertDefaults", ctx.QueryParams(), &params.InsertDefaults)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter insertDefaults: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceInspect(ctx, id, params)
	return err
}

// ServiceLogs converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceLogsParams
	// ------------- Optional query parameter "details" -------------

	err = runtime.BindQueryParameter("form", true, false, "details", ctx.QueryParams(), &params.Details)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter details: %s", err))
	}

	// ------------- Optional query parameter "follow" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow", ctx.QueryParams(), &params.Follow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow: %s", err))
	}

	// ------------- Optional query parameter "stdout" -------------

	err = runtime.BindQueryParameter("form", true, false, "stdout", ctx.QueryParams(), &params.Stdout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stdout: %s", err))
	}

	// ------------- Optional query parameter "stderr" -------------

	err = runtime.BindQueryParameter("form", true, false, "stderr", ctx.QueryParams(), &params.Stderr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stderr: %s", err))
	}

	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", ctx.QueryParams(), &params.Since)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since: %s", err))
	}

	// ------------- Optional query parameter "timestamps" -------------

	err = runtime.BindQueryParameter("form", true, false, "timestamps", ctx.QueryParams(), &params.Timestamps)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timestamps: %s", err))
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", ctx.QueryParams(), &params.Tail)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tail: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceLogs(ctx, id, params)
	return err
}

// ServiceUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ServiceUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ServiceUpdateParams
	// ------------- Required query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, true, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Optional query parameter "registryAuthFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "registryAuthFrom", ctx.QueryParams(), &params.RegistryAuthFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter registryAuthFrom: %s", err))
	}

	// ------------- Optional query parameter "rollback" -------------

	err = runtime.BindQueryParameter("form", true, false, "rollback", ctx.QueryParams(), &params.Rollback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rollback: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Registry-Auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Registry-Auth")]; found {
		var XRegistryAuth string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Registry-Auth, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Registry-Auth", runtime.ParamLocationHeader, valueList[0], &XRegistryAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Registry-Auth: %s", err))
		}

		params.XRegistryAuth = &XRegistryAuth
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServiceUpdate(ctx, id, params)
	return err
}

// Session converts echo context to params.
func (w *ServerInterfaceWrapper) Session(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Session(ctx)
	return err
}

// SwarmInspect converts echo context to params.
func (w *ServerInterfaceWrapper) SwarmInspect(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SwarmInspect(ctx)
	return err
}

// SwarmInit converts echo context to params.
func (w *ServerInterfaceWrapper) SwarmInit(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SwarmInit(ctx)
	return err
}

// SwarmJoin converts echo context to params.
func (w *ServerInterfaceWrapper) SwarmJoin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SwarmJoin(ctx)
	return err
}

// SwarmLeave converts echo context to params.
func (w *ServerInterfaceWrapper) SwarmLeave(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SwarmLeaveParams
	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SwarmLeave(ctx, params)
	return err
}

// SwarmUnlock converts echo context to params.
func (w *ServerInterfaceWrapper) SwarmUnlock(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SwarmUnlock(ctx)
	return err
}

// SwarmUnlockkey converts echo context to params.
func (w *ServerInterfaceWrapper) SwarmUnlockkey(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SwarmUnlockkey(ctx)
	return err
}

// SwarmUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) SwarmUpdate(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SwarmUpdateParams
	// ------------- Required query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, true, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Optional query parameter "rotateWorkerToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "rotateWorkerToken", ctx.QueryParams(), &params.RotateWorkerToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rotateWorkerToken: %s", err))
	}

	// ------------- Optional query parameter "rotateManagerToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "rotateManagerToken", ctx.QueryParams(), &params.RotateManagerToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rotateManagerToken: %s", err))
	}

	// ------------- Optional query parameter "rotateManagerUnlockKey" -------------

	err = runtime.BindQueryParameter("form", true, false, "rotateManagerUnlockKey", ctx.QueryParams(), &params.RotateManagerUnlockKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rotateManagerUnlockKey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SwarmUpdate(ctx, params)
	return err
}

// SystemDataUsage converts echo context to params.
func (w *ServerInterfaceWrapper) SystemDataUsage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SystemDataUsage(ctx)
	return err
}

// TaskList converts echo context to params.
func (w *ServerInterfaceWrapper) TaskList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TaskListParams
	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TaskList(ctx, params)
	return err
}

// TaskInspect converts echo context to params.
func (w *ServerInterfaceWrapper) TaskInspect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TaskInspect(ctx, id)
	return err
}

// TaskLogs converts echo context to params.
func (w *ServerInterfaceWrapper) TaskLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params TaskLogsParams
	// ------------- Optional query parameter "details" -------------

	err = runtime.BindQueryParameter("form", true, false, "details", ctx.QueryParams(), &params.Details)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter details: %s", err))
	}

	// ------------- Optional query parameter "follow" -------------

	err = runtime.BindQueryParameter("form", true, false, "follow", ctx.QueryParams(), &params.Follow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter follow: %s", err))
	}

	// ------------- Optional query parameter "stdout" -------------

	err = runtime.BindQueryParameter("form", true, false, "stdout", ctx.QueryParams(), &params.Stdout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stdout: %s", err))
	}

	// ------------- Optional query parameter "stderr" -------------

	err = runtime.BindQueryParameter("form", true, false, "stderr", ctx.QueryParams(), &params.Stderr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stderr: %s", err))
	}

	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", ctx.QueryParams(), &params.Since)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since: %s", err))
	}

	// ------------- Optional query parameter "timestamps" -------------

	err = runtime.BindQueryParameter("form", true, false, "timestamps", ctx.QueryParams(), &params.Timestamps)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timestamps: %s", err))
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", ctx.QueryParams(), &params.Tail)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tail: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TaskLogs(ctx, id, params)
	return err
}

// SystemVersion converts echo context to params.
func (w *ServerInterfaceWrapper) SystemVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SystemVersion(ctx)
	return err
}

// VolumeList converts echo context to params.
func (w *ServerInterfaceWrapper) VolumeList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VolumeListParams
	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VolumeList(ctx, params)
	return err
}

// VolumeCreate converts echo context to params.
func (w *ServerInterfaceWrapper) VolumeCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VolumeCreate(ctx)
	return err
}

// VolumePrune converts echo context to params.
func (w *ServerInterfaceWrapper) VolumePrune(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VolumePruneParams
	// ------------- Optional query parameter "filters" -------------

	err = runtime.BindQueryParameter("form", true, false, "filters", ctx.QueryParams(), &params.Filters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VolumePrune(ctx, params)
	return err
}

// VolumeDelete converts echo context to params.
func (w *ServerInterfaceWrapper) VolumeDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params VolumeDeleteParams
	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", ctx.QueryParams(), &params.Force)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VolumeDelete(ctx, name, params)
	return err
}

// VolumeInspect converts echo context to params.
func (w *ServerInterfaceWrapper) VolumeInspect(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VolumeInspect(ctx, name)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/_ping", wrapper.SystemPing)
	router.HEAD(baseURL+"/_ping", wrapper.SystemPingHead)
	router.POST(baseURL+"/auth", wrapper.SystemAuth)
	router.POST(baseURL+"/build", wrapper.ImageBuild)
	router.POST(baseURL+"/build/prune", wrapper.BuildPrune)
	router.POST(baseURL+"/commit", wrapper.ImageCommit)
	router.GET(baseURL+"/configs", wrapper.ConfigList)
	router.POST(baseURL+"/configs/create", wrapper.ConfigCreate)
	router.DELETE(baseURL+"/configs/:id", wrapper.ConfigDelete)
	router.GET(baseURL+"/configs/:id", wrapper.ConfigInspect)
	router.POST(baseURL+"/configs/:id/update", wrapper.ConfigUpdate)
	router.POST(baseURL+"/containers/create", wrapper.ContainerCreate)
	router.GET(baseURL+"/containers/json", wrapper.ContainerList)
	router.POST(baseURL+"/containers/prune", wrapper.ContainerPrune)
	router.DELETE(baseURL+"/containers/:id", wrapper.ContainerDelete)
	router.GET(baseURL+"/containers/:id/archive", wrapper.ContainerArchive)
	router.HEAD(baseURL+"/containers/:id/archive", wrapper.ContainerArchiveInfo)
	router.PUT(baseURL+"/containers/:id/archive", wrapper.PutContainerArchive)
	router.POST(baseURL+"/containers/:id/attach", wrapper.ContainerAttach)
	router.GET(baseURL+"/containers/:id/attach/ws", wrapper.ContainerAttachWebsocket)
	router.GET(baseURL+"/containers/:id/changes", wrapper.ContainerChanges)
	router.POST(baseURL+"/containers/:id/exec", wrapper.ContainerExec)
	router.GET(baseURL+"/containers/:id/export", wrapper.ContainerExport)
	router.GET(baseURL+"/containers/:id/json", wrapper.ContainerInspect)
	router.POST(baseURL+"/containers/:id/kill", wrapper.ContainerKill)
	router.GET(baseURL+"/containers/:id/logs", wrapper.ContainerLogs)
	router.POST(baseURL+"/containers/:id/pause", wrapper.ContainerPause)
	router.POST(baseURL+"/containers/:id/rename", wrapper.ContainerRename)
	router.POST(baseURL+"/containers/:id/resize", wrapper.ContainerResize)
	router.POST(baseURL+"/containers/:id/restart", wrapper.ContainerRestart)
	router.POST(baseURL+"/containers/:id/start", wrapper.ContainerStart)
	router.GET(baseURL+"/containers/:id/stats", wrapper.ContainerStats)
	router.POST(baseURL+"/containers/:id/stop", wrapper.ContainerStop)
	router.GET(baseURL+"/containers/:id/top", wrapper.ContainerTop)
	router.POST(baseURL+"/containers/:id/unpause", wrapper.ContainerUnpause)
	router.POST(baseURL+"/containers/:id/update", wrapper.ContainerUpdate)
	router.POST(baseURL+"/containers/:id/wait", wrapper.ContainerWait)
	router.GET(baseURL+"/distribution/:name/json", wrapper.DistributionInspect)
	router.GET(baseURL+"/events", wrapper.SystemEvents)
	router.GET(baseURL+"/exec/:id/json", wrapper.ExecInspect)
	router.POST(baseURL+"/exec/:id/resize", wrapper.ExecResize)
	router.POST(baseURL+"/exec/:id/start", wrapper.ExecStart)
	router.POST(baseURL+"/images/create", wrapper.ImageCreate)
	router.GET(baseURL+"/images/get", wrapper.ImageGetAll)
	router.GET(baseURL+"/images/json", wrapper.ImageList)
	router.POST(baseURL+"/images/load", wrapper.ImageLoad)
	router.POST(baseURL+"/images/prune", wrapper.ImagePrune)
	router.GET(baseURL+"/images/search", wrapper.ImageSearch)
	router.DELETE(baseURL+"/images/:name", wrapper.ImageDelete)
	router.GET(baseURL+"/images/:name/get", wrapper.ImageGet)
	router.GET(baseURL+"/images/:name/history", wrapper.ImageHistory)
	router.GET(baseURL+"/images/:name/json", wrapper.ImageInspect)
	router.POST(baseURL+"/images/:name/push", wrapper.ImagePush)
	router.POST(baseURL+"/images/:name/tag", wrapper.ImageTag)
	router.GET(baseURL+"/info", wrapper.SystemInfo)
	router.GET(baseURL+"/networks", wrapper.NetworkList)
	router.POST(baseURL+"/networks/create", wrapper.NetworkCreate)
	router.POST(baseURL+"/networks/prune", wrapper.NetworkPrune)
	router.DELETE(baseURL+"/networks/:id", wrapper.NetworkDelete)
	router.GET(baseURL+"/networks/:id", wrapper.NetworkInspect)
	router.POST(baseURL+"/networks/:id/connect", wrapper.NetworkConnect)
	router.POST(baseURL+"/networks/:id/disconnect", wrapper.NetworkDisconnect)
	router.GET(baseURL+"/nodes", wrapper.NodeList)
	router.DELETE(baseURL+"/nodes/:id", wrapper.NodeDelete)
	router.GET(baseURL+"/nodes/:id", wrapper.NodeInspect)
	router.POST(baseURL+"/nodes/:id/update", wrapper.NodeUpdate)
	router.GET(baseURL+"/plugins", wrapper.PluginList)
	router.POST(baseURL+"/plugins/create", wrapper.PluginCreate)
	router.GET(baseURL+"/plugins/privileges", wrapper.GetPluginPrivileges)
	router.POST(baseURL+"/plugins/pull", wrapper.PluginPull)
	router.DELETE(baseURL+"/plugins/:name", wrapper.PluginDelete)
	router.POST(baseURL+"/plugins/:name/disable", wrapper.PluginDisable)
	router.POST(baseURL+"/plugins/:name/enable", wrapper.PluginEnable)
	router.GET(baseURL+"/plugins/:name/json", wrapper.PluginInspect)
	router.POST(baseURL+"/plugins/:name/push", wrapper.PluginPush)
	router.POST(baseURL+"/plugins/:name/set", wrapper.PluginSet)
	router.POST(baseURL+"/plugins/:name/upgrade", wrapper.PluginUpgrade)
	router.GET(baseURL+"/secrets", wrapper.SecretList)
	router.POST(baseURL+"/secrets/create", wrapper.SecretCreate)
	router.DELETE(baseURL+"/secrets/:id", wrapper.SecretDelete)
	router.GET(baseURL+"/secrets/:id", wrapper.SecretInspect)
	router.POST(baseURL+"/secrets/:id/update", wrapper.SecretUpdate)
	router.GET(baseURL+"/services", wrapper.ServiceList)
	router.POST(baseURL+"/services/create", wrapper.ServiceCreate)
	router.DELETE(baseURL+"/services/:id", wrapper.ServiceDelete)
	router.GET(baseURL+"/services/:id", wrapper.ServiceInspect)
	router.GET(baseURL+"/services/:id/logs", wrapper.ServiceLogs)
	router.POST(baseURL+"/services/:id/update", wrapper.ServiceUpdate)
	router.POST(baseURL+"/session", wrapper.Session)
	router.GET(baseURL+"/swarm", wrapper.SwarmInspect)
	router.POST(baseURL+"/swarm/init", wrapper.SwarmInit)
	router.POST(baseURL+"/swarm/join", wrapper.SwarmJoin)
	router.POST(baseURL+"/swarm/leave", wrapper.SwarmLeave)
	router.POST(baseURL+"/swarm/unlock", wrapper.SwarmUnlock)
	router.GET(baseURL+"/swarm/unlockkey", wrapper.SwarmUnlockkey)
	router.POST(baseURL+"/swarm/update", wrapper.SwarmUpdate)
	router.GET(baseURL+"/system/df", wrapper.SystemDataUsage)
	router.GET(baseURL+"/tasks", wrapper.TaskList)
	router.GET(baseURL+"/tasks/:id", wrapper.TaskInspect)
	router.GET(baseURL+"/tasks/:id/logs", wrapper.TaskLogs)
	router.GET(baseURL+"/version", wrapper.SystemVersion)
	router.GET(baseURL+"/volumes", wrapper.VolumeList)
	router.POST(baseURL+"/volumes/create", wrapper.VolumeCreate)
	router.POST(baseURL+"/volumes/prune", wrapper.VolumePrune)
	router.DELETE(baseURL+"/volumes/:name", wrapper.VolumeDelete)
	router.GET(baseURL+"/volumes/:name", wrapper.VolumeInspect)

}

