// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ImageBuildHandlerFunc turns a function with the right signature into a image build handler
type ImageBuildHandlerFunc func(ImageBuildParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ImageBuildHandlerFunc) Handle(params ImageBuildParams) middleware.Responder {
	return fn(params)
}

// ImageBuildHandler interface for that can handle valid image build params
type ImageBuildHandler interface {
	Handle(ImageBuildParams) middleware.Responder
}

// NewImageBuild creates a new http.Handler for the image build operation
func NewImageBuild(ctx *middleware.Context, handler ImageBuildHandler) *ImageBuild {
	return &ImageBuild{Context: ctx, Handler: handler}
}

/* ImageBuild swagger:route POST /build Image imageBuild

Build an image

Build an image from a tar archive with a `Dockerfile` in it.

The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](/engine/reference/builder/).

The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.

The build is canceled if the client drops the connection by quitting or being killed.


*/
type ImageBuild struct {
	Context *middleware.Context
	Handler ImageBuildHandler
}

func (o *ImageBuild) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewImageBuildParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
