// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewImageLoadParams creates a new ImageLoadParams object
// with the default values initialized.
func NewImageLoadParams() ImageLoadParams {

	var (
		// initialize parameters with default values

		quietDefault = bool(false)
	)

	return ImageLoadParams{
		Quiet: &quietDefault,
	}
}

// ImageLoadParams contains all the bound params for the image load operation
// typically these are obtained from a http.Request
//
// swagger:parameters ImageLoad
type ImageLoadParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Tar archive containing images
	  In: body
	*/
	ImagesTarball io.ReadCloser
	/*Suppress progress details during load.
	  In: query
	  Default: false
	*/
	Quiet *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewImageLoadParams() beforehand.
func (o *ImageLoadParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		o.ImagesTarball = r.Body
	}

	qQuiet, qhkQuiet, _ := qs.GetOK("quiet")
	if err := o.bindQuiet(qQuiet, qhkQuiet, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindQuiet binds and validates parameter Quiet from query.
func (o *ImageLoadParams) bindQuiet(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewImageLoadParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("quiet", "query", "bool", raw)
	}
	o.Quiet = &value

	return nil
}
