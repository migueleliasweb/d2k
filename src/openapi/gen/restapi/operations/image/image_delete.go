// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ImageDeleteHandlerFunc turns a function with the right signature into a image delete handler
type ImageDeleteHandlerFunc func(ImageDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ImageDeleteHandlerFunc) Handle(params ImageDeleteParams) middleware.Responder {
	return fn(params)
}

// ImageDeleteHandler interface for that can handle valid image delete params
type ImageDeleteHandler interface {
	Handle(ImageDeleteParams) middleware.Responder
}

// NewImageDelete creates a new http.Handler for the image delete operation
func NewImageDelete(ctx *middleware.Context, handler ImageDeleteHandler) *ImageDelete {
	return &ImageDelete{Context: ctx, Handler: handler}
}

/* ImageDelete swagger:route DELETE /images/{name} Image imageDelete

Remove an image

Remove an image, along with any untagged parent images that were
referenced by that image.

Images can't be removed if they have descendant images, are being
used by a running container or are being used by a build.


*/
type ImageDelete struct {
	Context *middleware.Context
	Handler ImageDeleteHandler
}

func (o *ImageDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewImageDeleteParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
