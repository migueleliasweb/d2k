// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// ImageCommitURL generates an URL for the image commit operation
type ImageCommitURL struct {
	Author    *string
	Changes   *string
	Comment   *string
	Container *string
	Pause     *bool
	Repo      *string
	Tag       *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ImageCommitURL) WithBasePath(bp string) *ImageCommitURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ImageCommitURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *ImageCommitURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/commit"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/v1.41"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var authorQ string
	if o.Author != nil {
		authorQ = *o.Author
	}
	if authorQ != "" {
		qs.Set("author", authorQ)
	}

	var changesQ string
	if o.Changes != nil {
		changesQ = *o.Changes
	}
	if changesQ != "" {
		qs.Set("changes", changesQ)
	}

	var commentQ string
	if o.Comment != nil {
		commentQ = *o.Comment
	}
	if commentQ != "" {
		qs.Set("comment", commentQ)
	}

	var containerQ string
	if o.Container != nil {
		containerQ = *o.Container
	}
	if containerQ != "" {
		qs.Set("container", containerQ)
	}

	var pauseQ string
	if o.Pause != nil {
		pauseQ = swag.FormatBool(*o.Pause)
	}
	if pauseQ != "" {
		qs.Set("pause", pauseQ)
	}

	var repoQ string
	if o.Repo != nil {
		repoQ = *o.Repo
	}
	if repoQ != "" {
		qs.Set("repo", repoQ)
	}

	var tagQ string
	if o.Tag != nil {
		tagQ = *o.Tag
	}
	if tagQ != "" {
		qs.Set("tag", tagQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *ImageCommitURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *ImageCommitURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *ImageCommitURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on ImageCommitURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on ImageCommitURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *ImageCommitURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
