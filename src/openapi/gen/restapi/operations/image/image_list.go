// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ImageListHandlerFunc turns a function with the right signature into a image list handler
type ImageListHandlerFunc func(ImageListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ImageListHandlerFunc) Handle(params ImageListParams) middleware.Responder {
	return fn(params)
}

// ImageListHandler interface for that can handle valid image list params
type ImageListHandler interface {
	Handle(ImageListParams) middleware.Responder
}

// NewImageList creates a new http.Handler for the image list operation
func NewImageList(ctx *middleware.Context, handler ImageListHandler) *ImageList {
	return &ImageList{Context: ctx, Handler: handler}
}

/* ImageList swagger:route GET /images/json Image imageList

List Images

Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.

*/
type ImageList struct {
	Context *middleware.Context
	Handler ImageListHandler
}

func (o *ImageList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewImageListParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
