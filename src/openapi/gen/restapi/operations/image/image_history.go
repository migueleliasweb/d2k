// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageHistoryHandlerFunc turns a function with the right signature into a image history handler
type ImageHistoryHandlerFunc func(ImageHistoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ImageHistoryHandlerFunc) Handle(params ImageHistoryParams) middleware.Responder {
	return fn(params)
}

// ImageHistoryHandler interface for that can handle valid image history params
type ImageHistoryHandler interface {
	Handle(ImageHistoryParams) middleware.Responder
}

// NewImageHistory creates a new http.Handler for the image history operation
func NewImageHistory(ctx *middleware.Context, handler ImageHistoryHandler) *ImageHistory {
	return &ImageHistory{Context: ctx, Handler: handler}
}

/* ImageHistory swagger:route GET /images/{name}/history Image imageHistory

Get the history of an image

Return parent layers of an image.

*/
type ImageHistory struct {
	Context *middleware.Context
	Handler ImageHistoryHandler
}

func (o *ImageHistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewImageHistoryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// HistoryResponseItem HistoryResponseItem
//
// individual image layer information in response to ImageHistory operation
//
// swagger:model HistoryResponseItem
type HistoryResponseItem struct {

	// comment
	// Required: true
	Comment string `json:"Comment"`

	// created
	// Required: true
	Created int64 `json:"Created"`

	// created by
	// Required: true
	CreatedBy string `json:"CreatedBy"`

	// Id
	// Required: true
	ID string `json:"Id"`

	// size
	// Required: true
	Size int64 `json:"Size"`

	// tags
	// Required: true
	Tags []string `json:"Tags"`
}

// Validate validates this history response item
func (o *HistoryResponseItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *HistoryResponseItem) validateComment(formats strfmt.Registry) error {

	if err := validate.RequiredString("Comment", "body", o.Comment); err != nil {
		return err
	}

	return nil
}

func (o *HistoryResponseItem) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("Created", "body", int64(o.Created)); err != nil {
		return err
	}

	return nil
}

func (o *HistoryResponseItem) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.RequiredString("CreatedBy", "body", o.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (o *HistoryResponseItem) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("Id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *HistoryResponseItem) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("Size", "body", int64(o.Size)); err != nil {
		return err
	}

	return nil
}

func (o *HistoryResponseItem) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("Tags", "body", o.Tags); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this history response item based on context it is used
func (o *HistoryResponseItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *HistoryResponseItem) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *HistoryResponseItem) UnmarshalBinary(b []byte) error {
	var res HistoryResponseItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
