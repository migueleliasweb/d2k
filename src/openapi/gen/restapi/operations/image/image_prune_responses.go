// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// ImagePruneOKCode is the HTTP code returned for type ImagePruneOK
const ImagePruneOKCode int = 200

/*ImagePruneOK No error

swagger:response imagePruneOK
*/
type ImagePruneOK struct {

	/*
	  In: Body
	*/
	Payload *ImagePruneOKBody `json:"body,omitempty"`
}

// NewImagePruneOK creates ImagePruneOK with default headers values
func NewImagePruneOK() *ImagePruneOK {

	return &ImagePruneOK{}
}

// WithPayload adds the payload to the image prune o k response
func (o *ImagePruneOK) WithPayload(payload *ImagePruneOKBody) *ImagePruneOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the image prune o k response
func (o *ImagePruneOK) SetPayload(payload *ImagePruneOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImagePruneOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ImagePruneInternalServerErrorCode is the HTTP code returned for type ImagePruneInternalServerError
const ImagePruneInternalServerErrorCode int = 500

/*ImagePruneInternalServerError Server error

swagger:response imagePruneInternalServerError
*/
type ImagePruneInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewImagePruneInternalServerError creates ImagePruneInternalServerError with default headers values
func NewImagePruneInternalServerError() *ImagePruneInternalServerError {

	return &ImagePruneInternalServerError{}
}

// WithPayload adds the payload to the image prune internal server error response
func (o *ImagePruneInternalServerError) WithPayload(payload *models.ErrorResponse) *ImagePruneInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the image prune internal server error response
func (o *ImagePruneInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ImagePruneInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
