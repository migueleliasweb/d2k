// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ImageLoadHandlerFunc turns a function with the right signature into a image load handler
type ImageLoadHandlerFunc func(ImageLoadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ImageLoadHandlerFunc) Handle(params ImageLoadParams) middleware.Responder {
	return fn(params)
}

// ImageLoadHandler interface for that can handle valid image load params
type ImageLoadHandler interface {
	Handle(ImageLoadParams) middleware.Responder
}

// NewImageLoad creates a new http.Handler for the image load operation
func NewImageLoad(ctx *middleware.Context, handler ImageLoadHandler) *ImageLoad {
	return &ImageLoad{Context: ctx, Handler: handler}
}

/* ImageLoad swagger:route POST /images/load Image imageLoad

Import images

Load a set of images and tags into a repository.

For details on the format, see the [export image endpoint](#operation/ImageGet).


*/
type ImageLoad struct {
	Context *middleware.Context
	Handler ImageLoadHandler
}

func (o *ImageLoad) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewImageLoadParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
