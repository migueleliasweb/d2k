// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewBuildPruneParams creates a new BuildPruneParams object
//
// There are no default values defined in the spec.
func NewBuildPruneParams() BuildPruneParams {

	return BuildPruneParams{}
}

// BuildPruneParams contains all the bound params for the build prune operation
// typically these are obtained from a http.Request
//
// swagger:parameters BuildPrune
type BuildPruneParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Remove all types of build cache
	  In: query
	*/
	All *bool
	/*A JSON encoded value of the filters (a `map[string][]string`) to
	process on the list of build cache objects.

	Available filters:

	- `until=<duration>`: duration relative to daemon's time, during which build cache was not used, in Go's duration format (e.g., '24h')
	- `id=<id>`
	- `parent=<id>`
	- `type=<string>`
	- `description=<string>`
	- `inuse`
	- `shared`
	- `private`

	  In: query
	*/
	Filters *string
	/*Amount of disk space in bytes to keep for cache
	  In: query
	*/
	KeepStorage *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewBuildPruneParams() beforehand.
func (o *BuildPruneParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAll, qhkAll, _ := qs.GetOK("all")
	if err := o.bindAll(qAll, qhkAll, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilters, qhkFilters, _ := qs.GetOK("filters")
	if err := o.bindFilters(qFilters, qhkFilters, route.Formats); err != nil {
		res = append(res, err)
	}

	qKeepStorage, qhkKeepStorage, _ := qs.GetOK("keep-storage")
	if err := o.bindKeepStorage(qKeepStorage, qhkKeepStorage, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAll binds and validates parameter All from query.
func (o *BuildPruneParams) bindAll(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("all", "query", "bool", raw)
	}
	o.All = &value

	return nil
}

// bindFilters binds and validates parameter Filters from query.
func (o *BuildPruneParams) bindFilters(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Filters = &raw

	return nil
}

// bindKeepStorage binds and validates parameter KeepStorage from query.
func (o *BuildPruneParams) bindKeepStorage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("keep-storage", "query", "int64", raw)
	}
	o.KeepStorage = &value

	return nil
}
