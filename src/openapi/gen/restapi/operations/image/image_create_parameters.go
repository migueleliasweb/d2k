// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewImageCreateParams creates a new ImageCreateParams object
// with the default values initialized.
func NewImageCreateParams() ImageCreateParams {

	var (
		// initialize parameters with default values

		platformDefault = string("")
	)

	return ImageCreateParams{
		Platform: &platformDefault,
	}
}

// ImageCreateParams contains all the bound params for the image create operation
// typically these are obtained from a http.Request
//
// swagger:parameters ImageCreate
type ImageCreateParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*A base64url-encoded auth configuration.

	Refer to the [authentication section](#section/Authentication) for
	details.

	  In: header
	*/
	XRegistryAuth *string
	/*Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
	  In: query
	*/
	FromImage *string
	/*Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This parameter may only be used when importing an image.
	  In: query
	*/
	FromSrc *string
	/*Image content if the value `-` has been specified in fromSrc query parameter
	  In: body
	*/
	InputImage string
	/*Set commit message for imported image.
	  In: query
	*/
	Message *string
	/*Platform in the format os[/arch[/variant]]
	  In: query
	  Default: ""
	*/
	Platform *string
	/*Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
	  In: query
	*/
	Repo *string
	/*Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
	  In: query
	*/
	Tag *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewImageCreateParams() beforehand.
func (o *ImageCreateParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindXRegistryAuth(r.Header[http.CanonicalHeaderKey("X-Registry-Auth")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	qFromImage, qhkFromImage, _ := qs.GetOK("fromImage")
	if err := o.bindFromImage(qFromImage, qhkFromImage, route.Formats); err != nil {
		res = append(res, err)
	}

	qFromSrc, qhkFromSrc, _ := qs.GetOK("fromSrc")
	if err := o.bindFromSrc(qFromSrc, qhkFromSrc, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body string
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("inputImage", "body", "", err))
		} else {
			// no validation required on inline body
			o.InputImage = body
		}
	}

	qMessage, qhkMessage, _ := qs.GetOK("message")
	if err := o.bindMessage(qMessage, qhkMessage, route.Formats); err != nil {
		res = append(res, err)
	}

	qPlatform, qhkPlatform, _ := qs.GetOK("platform")
	if err := o.bindPlatform(qPlatform, qhkPlatform, route.Formats); err != nil {
		res = append(res, err)
	}

	qRepo, qhkRepo, _ := qs.GetOK("repo")
	if err := o.bindRepo(qRepo, qhkRepo, route.Formats); err != nil {
		res = append(res, err)
	}

	qTag, qhkTag, _ := qs.GetOK("tag")
	if err := o.bindTag(qTag, qhkTag, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXRegistryAuth binds and validates parameter XRegistryAuth from header.
func (o *ImageCreateParams) bindXRegistryAuth(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.XRegistryAuth = &raw

	return nil
}

// bindFromImage binds and validates parameter FromImage from query.
func (o *ImageCreateParams) bindFromImage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.FromImage = &raw

	return nil
}

// bindFromSrc binds and validates parameter FromSrc from query.
func (o *ImageCreateParams) bindFromSrc(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.FromSrc = &raw

	return nil
}

// bindMessage binds and validates parameter Message from query.
func (o *ImageCreateParams) bindMessage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Message = &raw

	return nil
}

// bindPlatform binds and validates parameter Platform from query.
func (o *ImageCreateParams) bindPlatform(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewImageCreateParams()
		return nil
	}
	o.Platform = &raw

	return nil
}

// bindRepo binds and validates parameter Repo from query.
func (o *ImageCreateParams) bindRepo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Repo = &raw

	return nil
}

// bindTag binds and validates parameter Tag from query.
func (o *ImageCreateParams) bindTag(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Tag = &raw

	return nil
}
