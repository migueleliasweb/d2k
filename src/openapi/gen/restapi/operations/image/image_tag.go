// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ImageTagHandlerFunc turns a function with the right signature into a image tag handler
type ImageTagHandlerFunc func(ImageTagParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ImageTagHandlerFunc) Handle(params ImageTagParams) middleware.Responder {
	return fn(params)
}

// ImageTagHandler interface for that can handle valid image tag params
type ImageTagHandler interface {
	Handle(ImageTagParams) middleware.Responder
}

// NewImageTag creates a new http.Handler for the image tag operation
func NewImageTag(ctx *middleware.Context, handler ImageTagHandler) *ImageTag {
	return &ImageTag{Context: ctx, Handler: handler}
}

/* ImageTag swagger:route POST /images/{name}/tag Image imageTag

Tag an image

Tag an image so that it becomes part of a repository.

*/
type ImageTag struct {
	Context *middleware.Context
	Handler ImageTagHandler
}

func (o *ImageTag) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewImageTagParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
