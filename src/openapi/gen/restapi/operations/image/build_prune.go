// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BuildPruneHandlerFunc turns a function with the right signature into a build prune handler
type BuildPruneHandlerFunc func(BuildPruneParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BuildPruneHandlerFunc) Handle(params BuildPruneParams) middleware.Responder {
	return fn(params)
}

// BuildPruneHandler interface for that can handle valid build prune params
type BuildPruneHandler interface {
	Handle(BuildPruneParams) middleware.Responder
}

// NewBuildPrune creates a new http.Handler for the build prune operation
func NewBuildPrune(ctx *middleware.Context, handler BuildPruneHandler) *BuildPrune {
	return &BuildPrune{Context: ctx, Handler: handler}
}

/* BuildPrune swagger:route POST /build/prune Image buildPrune

Delete builder cache

*/
type BuildPrune struct {
	Context *middleware.Context
	Handler BuildPruneHandler
}

func (o *BuildPrune) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewBuildPruneParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// BuildPruneOKBody BuildPruneResponse
//
// swagger:model BuildPruneOKBody
type BuildPruneOKBody struct {

	// caches deleted
	CachesDeleted []string `json:"CachesDeleted"`

	// Disk space reclaimed in bytes
	SpaceReclaimed int64 `json:"SpaceReclaimed,omitempty"`
}

// Validate validates this build prune o k body
func (o *BuildPruneOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this build prune o k body based on context it is used
func (o *BuildPruneOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *BuildPruneOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BuildPruneOKBody) UnmarshalBinary(b []byte) error {
	var res BuildPruneOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
