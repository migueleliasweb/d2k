// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// NewImageCommitParams creates a new ImageCommitParams object
// with the default values initialized.
func NewImageCommitParams() ImageCommitParams {

	var (
		// initialize parameters with default values

		pauseDefault = bool(true)
	)

	return ImageCommitParams{
		Pause: &pauseDefault,
	}
}

// ImageCommitParams contains all the bound params for the image commit operation
// typically these are obtained from a http.Request
//
// swagger:parameters ImageCommit
type ImageCommitParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`)
	  In: query
	*/
	Author *string
	/*`Dockerfile` instructions to apply while committing
	  In: query
	*/
	Changes *string
	/*Commit message
	  In: query
	*/
	Comment *string
	/*The ID or name of the container to commit
	  In: query
	*/
	Container *string
	/*The container configuration
	  In: body
	*/
	ContainerConfig *models.ContainerConfig
	/*Whether to pause the container before committing
	  In: query
	  Default: true
	*/
	Pause *bool
	/*Repository name for the created image
	  In: query
	*/
	Repo *string
	/*Tag name for the create image
	  In: query
	*/
	Tag *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewImageCommitParams() beforehand.
func (o *ImageCommitParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAuthor, qhkAuthor, _ := qs.GetOK("author")
	if err := o.bindAuthor(qAuthor, qhkAuthor, route.Formats); err != nil {
		res = append(res, err)
	}

	qChanges, qhkChanges, _ := qs.GetOK("changes")
	if err := o.bindChanges(qChanges, qhkChanges, route.Formats); err != nil {
		res = append(res, err)
	}

	qComment, qhkComment, _ := qs.GetOK("comment")
	if err := o.bindComment(qComment, qhkComment, route.Formats); err != nil {
		res = append(res, err)
	}

	qContainer, qhkContainer, _ := qs.GetOK("container")
	if err := o.bindContainer(qContainer, qhkContainer, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.ContainerConfig
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("containerConfig", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(context.Background())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.ContainerConfig = &body
			}
		}
	}

	qPause, qhkPause, _ := qs.GetOK("pause")
	if err := o.bindPause(qPause, qhkPause, route.Formats); err != nil {
		res = append(res, err)
	}

	qRepo, qhkRepo, _ := qs.GetOK("repo")
	if err := o.bindRepo(qRepo, qhkRepo, route.Formats); err != nil {
		res = append(res, err)
	}

	qTag, qhkTag, _ := qs.GetOK("tag")
	if err := o.bindTag(qTag, qhkTag, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAuthor binds and validates parameter Author from query.
func (o *ImageCommitParams) bindAuthor(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Author = &raw

	return nil
}

// bindChanges binds and validates parameter Changes from query.
func (o *ImageCommitParams) bindChanges(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Changes = &raw

	return nil
}

// bindComment binds and validates parameter Comment from query.
func (o *ImageCommitParams) bindComment(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Comment = &raw

	return nil
}

// bindContainer binds and validates parameter Container from query.
func (o *ImageCommitParams) bindContainer(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Container = &raw

	return nil
}

// bindPause binds and validates parameter Pause from query.
func (o *ImageCommitParams) bindPause(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewImageCommitParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("pause", "query", "bool", raw)
	}
	o.Pause = &value

	return nil
}

// bindRepo binds and validates parameter Repo from query.
func (o *ImageCommitParams) bindRepo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Repo = &raw

	return nil
}

// bindTag binds and validates parameter Tag from query.
func (o *ImageCommitParams) bindTag(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Tag = &raw

	return nil
}
