// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// ContainerChangesOKCode is the HTTP code returned for type ContainerChangesOK
const ContainerChangesOKCode int = 200

/*ContainerChangesOK The list of changes

swagger:response containerChangesOK
*/
type ContainerChangesOK struct {

	/*
	  In: Body
	*/
	Payload []*ContainerChangeResponseItem `json:"body,omitempty"`
}

// NewContainerChangesOK creates ContainerChangesOK with default headers values
func NewContainerChangesOK() *ContainerChangesOK {

	return &ContainerChangesOK{}
}

// WithPayload adds the payload to the container changes o k response
func (o *ContainerChangesOK) WithPayload(payload []*ContainerChangeResponseItem) *ContainerChangesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container changes o k response
func (o *ContainerChangesOK) SetPayload(payload []*ContainerChangeResponseItem) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerChangesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*ContainerChangeResponseItem, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ContainerChangesNotFoundCode is the HTTP code returned for type ContainerChangesNotFound
const ContainerChangesNotFoundCode int = 404

/*ContainerChangesNotFound no such container

swagger:response containerChangesNotFound
*/
type ContainerChangesNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewContainerChangesNotFound creates ContainerChangesNotFound with default headers values
func NewContainerChangesNotFound() *ContainerChangesNotFound {

	return &ContainerChangesNotFound{}
}

// WithPayload adds the payload to the container changes not found response
func (o *ContainerChangesNotFound) WithPayload(payload *models.ErrorResponse) *ContainerChangesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container changes not found response
func (o *ContainerChangesNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerChangesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ContainerChangesInternalServerErrorCode is the HTTP code returned for type ContainerChangesInternalServerError
const ContainerChangesInternalServerErrorCode int = 500

/*ContainerChangesInternalServerError server error

swagger:response containerChangesInternalServerError
*/
type ContainerChangesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewContainerChangesInternalServerError creates ContainerChangesInternalServerError with default headers values
func NewContainerChangesInternalServerError() *ContainerChangesInternalServerError {

	return &ContainerChangesInternalServerError{}
}

// WithPayload adds the payload to the container changes internal server error response
func (o *ContainerChangesInternalServerError) WithPayload(payload *models.ErrorResponse) *ContainerChangesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container changes internal server error response
func (o *ContainerChangesInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerChangesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
