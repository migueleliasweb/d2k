// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// ContainerCreateHandlerFunc turns a function with the right signature into a container create handler
type ContainerCreateHandlerFunc func(ContainerCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContainerCreateHandlerFunc) Handle(params ContainerCreateParams) middleware.Responder {
	return fn(params)
}

// ContainerCreateHandler interface for that can handle valid container create params
type ContainerCreateHandler interface {
	Handle(ContainerCreateParams) middleware.Responder
}

// NewContainerCreate creates a new http.Handler for the container create operation
func NewContainerCreate(ctx *middleware.Context, handler ContainerCreateHandler) *ContainerCreate {
	return &ContainerCreate{Context: ctx, Handler: handler}
}

/* ContainerCreate swagger:route POST /containers/create Container containerCreate

Create a container

*/
type ContainerCreate struct {
	Context *middleware.Context
	Handler ContainerCreateHandler
}

func (o *ContainerCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewContainerCreateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ContainerCreateBody container create body
// Example: {"AttachStderr":true,"AttachStdin":false,"AttachStdout":true,"Cmd":["date"],"Domainname":"","Entrypoint":"","Env":["FOO=bar","BAZ=quux"],"ExposedPorts":{"22/tcp":{}},"HostConfig":{"AutoRemove":true,"Binds":["/tmp:/tmp"],"BlkioDeviceReadBps":[{}],"BlkioDeviceReadIOps":[{}],"BlkioDeviceWriteBps":[{}],"BlkioDeviceWriteIOps":[{}],"BlkioWeight":300,"BlkioWeightDevice":[{}],"CapAdd":["NET_ADMIN"],"CapDrop":["MKNOD"],"CgroupParent":"","CpuPercent":80,"CpuPeriod":100000,"CpuQuota":50000,"CpuRealtimePeriod":1000000,"CpuRealtimeRuntime":10000,"CpuShares":512,"CpusetCpus":"0,1","CpusetMems":"0,1","DeviceRequests":[{"Capabilities":[["gpu","nvidia","compute"]],"Count":-1,"DeviceIDs\"":["0","1","GPU-fef8089b-4820-abfc-e83e-94318197576e"],"Driver":"nvidia","Options":{"property1":"string","property2":"string"}}],"Devices":[],"Dns":["8.8.8.8"],"DnsOptions":[""],"DnsSearch":[""],"GroupAdd":["newgroup"],"KernelMemory":0,"Links":["redis3:redis"],"LogConfig":{"Config":{},"Type":"json-file"},"MaximumIOBps":0,"MaximumIOps":0,"Memory":0,"MemoryReservation":0,"MemorySwap":0,"MemorySwappiness":60,"NanoCpus":500000,"NetworkMode":"bridge","OomKillDisable":false,"OomScoreAdj":500,"PidMode":"","PidsLimit":0,"PortBindings":{"22/tcp":[{"HostPort":"11022"}]},"Privileged":false,"PublishAllPorts":false,"ReadonlyRootfs":false,"RestartPolicy":{"MaximumRetryCount":0,"Name":""},"SecurityOpt":[],"ShmSize":67108864,"StorageOpt":{},"Ulimits":[{}],"VolumeDriver":"","VolumesFrom":["parent","other:ro"]},"Hostname":"","Image":"ubuntu","Labels":{"com.example.license":"GPL","com.example.vendor":"Acme","com.example.version":"1.0"},"MacAddress":"12:34:56:78:9a:bc","NetworkDisabled":false,"NetworkingConfig":{"EndpointsConfig":{"isolated_nw":{"Aliases":["server_x","server_y"],"IPAMConfig":{"IPv4Address":"172.20.30.33","IPv6Address":"2001:db8:abcd::3033","LinkLocalIPs":["169.254.34.68","fe80::3468"]},"Links":["container_1","container_2"]}}},"OpenStdin":false,"StdinOnce":false,"StopSignal":"SIGTERM","StopTimeout":10,"Tty":false,"User":"","Volumes":{"/volumes/data":{}},"WorkingDir":""}
//
// swagger:model ContainerCreateBody
type ContainerCreateBody struct {
	models.ContainerConfig

	// host config
	HostConfig *models.HostConfig `json:"HostConfig,omitempty"`

	// networking config
	NetworkingConfig *models.NetworkingConfig `json:"NetworkingConfig,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ContainerCreateBody) UnmarshalJSON(raw []byte) error {
	// ContainerCreateParamsBodyAO0
	var containerCreateParamsBodyAO0 models.ContainerConfig
	if err := swag.ReadJSON(raw, &containerCreateParamsBodyAO0); err != nil {
		return err
	}
	o.ContainerConfig = containerCreateParamsBodyAO0

	// ContainerCreateParamsBodyAO1
	var dataContainerCreateParamsBodyAO1 struct {
		HostConfig *models.HostConfig `json:"HostConfig,omitempty"`

		NetworkingConfig *models.NetworkingConfig `json:"NetworkingConfig,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataContainerCreateParamsBodyAO1); err != nil {
		return err
	}

	o.HostConfig = dataContainerCreateParamsBodyAO1.HostConfig

	o.NetworkingConfig = dataContainerCreateParamsBodyAO1.NetworkingConfig

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ContainerCreateBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	containerCreateParamsBodyAO0, err := swag.WriteJSON(o.ContainerConfig)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, containerCreateParamsBodyAO0)
	var dataContainerCreateParamsBodyAO1 struct {
		HostConfig *models.HostConfig `json:"HostConfig,omitempty"`

		NetworkingConfig *models.NetworkingConfig `json:"NetworkingConfig,omitempty"`
	}

	dataContainerCreateParamsBodyAO1.HostConfig = o.HostConfig

	dataContainerCreateParamsBodyAO1.NetworkingConfig = o.NetworkingConfig

	jsonDataContainerCreateParamsBodyAO1, errContainerCreateParamsBodyAO1 := swag.WriteJSON(dataContainerCreateParamsBodyAO1)
	if errContainerCreateParamsBodyAO1 != nil {
		return nil, errContainerCreateParamsBodyAO1
	}
	_parts = append(_parts, jsonDataContainerCreateParamsBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this container create body
func (o *ContainerCreateBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ContainerConfig
	if err := o.ContainerConfig.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHostConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworkingConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ContainerCreateBody) validateHostConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.HostConfig) { // not required
		return nil
	}

	if o.HostConfig != nil {
		if err := o.HostConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "HostConfig")
			}
			return err
		}
	}

	return nil
}

func (o *ContainerCreateBody) validateNetworkingConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.NetworkingConfig) { // not required
		return nil
	}

	if o.NetworkingConfig != nil {
		if err := o.NetworkingConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "NetworkingConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this container create body based on the context it is used
func (o *ContainerCreateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ContainerConfig
	if err := o.ContainerConfig.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHostConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNetworkingConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ContainerCreateBody) contextValidateHostConfig(ctx context.Context, formats strfmt.Registry) error {

	if o.HostConfig != nil {
		if err := o.HostConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "HostConfig")
			}
			return err
		}
	}

	return nil
}

func (o *ContainerCreateBody) contextValidateNetworkingConfig(ctx context.Context, formats strfmt.Registry) error {

	if o.NetworkingConfig != nil {
		if err := o.NetworkingConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "NetworkingConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ContainerCreateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContainerCreateBody) UnmarshalBinary(b []byte) error {
	var res ContainerCreateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ContainerCreateCreatedBody ContainerCreateResponse
//
// OK response to ContainerCreate operation
//
// swagger:model ContainerCreateCreatedBody
type ContainerCreateCreatedBody struct {

	// The ID of the created container
	// Required: true
	ID string `json:"Id"`

	// Warnings encountered when creating the container
	// Required: true
	Warnings []string `json:"Warnings"`
}

// Validate validates this container create created body
func (o *ContainerCreateCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ContainerCreateCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("containerCreateCreated"+"."+"Id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *ContainerCreateCreatedBody) validateWarnings(formats strfmt.Registry) error {

	if err := validate.Required("containerCreateCreated"+"."+"Warnings", "body", o.Warnings); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this container create created body based on context it is used
func (o *ContainerCreateCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ContainerCreateCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContainerCreateCreatedBody) UnmarshalBinary(b []byte) error {
	var res ContainerCreateCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
