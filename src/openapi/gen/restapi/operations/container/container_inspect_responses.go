// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// ContainerInspectOKCode is the HTTP code returned for type ContainerInspectOK
const ContainerInspectOKCode int = 200

/*ContainerInspectOK no error

swagger:response containerInspectOK
*/
type ContainerInspectOK struct {

	/*
	  In: Body
	*/
	Payload *ContainerInspectOKBody `json:"body,omitempty"`
}

// NewContainerInspectOK creates ContainerInspectOK with default headers values
func NewContainerInspectOK() *ContainerInspectOK {

	return &ContainerInspectOK{}
}

// WithPayload adds the payload to the container inspect o k response
func (o *ContainerInspectOK) WithPayload(payload *ContainerInspectOKBody) *ContainerInspectOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container inspect o k response
func (o *ContainerInspectOK) SetPayload(payload *ContainerInspectOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerInspectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ContainerInspectNotFoundCode is the HTTP code returned for type ContainerInspectNotFound
const ContainerInspectNotFoundCode int = 404

/*ContainerInspectNotFound no such container

swagger:response containerInspectNotFound
*/
type ContainerInspectNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewContainerInspectNotFound creates ContainerInspectNotFound with default headers values
func NewContainerInspectNotFound() *ContainerInspectNotFound {

	return &ContainerInspectNotFound{}
}

// WithPayload adds the payload to the container inspect not found response
func (o *ContainerInspectNotFound) WithPayload(payload *models.ErrorResponse) *ContainerInspectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container inspect not found response
func (o *ContainerInspectNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerInspectNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ContainerInspectInternalServerErrorCode is the HTTP code returned for type ContainerInspectInternalServerError
const ContainerInspectInternalServerErrorCode int = 500

/*ContainerInspectInternalServerError server error

swagger:response containerInspectInternalServerError
*/
type ContainerInspectInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewContainerInspectInternalServerError creates ContainerInspectInternalServerError with default headers values
func NewContainerInspectInternalServerError() *ContainerInspectInternalServerError {

	return &ContainerInspectInternalServerError{}
}

// WithPayload adds the payload to the container inspect internal server error response
func (o *ContainerInspectInternalServerError) WithPayload(payload *models.ErrorResponse) *ContainerInspectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container inspect internal server error response
func (o *ContainerInspectInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerInspectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
