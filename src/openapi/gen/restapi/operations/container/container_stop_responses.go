// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// ContainerStopNoContentCode is the HTTP code returned for type ContainerStopNoContent
const ContainerStopNoContentCode int = 204

/*ContainerStopNoContent no error

swagger:response containerStopNoContent
*/
type ContainerStopNoContent struct {
}

// NewContainerStopNoContent creates ContainerStopNoContent with default headers values
func NewContainerStopNoContent() *ContainerStopNoContent {

	return &ContainerStopNoContent{}
}

// WriteResponse to the client
func (o *ContainerStopNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// ContainerStopNotModifiedCode is the HTTP code returned for type ContainerStopNotModified
const ContainerStopNotModifiedCode int = 304

/*ContainerStopNotModified container already stopped

swagger:response containerStopNotModified
*/
type ContainerStopNotModified struct {
}

// NewContainerStopNotModified creates ContainerStopNotModified with default headers values
func NewContainerStopNotModified() *ContainerStopNotModified {

	return &ContainerStopNotModified{}
}

// WriteResponse to the client
func (o *ContainerStopNotModified) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(304)
}

// ContainerStopNotFoundCode is the HTTP code returned for type ContainerStopNotFound
const ContainerStopNotFoundCode int = 404

/*ContainerStopNotFound no such container

swagger:response containerStopNotFound
*/
type ContainerStopNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewContainerStopNotFound creates ContainerStopNotFound with default headers values
func NewContainerStopNotFound() *ContainerStopNotFound {

	return &ContainerStopNotFound{}
}

// WithPayload adds the payload to the container stop not found response
func (o *ContainerStopNotFound) WithPayload(payload *models.ErrorResponse) *ContainerStopNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container stop not found response
func (o *ContainerStopNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerStopNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ContainerStopInternalServerErrorCode is the HTTP code returned for type ContainerStopInternalServerError
const ContainerStopInternalServerErrorCode int = 500

/*ContainerStopInternalServerError server error

swagger:response containerStopInternalServerError
*/
type ContainerStopInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewContainerStopInternalServerError creates ContainerStopInternalServerError with default headers values
func NewContainerStopInternalServerError() *ContainerStopInternalServerError {

	return &ContainerStopInternalServerError{}
}

// WithPayload adds the payload to the container stop internal server error response
func (o *ContainerStopInternalServerError) WithPayload(payload *models.ErrorResponse) *ContainerStopInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container stop internal server error response
func (o *ContainerStopInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerStopInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
