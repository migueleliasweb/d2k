// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// ContainerUpdateOKCode is the HTTP code returned for type ContainerUpdateOK
const ContainerUpdateOKCode int = 200

/*ContainerUpdateOK The container has been updated.

swagger:response containerUpdateOK
*/
type ContainerUpdateOK struct {

	/*
	  In: Body
	*/
	Payload *ContainerUpdateOKBody `json:"body,omitempty"`
}

// NewContainerUpdateOK creates ContainerUpdateOK with default headers values
func NewContainerUpdateOK() *ContainerUpdateOK {

	return &ContainerUpdateOK{}
}

// WithPayload adds the payload to the container update o k response
func (o *ContainerUpdateOK) WithPayload(payload *ContainerUpdateOKBody) *ContainerUpdateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container update o k response
func (o *ContainerUpdateOK) SetPayload(payload *ContainerUpdateOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerUpdateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ContainerUpdateNotFoundCode is the HTTP code returned for type ContainerUpdateNotFound
const ContainerUpdateNotFoundCode int = 404

/*ContainerUpdateNotFound no such container

swagger:response containerUpdateNotFound
*/
type ContainerUpdateNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewContainerUpdateNotFound creates ContainerUpdateNotFound with default headers values
func NewContainerUpdateNotFound() *ContainerUpdateNotFound {

	return &ContainerUpdateNotFound{}
}

// WithPayload adds the payload to the container update not found response
func (o *ContainerUpdateNotFound) WithPayload(payload *models.ErrorResponse) *ContainerUpdateNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container update not found response
func (o *ContainerUpdateNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerUpdateNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ContainerUpdateInternalServerErrorCode is the HTTP code returned for type ContainerUpdateInternalServerError
const ContainerUpdateInternalServerErrorCode int = 500

/*ContainerUpdateInternalServerError server error

swagger:response containerUpdateInternalServerError
*/
type ContainerUpdateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewContainerUpdateInternalServerError creates ContainerUpdateInternalServerError with default headers values
func NewContainerUpdateInternalServerError() *ContainerUpdateInternalServerError {

	return &ContainerUpdateInternalServerError{}
}

// WithPayload adds the payload to the container update internal server error response
func (o *ContainerUpdateInternalServerError) WithPayload(payload *models.ErrorResponse) *ContainerUpdateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container update internal server error response
func (o *ContainerUpdateInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerUpdateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
