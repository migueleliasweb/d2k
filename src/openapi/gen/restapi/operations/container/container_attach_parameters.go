// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewContainerAttachParams creates a new ContainerAttachParams object
// with the default values initialized.
func NewContainerAttachParams() ContainerAttachParams {

	var (
		// initialize parameters with default values

		logsDefault   = bool(false)
		stderrDefault = bool(false)
		stdinDefault  = bool(false)
		stdoutDefault = bool(false)
		streamDefault = bool(false)
	)

	return ContainerAttachParams{
		Logs: &logsDefault,

		Stderr: &stderrDefault,

		Stdin: &stdinDefault,

		Stdout: &stdoutDefault,

		Stream: &streamDefault,
	}
}

// ContainerAttachParams contains all the bound params for the container attach operation
// typically these are obtained from a http.Request
//
// swagger:parameters ContainerAttach
type ContainerAttachParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Override the key sequence for detaching a container.Format is a single
	character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,
	`@`, `^`, `[`, `,` or `_`.

	  In: query
	*/
	DetachKeys *string
	/*ID or name of the container
	  Required: true
	  In: path
	*/
	ID string
	/*Replay previous logs from the container.

	This is useful for attaching to a container that has started and you
	want to output everything since the container started.

	If `stream` is also enabled, once all the previous output has been
	returned, it will seamlessly transition into streaming current
	output.

	  In: query
	  Default: false
	*/
	Logs *bool
	/*Attach to `stderr`
	  In: query
	  Default: false
	*/
	Stderr *bool
	/*Attach to `stdin`
	  In: query
	  Default: false
	*/
	Stdin *bool
	/*Attach to `stdout`
	  In: query
	  Default: false
	*/
	Stdout *bool
	/*Stream attached streams from the time the request was made onwards.

	  In: query
	  Default: false
	*/
	Stream *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewContainerAttachParams() beforehand.
func (o *ContainerAttachParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDetachKeys, qhkDetachKeys, _ := qs.GetOK("detachKeys")
	if err := o.bindDetachKeys(qDetachKeys, qhkDetachKeys, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qLogs, qhkLogs, _ := qs.GetOK("logs")
	if err := o.bindLogs(qLogs, qhkLogs, route.Formats); err != nil {
		res = append(res, err)
	}

	qStderr, qhkStderr, _ := qs.GetOK("stderr")
	if err := o.bindStderr(qStderr, qhkStderr, route.Formats); err != nil {
		res = append(res, err)
	}

	qStdin, qhkStdin, _ := qs.GetOK("stdin")
	if err := o.bindStdin(qStdin, qhkStdin, route.Formats); err != nil {
		res = append(res, err)
	}

	qStdout, qhkStdout, _ := qs.GetOK("stdout")
	if err := o.bindStdout(qStdout, qhkStdout, route.Formats); err != nil {
		res = append(res, err)
	}

	qStream, qhkStream, _ := qs.GetOK("stream")
	if err := o.bindStream(qStream, qhkStream, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDetachKeys binds and validates parameter DetachKeys from query.
func (o *ContainerAttachParams) bindDetachKeys(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.DetachKeys = &raw

	return nil
}

// bindID binds and validates parameter ID from path.
func (o *ContainerAttachParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ID = raw

	return nil
}

// bindLogs binds and validates parameter Logs from query.
func (o *ContainerAttachParams) bindLogs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewContainerAttachParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("logs", "query", "bool", raw)
	}
	o.Logs = &value

	return nil
}

// bindStderr binds and validates parameter Stderr from query.
func (o *ContainerAttachParams) bindStderr(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewContainerAttachParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("stderr", "query", "bool", raw)
	}
	o.Stderr = &value

	return nil
}

// bindStdin binds and validates parameter Stdin from query.
func (o *ContainerAttachParams) bindStdin(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewContainerAttachParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("stdin", "query", "bool", raw)
	}
	o.Stdin = &value

	return nil
}

// bindStdout binds and validates parameter Stdout from query.
func (o *ContainerAttachParams) bindStdout(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewContainerAttachParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("stdout", "query", "bool", raw)
	}
	o.Stdout = &value

	return nil
}

// bindStream binds and validates parameter Stream from query.
func (o *ContainerAttachParams) bindStream(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewContainerAttachParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("stream", "query", "bool", raw)
	}
	o.Stream = &value

	return nil
}
