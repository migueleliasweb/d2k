// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContainerTopHandlerFunc turns a function with the right signature into a container top handler
type ContainerTopHandlerFunc func(ContainerTopParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContainerTopHandlerFunc) Handle(params ContainerTopParams) middleware.Responder {
	return fn(params)
}

// ContainerTopHandler interface for that can handle valid container top params
type ContainerTopHandler interface {
	Handle(ContainerTopParams) middleware.Responder
}

// NewContainerTop creates a new http.Handler for the container top operation
func NewContainerTop(ctx *middleware.Context, handler ContainerTopHandler) *ContainerTop {
	return &ContainerTop{Context: ctx, Handler: handler}
}

/* ContainerTop swagger:route GET /containers/{id}/top Container containerTop

List processes running inside a container

On Unix systems, this is done by running the `ps` command. This endpoint
is not supported on Windows.


*/
type ContainerTop struct {
	Context *middleware.Context
	Handler ContainerTopHandler
}

func (o *ContainerTop) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewContainerTopParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ContainerTopOKBody ContainerTopResponse
//
// OK response to ContainerTop operation
//
// swagger:model ContainerTopOKBody
type ContainerTopOKBody struct {

	// Each process running in the container, where each is process
	// is an array of values corresponding to the titles.
	//
	Processes [][]string `json:"Processes"`

	// The ps column titles
	Titles []string `json:"Titles"`
}

// Validate validates this container top o k body
func (o *ContainerTopOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this container top o k body based on context it is used
func (o *ContainerTopOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ContainerTopOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContainerTopOKBody) UnmarshalBinary(b []byte) error {
	var res ContainerTopOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
