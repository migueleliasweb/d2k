// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// ContainerArchiveInfoOKCode is the HTTP code returned for type ContainerArchiveInfoOK
const ContainerArchiveInfoOKCode int = 200

/*ContainerArchiveInfoOK no error

swagger:response containerArchiveInfoOK
*/
type ContainerArchiveInfoOK struct {
	/*A base64 - encoded JSON object with some filesystem header
	information about the path


	*/
	XDockerContainerPathStat string `json:"X-Docker-Container-Path-Stat"`
}

// NewContainerArchiveInfoOK creates ContainerArchiveInfoOK with default headers values
func NewContainerArchiveInfoOK() *ContainerArchiveInfoOK {

	return &ContainerArchiveInfoOK{}
}

// WithXDockerContainerPathStat adds the xDockerContainerPathStat to the container archive info o k response
func (o *ContainerArchiveInfoOK) WithXDockerContainerPathStat(xDockerContainerPathStat string) *ContainerArchiveInfoOK {
	o.XDockerContainerPathStat = xDockerContainerPathStat
	return o
}

// SetXDockerContainerPathStat sets the xDockerContainerPathStat to the container archive info o k response
func (o *ContainerArchiveInfoOK) SetXDockerContainerPathStat(xDockerContainerPathStat string) {
	o.XDockerContainerPathStat = xDockerContainerPathStat
}

// WriteResponse to the client
func (o *ContainerArchiveInfoOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Docker-Container-Path-Stat

	xDockerContainerPathStat := o.XDockerContainerPathStat
	if xDockerContainerPathStat != "" {
		rw.Header().Set("X-Docker-Container-Path-Stat", xDockerContainerPathStat)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// ContainerArchiveInfoBadRequestCode is the HTTP code returned for type ContainerArchiveInfoBadRequest
const ContainerArchiveInfoBadRequestCode int = 400

/*ContainerArchiveInfoBadRequest Bad parameter

swagger:response containerArchiveInfoBadRequest
*/
type ContainerArchiveInfoBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ContainerArchiveInfoBadRequestBody `json:"body,omitempty"`
}

// NewContainerArchiveInfoBadRequest creates ContainerArchiveInfoBadRequest with default headers values
func NewContainerArchiveInfoBadRequest() *ContainerArchiveInfoBadRequest {

	return &ContainerArchiveInfoBadRequest{}
}

// WithPayload adds the payload to the container archive info bad request response
func (o *ContainerArchiveInfoBadRequest) WithPayload(payload *ContainerArchiveInfoBadRequestBody) *ContainerArchiveInfoBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container archive info bad request response
func (o *ContainerArchiveInfoBadRequest) SetPayload(payload *ContainerArchiveInfoBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerArchiveInfoBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ContainerArchiveInfoNotFoundCode is the HTTP code returned for type ContainerArchiveInfoNotFound
const ContainerArchiveInfoNotFoundCode int = 404

/*ContainerArchiveInfoNotFound Container or path does not exist

swagger:response containerArchiveInfoNotFound
*/
type ContainerArchiveInfoNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewContainerArchiveInfoNotFound creates ContainerArchiveInfoNotFound with default headers values
func NewContainerArchiveInfoNotFound() *ContainerArchiveInfoNotFound {

	return &ContainerArchiveInfoNotFound{}
}

// WithPayload adds the payload to the container archive info not found response
func (o *ContainerArchiveInfoNotFound) WithPayload(payload *models.ErrorResponse) *ContainerArchiveInfoNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container archive info not found response
func (o *ContainerArchiveInfoNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerArchiveInfoNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ContainerArchiveInfoInternalServerErrorCode is the HTTP code returned for type ContainerArchiveInfoInternalServerError
const ContainerArchiveInfoInternalServerErrorCode int = 500

/*ContainerArchiveInfoInternalServerError Server error

swagger:response containerArchiveInfoInternalServerError
*/
type ContainerArchiveInfoInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewContainerArchiveInfoInternalServerError creates ContainerArchiveInfoInternalServerError with default headers values
func NewContainerArchiveInfoInternalServerError() *ContainerArchiveInfoInternalServerError {

	return &ContainerArchiveInfoInternalServerError{}
}

// WithPayload adds the payload to the container archive info internal server error response
func (o *ContainerArchiveInfoInternalServerError) WithPayload(payload *models.ErrorResponse) *ContainerArchiveInfoInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container archive info internal server error response
func (o *ContainerArchiveInfoInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerArchiveInfoInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
