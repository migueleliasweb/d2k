// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ContainerListHandlerFunc turns a function with the right signature into a container list handler
type ContainerListHandlerFunc func(ContainerListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContainerListHandlerFunc) Handle(params ContainerListParams) middleware.Responder {
	return fn(params)
}

// ContainerListHandler interface for that can handle valid container list params
type ContainerListHandler interface {
	Handle(ContainerListParams) middleware.Responder
}

// NewContainerList creates a new http.Handler for the container list operation
func NewContainerList(ctx *middleware.Context, handler ContainerListHandler) *ContainerList {
	return &ContainerList{Context: ctx, Handler: handler}
}

/* ContainerList swagger:route GET /containers/json Container containerList

List containers

Returns a list of containers. For details on the format, see the
[inspect endpoint](#operation/ContainerInspect).

Note that it uses a different, smaller representation of a container
than inspecting a single container. For example, the list of linked
containers is not propagated .


*/
type ContainerList struct {
	Context *middleware.Context
	Handler ContainerListHandler
}

func (o *ContainerList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewContainerListParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
