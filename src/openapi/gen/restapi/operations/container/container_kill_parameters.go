// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewContainerKillParams creates a new ContainerKillParams object
// with the default values initialized.
func NewContainerKillParams() ContainerKillParams {

	var (
		// initialize parameters with default values

		signalDefault = string("SIGKILL")
	)

	return ContainerKillParams{
		Signal: &signalDefault,
	}
}

// ContainerKillParams contains all the bound params for the container kill operation
// typically these are obtained from a http.Request
//
// swagger:parameters ContainerKill
type ContainerKillParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*ID or name of the container
	  Required: true
	  In: path
	*/
	ID string
	/*Signal to send to the container as an integer or string (e.g. `SIGINT`)
	  In: query
	  Default: "SIGKILL"
	*/
	Signal *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewContainerKillParams() beforehand.
func (o *ContainerKillParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qSignal, qhkSignal, _ := qs.GetOK("signal")
	if err := o.bindSignal(qSignal, qhkSignal, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindID binds and validates parameter ID from path.
func (o *ContainerKillParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ID = raw

	return nil
}

// bindSignal binds and validates parameter Signal from query.
func (o *ContainerKillParams) bindSignal(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewContainerKillParams()
		return nil
	}
	o.Signal = &raw

	return nil
}
