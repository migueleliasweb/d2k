// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ContainerKillHandlerFunc turns a function with the right signature into a container kill handler
type ContainerKillHandlerFunc func(ContainerKillParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContainerKillHandlerFunc) Handle(params ContainerKillParams) middleware.Responder {
	return fn(params)
}

// ContainerKillHandler interface for that can handle valid container kill params
type ContainerKillHandler interface {
	Handle(ContainerKillParams) middleware.Responder
}

// NewContainerKill creates a new http.Handler for the container kill operation
func NewContainerKill(ctx *middleware.Context, handler ContainerKillHandler) *ContainerKill {
	return &ContainerKill{Context: ctx, Handler: handler}
}

/* ContainerKill swagger:route POST /containers/{id}/kill Container containerKill

Kill a container

Send a POSIX signal to a container, defaulting to killing to the
container.


*/
type ContainerKill struct {
	Context *middleware.Context
	Handler ContainerKillHandler
}

func (o *ContainerKill) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewContainerKillParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
