// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ContainerStatsHandlerFunc turns a function with the right signature into a container stats handler
type ContainerStatsHandlerFunc func(ContainerStatsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContainerStatsHandlerFunc) Handle(params ContainerStatsParams) middleware.Responder {
	return fn(params)
}

// ContainerStatsHandler interface for that can handle valid container stats params
type ContainerStatsHandler interface {
	Handle(ContainerStatsParams) middleware.Responder
}

// NewContainerStats creates a new http.Handler for the container stats operation
func NewContainerStats(ctx *middleware.Context, handler ContainerStatsHandler) *ContainerStats {
	return &ContainerStats{Context: ctx, Handler: handler}
}

/* ContainerStats swagger:route GET /containers/{id}/stats Container containerStats

Get container stats based on resource usage

This endpoint returns a live stream of a containerâ€™s resource usage
statistics.

The `precpu_stats` is the CPU statistic of the *previous* read, and is
used to calculate the CPU usage percentage. It is not an exact copy
of the `cpu_stats` field.

If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is
nil then for compatibility with older daemons the length of the
corresponding `cpu_usage.percpu_usage` array should be used.

On a cgroup v2 host, the following fields are not set
* `blkio_stats`: all fields other than `io_service_bytes_recursive`
* `cpu_stats`: `cpu_usage.percpu_usage`
* `memory_stats`: `max_usage` and `failcnt`
Also, `memory_stats.stats` fields are incompatible with cgroup v1.

To calculate the values shown by the `stats` command of the docker cli tool
the following formulas can be used:
* used_memory = `memory_stats.usage - memory_stats.stats.cache`
* available_memory = `memory_stats.limit`
* Memory usage % = `(used_memory / available_memory) * 100.0`
* cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage`
* system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage`
* number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus`
* CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0`


*/
type ContainerStats struct {
	Context *middleware.Context
	Handler ContainerStatsHandler
}

func (o *ContainerStats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewContainerStatsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
