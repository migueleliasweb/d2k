// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// PutContainerArchiveOKCode is the HTTP code returned for type PutContainerArchiveOK
const PutContainerArchiveOKCode int = 200

/*PutContainerArchiveOK The content was extracted successfully

swagger:response putContainerArchiveOK
*/
type PutContainerArchiveOK struct {
}

// NewPutContainerArchiveOK creates PutContainerArchiveOK with default headers values
func NewPutContainerArchiveOK() *PutContainerArchiveOK {

	return &PutContainerArchiveOK{}
}

// WriteResponse to the client
func (o *PutContainerArchiveOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PutContainerArchiveBadRequestCode is the HTTP code returned for type PutContainerArchiveBadRequest
const PutContainerArchiveBadRequestCode int = 400

/*PutContainerArchiveBadRequest Bad parameter

swagger:response putContainerArchiveBadRequest
*/
type PutContainerArchiveBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPutContainerArchiveBadRequest creates PutContainerArchiveBadRequest with default headers values
func NewPutContainerArchiveBadRequest() *PutContainerArchiveBadRequest {

	return &PutContainerArchiveBadRequest{}
}

// WithPayload adds the payload to the put container archive bad request response
func (o *PutContainerArchiveBadRequest) WithPayload(payload *models.ErrorResponse) *PutContainerArchiveBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put container archive bad request response
func (o *PutContainerArchiveBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutContainerArchiveBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutContainerArchiveForbiddenCode is the HTTP code returned for type PutContainerArchiveForbidden
const PutContainerArchiveForbiddenCode int = 403

/*PutContainerArchiveForbidden Permission denied, the volume or container rootfs is marked as read-only.

swagger:response putContainerArchiveForbidden
*/
type PutContainerArchiveForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPutContainerArchiveForbidden creates PutContainerArchiveForbidden with default headers values
func NewPutContainerArchiveForbidden() *PutContainerArchiveForbidden {

	return &PutContainerArchiveForbidden{}
}

// WithPayload adds the payload to the put container archive forbidden response
func (o *PutContainerArchiveForbidden) WithPayload(payload *models.ErrorResponse) *PutContainerArchiveForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put container archive forbidden response
func (o *PutContainerArchiveForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutContainerArchiveForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutContainerArchiveNotFoundCode is the HTTP code returned for type PutContainerArchiveNotFound
const PutContainerArchiveNotFoundCode int = 404

/*PutContainerArchiveNotFound No such container or path does not exist inside the container

swagger:response putContainerArchiveNotFound
*/
type PutContainerArchiveNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPutContainerArchiveNotFound creates PutContainerArchiveNotFound with default headers values
func NewPutContainerArchiveNotFound() *PutContainerArchiveNotFound {

	return &PutContainerArchiveNotFound{}
}

// WithPayload adds the payload to the put container archive not found response
func (o *PutContainerArchiveNotFound) WithPayload(payload *models.ErrorResponse) *PutContainerArchiveNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put container archive not found response
func (o *PutContainerArchiveNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutContainerArchiveNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutContainerArchiveInternalServerErrorCode is the HTTP code returned for type PutContainerArchiveInternalServerError
const PutContainerArchiveInternalServerErrorCode int = 500

/*PutContainerArchiveInternalServerError Server error

swagger:response putContainerArchiveInternalServerError
*/
type PutContainerArchiveInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPutContainerArchiveInternalServerError creates PutContainerArchiveInternalServerError with default headers values
func NewPutContainerArchiveInternalServerError() *PutContainerArchiveInternalServerError {

	return &PutContainerArchiveInternalServerError{}
}

// WithPayload adds the payload to the put container archive internal server error response
func (o *PutContainerArchiveInternalServerError) WithPayload(payload *models.ErrorResponse) *PutContainerArchiveInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put container archive internal server error response
func (o *PutContainerArchiveInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutContainerArchiveInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
