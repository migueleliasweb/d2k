// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// ContainerKillNoContentCode is the HTTP code returned for type ContainerKillNoContent
const ContainerKillNoContentCode int = 204

/*ContainerKillNoContent no error

swagger:response containerKillNoContent
*/
type ContainerKillNoContent struct {
}

// NewContainerKillNoContent creates ContainerKillNoContent with default headers values
func NewContainerKillNoContent() *ContainerKillNoContent {

	return &ContainerKillNoContent{}
}

// WriteResponse to the client
func (o *ContainerKillNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// ContainerKillNotFoundCode is the HTTP code returned for type ContainerKillNotFound
const ContainerKillNotFoundCode int = 404

/*ContainerKillNotFound no such container

swagger:response containerKillNotFound
*/
type ContainerKillNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewContainerKillNotFound creates ContainerKillNotFound with default headers values
func NewContainerKillNotFound() *ContainerKillNotFound {

	return &ContainerKillNotFound{}
}

// WithPayload adds the payload to the container kill not found response
func (o *ContainerKillNotFound) WithPayload(payload *models.ErrorResponse) *ContainerKillNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container kill not found response
func (o *ContainerKillNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerKillNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ContainerKillConflictCode is the HTTP code returned for type ContainerKillConflict
const ContainerKillConflictCode int = 409

/*ContainerKillConflict container is not running

swagger:response containerKillConflict
*/
type ContainerKillConflict struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewContainerKillConflict creates ContainerKillConflict with default headers values
func NewContainerKillConflict() *ContainerKillConflict {

	return &ContainerKillConflict{}
}

// WithPayload adds the payload to the container kill conflict response
func (o *ContainerKillConflict) WithPayload(payload *models.ErrorResponse) *ContainerKillConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container kill conflict response
func (o *ContainerKillConflict) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerKillConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ContainerKillInternalServerErrorCode is the HTTP code returned for type ContainerKillInternalServerError
const ContainerKillInternalServerErrorCode int = 500

/*ContainerKillInternalServerError server error

swagger:response containerKillInternalServerError
*/
type ContainerKillInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewContainerKillInternalServerError creates ContainerKillInternalServerError with default headers values
func NewContainerKillInternalServerError() *ContainerKillInternalServerError {

	return &ContainerKillInternalServerError{}
}

// WithPayload adds the payload to the container kill internal server error response
func (o *ContainerKillInternalServerError) WithPayload(payload *models.ErrorResponse) *ContainerKillInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the container kill internal server error response
func (o *ContainerKillInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ContainerKillInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
