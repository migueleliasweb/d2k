// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/config"
	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/container"
	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/distribution"
	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/exec"
	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/image"
	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/network"
	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/node"
	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/plugin"
	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/secret"
	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/service"
	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/session"
	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/swarm"
	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/system"
	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/task"
	"github.com/migueleliasweb/d2k/src/openapi/gen/restapi/operations/volume"
)

// NewDockerEngineAPIAPI creates a new DockerEngineAPI instance
func NewDockerEngineAPIAPI(spec *loads.Document) *DockerEngineAPIAPI {
	return &DockerEngineAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		BinConsumer:  runtime.ByteStreamConsumer(),
		JSONConsumer: runtime.JSONConsumer(),
		TarConsumer: runtime.ConsumerFunc(func(r io.Reader, target interface{}) error {
			return errors.NotImplemented("tar consumer has not yet been implemented")
		}),
		TxtConsumer: runtime.TextConsumer(),

		BinProducer:  runtime.ByteStreamProducer(),
		JSONProducer: runtime.JSONProducer(),
		TarProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("tar producer has not yet been implemented")
		}),
		TxtProducer: runtime.TextProducer(),

		ImageBuildPruneHandler: image.BuildPruneHandlerFunc(func(params image.BuildPruneParams) middleware.Responder {
			return middleware.NotImplemented("operation image.BuildPrune has not yet been implemented")
		}),
		ConfigConfigCreateHandler: config.ConfigCreateHandlerFunc(func(params config.ConfigCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation config.ConfigCreate has not yet been implemented")
		}),
		ConfigConfigDeleteHandler: config.ConfigDeleteHandlerFunc(func(params config.ConfigDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation config.ConfigDelete has not yet been implemented")
		}),
		ConfigConfigInspectHandler: config.ConfigInspectHandlerFunc(func(params config.ConfigInspectParams) middleware.Responder {
			return middleware.NotImplemented("operation config.ConfigInspect has not yet been implemented")
		}),
		ConfigConfigListHandler: config.ConfigListHandlerFunc(func(params config.ConfigListParams) middleware.Responder {
			return middleware.NotImplemented("operation config.ConfigList has not yet been implemented")
		}),
		ConfigConfigUpdateHandler: config.ConfigUpdateHandlerFunc(func(params config.ConfigUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation config.ConfigUpdate has not yet been implemented")
		}),
		ContainerContainerArchiveHandler: container.ContainerArchiveHandlerFunc(func(params container.ContainerArchiveParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerArchive has not yet been implemented")
		}),
		ContainerContainerArchiveInfoHandler: container.ContainerArchiveInfoHandlerFunc(func(params container.ContainerArchiveInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerArchiveInfo has not yet been implemented")
		}),
		ContainerContainerAttachHandler: container.ContainerAttachHandlerFunc(func(params container.ContainerAttachParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerAttach has not yet been implemented")
		}),
		ContainerContainerAttachWebsocketHandler: container.ContainerAttachWebsocketHandlerFunc(func(params container.ContainerAttachWebsocketParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerAttachWebsocket has not yet been implemented")
		}),
		ContainerContainerChangesHandler: container.ContainerChangesHandlerFunc(func(params container.ContainerChangesParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerChanges has not yet been implemented")
		}),
		ContainerContainerCreateHandler: container.ContainerCreateHandlerFunc(func(params container.ContainerCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerCreate has not yet been implemented")
		}),
		ContainerContainerDeleteHandler: container.ContainerDeleteHandlerFunc(func(params container.ContainerDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerDelete has not yet been implemented")
		}),
		ExecContainerExecHandler: exec.ContainerExecHandlerFunc(func(params exec.ContainerExecParams) middleware.Responder {
			return middleware.NotImplemented("operation exec.ContainerExec has not yet been implemented")
		}),
		ContainerContainerExportHandler: container.ContainerExportHandlerFunc(func(params container.ContainerExportParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerExport has not yet been implemented")
		}),
		ContainerContainerInspectHandler: container.ContainerInspectHandlerFunc(func(params container.ContainerInspectParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerInspect has not yet been implemented")
		}),
		ContainerContainerKillHandler: container.ContainerKillHandlerFunc(func(params container.ContainerKillParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerKill has not yet been implemented")
		}),
		ContainerContainerListHandler: container.ContainerListHandlerFunc(func(params container.ContainerListParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerList has not yet been implemented")
		}),
		ContainerContainerLogsHandler: container.ContainerLogsHandlerFunc(func(params container.ContainerLogsParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerLogs has not yet been implemented")
		}),
		ContainerContainerPauseHandler: container.ContainerPauseHandlerFunc(func(params container.ContainerPauseParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerPause has not yet been implemented")
		}),
		ContainerContainerPruneHandler: container.ContainerPruneHandlerFunc(func(params container.ContainerPruneParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerPrune has not yet been implemented")
		}),
		ContainerContainerRenameHandler: container.ContainerRenameHandlerFunc(func(params container.ContainerRenameParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerRename has not yet been implemented")
		}),
		ContainerContainerResizeHandler: container.ContainerResizeHandlerFunc(func(params container.ContainerResizeParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerResize has not yet been implemented")
		}),
		ContainerContainerRestartHandler: container.ContainerRestartHandlerFunc(func(params container.ContainerRestartParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerRestart has not yet been implemented")
		}),
		ContainerContainerStartHandler: container.ContainerStartHandlerFunc(func(params container.ContainerStartParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerStart has not yet been implemented")
		}),
		ContainerContainerStatsHandler: container.ContainerStatsHandlerFunc(func(params container.ContainerStatsParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerStats has not yet been implemented")
		}),
		ContainerContainerStopHandler: container.ContainerStopHandlerFunc(func(params container.ContainerStopParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerStop has not yet been implemented")
		}),
		ContainerContainerTopHandler: container.ContainerTopHandlerFunc(func(params container.ContainerTopParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerTop has not yet been implemented")
		}),
		ContainerContainerUnpauseHandler: container.ContainerUnpauseHandlerFunc(func(params container.ContainerUnpauseParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerUnpause has not yet been implemented")
		}),
		ContainerContainerUpdateHandler: container.ContainerUpdateHandlerFunc(func(params container.ContainerUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerUpdate has not yet been implemented")
		}),
		ContainerContainerWaitHandler: container.ContainerWaitHandlerFunc(func(params container.ContainerWaitParams) middleware.Responder {
			return middleware.NotImplemented("operation container.ContainerWait has not yet been implemented")
		}),
		DistributionDistributionInspectHandler: distribution.DistributionInspectHandlerFunc(func(params distribution.DistributionInspectParams) middleware.Responder {
			return middleware.NotImplemented("operation distribution.DistributionInspect has not yet been implemented")
		}),
		ExecExecInspectHandler: exec.ExecInspectHandlerFunc(func(params exec.ExecInspectParams) middleware.Responder {
			return middleware.NotImplemented("operation exec.ExecInspect has not yet been implemented")
		}),
		ExecExecResizeHandler: exec.ExecResizeHandlerFunc(func(params exec.ExecResizeParams) middleware.Responder {
			return middleware.NotImplemented("operation exec.ExecResize has not yet been implemented")
		}),
		ExecExecStartHandler: exec.ExecStartHandlerFunc(func(params exec.ExecStartParams) middleware.Responder {
			return middleware.NotImplemented("operation exec.ExecStart has not yet been implemented")
		}),
		PluginGetPluginPrivilegesHandler: plugin.GetPluginPrivilegesHandlerFunc(func(params plugin.GetPluginPrivilegesParams) middleware.Responder {
			return middleware.NotImplemented("operation plugin.GetPluginPrivileges has not yet been implemented")
		}),
		ImageImageBuildHandler: image.ImageBuildHandlerFunc(func(params image.ImageBuildParams) middleware.Responder {
			return middleware.NotImplemented("operation image.ImageBuild has not yet been implemented")
		}),
		ImageImageCommitHandler: image.ImageCommitHandlerFunc(func(params image.ImageCommitParams) middleware.Responder {
			return middleware.NotImplemented("operation image.ImageCommit has not yet been implemented")
		}),
		ImageImageCreateHandler: image.ImageCreateHandlerFunc(func(params image.ImageCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation image.ImageCreate has not yet been implemented")
		}),
		ImageImageDeleteHandler: image.ImageDeleteHandlerFunc(func(params image.ImageDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation image.ImageDelete has not yet been implemented")
		}),
		ImageImageGetHandler: image.ImageGetHandlerFunc(func(params image.ImageGetParams) middleware.Responder {
			return middleware.NotImplemented("operation image.ImageGet has not yet been implemented")
		}),
		ImageImageGetAllHandler: image.ImageGetAllHandlerFunc(func(params image.ImageGetAllParams) middleware.Responder {
			return middleware.NotImplemented("operation image.ImageGetAll has not yet been implemented")
		}),
		ImageImageHistoryHandler: image.ImageHistoryHandlerFunc(func(params image.ImageHistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation image.ImageHistory has not yet been implemented")
		}),
		ImageImageInspectHandler: image.ImageInspectHandlerFunc(func(params image.ImageInspectParams) middleware.Responder {
			return middleware.NotImplemented("operation image.ImageInspect has not yet been implemented")
		}),
		ImageImageListHandler: image.ImageListHandlerFunc(func(params image.ImageListParams) middleware.Responder {
			return middleware.NotImplemented("operation image.ImageList has not yet been implemented")
		}),
		ImageImageLoadHandler: image.ImageLoadHandlerFunc(func(params image.ImageLoadParams) middleware.Responder {
			return middleware.NotImplemented("operation image.ImageLoad has not yet been implemented")
		}),
		ImageImagePruneHandler: image.ImagePruneHandlerFunc(func(params image.ImagePruneParams) middleware.Responder {
			return middleware.NotImplemented("operation image.ImagePrune has not yet been implemented")
		}),
		ImageImagePushHandler: image.ImagePushHandlerFunc(func(params image.ImagePushParams) middleware.Responder {
			return middleware.NotImplemented("operation image.ImagePush has not yet been implemented")
		}),
		ImageImageSearchHandler: image.ImageSearchHandlerFunc(func(params image.ImageSearchParams) middleware.Responder {
			return middleware.NotImplemented("operation image.ImageSearch has not yet been implemented")
		}),
		ImageImageTagHandler: image.ImageTagHandlerFunc(func(params image.ImageTagParams) middleware.Responder {
			return middleware.NotImplemented("operation image.ImageTag has not yet been implemented")
		}),
		NetworkNetworkConnectHandler: network.NetworkConnectHandlerFunc(func(params network.NetworkConnectParams) middleware.Responder {
			return middleware.NotImplemented("operation network.NetworkConnect has not yet been implemented")
		}),
		NetworkNetworkCreateHandler: network.NetworkCreateHandlerFunc(func(params network.NetworkCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation network.NetworkCreate has not yet been implemented")
		}),
		NetworkNetworkDeleteHandler: network.NetworkDeleteHandlerFunc(func(params network.NetworkDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation network.NetworkDelete has not yet been implemented")
		}),
		NetworkNetworkDisconnectHandler: network.NetworkDisconnectHandlerFunc(func(params network.NetworkDisconnectParams) middleware.Responder {
			return middleware.NotImplemented("operation network.NetworkDisconnect has not yet been implemented")
		}),
		NetworkNetworkInspectHandler: network.NetworkInspectHandlerFunc(func(params network.NetworkInspectParams) middleware.Responder {
			return middleware.NotImplemented("operation network.NetworkInspect has not yet been implemented")
		}),
		NetworkNetworkListHandler: network.NetworkListHandlerFunc(func(params network.NetworkListParams) middleware.Responder {
			return middleware.NotImplemented("operation network.NetworkList has not yet been implemented")
		}),
		NetworkNetworkPruneHandler: network.NetworkPruneHandlerFunc(func(params network.NetworkPruneParams) middleware.Responder {
			return middleware.NotImplemented("operation network.NetworkPrune has not yet been implemented")
		}),
		NodeNodeDeleteHandler: node.NodeDeleteHandlerFunc(func(params node.NodeDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation node.NodeDelete has not yet been implemented")
		}),
		NodeNodeInspectHandler: node.NodeInspectHandlerFunc(func(params node.NodeInspectParams) middleware.Responder {
			return middleware.NotImplemented("operation node.NodeInspect has not yet been implemented")
		}),
		NodeNodeListHandler: node.NodeListHandlerFunc(func(params node.NodeListParams) middleware.Responder {
			return middleware.NotImplemented("operation node.NodeList has not yet been implemented")
		}),
		NodeNodeUpdateHandler: node.NodeUpdateHandlerFunc(func(params node.NodeUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation node.NodeUpdate has not yet been implemented")
		}),
		PluginPluginCreateHandler: plugin.PluginCreateHandlerFunc(func(params plugin.PluginCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation plugin.PluginCreate has not yet been implemented")
		}),
		PluginPluginDeleteHandler: plugin.PluginDeleteHandlerFunc(func(params plugin.PluginDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation plugin.PluginDelete has not yet been implemented")
		}),
		PluginPluginDisableHandler: plugin.PluginDisableHandlerFunc(func(params plugin.PluginDisableParams) middleware.Responder {
			return middleware.NotImplemented("operation plugin.PluginDisable has not yet been implemented")
		}),
		PluginPluginEnableHandler: plugin.PluginEnableHandlerFunc(func(params plugin.PluginEnableParams) middleware.Responder {
			return middleware.NotImplemented("operation plugin.PluginEnable has not yet been implemented")
		}),
		PluginPluginInspectHandler: plugin.PluginInspectHandlerFunc(func(params plugin.PluginInspectParams) middleware.Responder {
			return middleware.NotImplemented("operation plugin.PluginInspect has not yet been implemented")
		}),
		PluginPluginListHandler: plugin.PluginListHandlerFunc(func(params plugin.PluginListParams) middleware.Responder {
			return middleware.NotImplemented("operation plugin.PluginList has not yet been implemented")
		}),
		PluginPluginPullHandler: plugin.PluginPullHandlerFunc(func(params plugin.PluginPullParams) middleware.Responder {
			return middleware.NotImplemented("operation plugin.PluginPull has not yet been implemented")
		}),
		PluginPluginPushHandler: plugin.PluginPushHandlerFunc(func(params plugin.PluginPushParams) middleware.Responder {
			return middleware.NotImplemented("operation plugin.PluginPush has not yet been implemented")
		}),
		PluginPluginSetHandler: plugin.PluginSetHandlerFunc(func(params plugin.PluginSetParams) middleware.Responder {
			return middleware.NotImplemented("operation plugin.PluginSet has not yet been implemented")
		}),
		PluginPluginUpgradeHandler: plugin.PluginUpgradeHandlerFunc(func(params plugin.PluginUpgradeParams) middleware.Responder {
			return middleware.NotImplemented("operation plugin.PluginUpgrade has not yet been implemented")
		}),
		ContainerPutContainerArchiveHandler: container.PutContainerArchiveHandlerFunc(func(params container.PutContainerArchiveParams) middleware.Responder {
			return middleware.NotImplemented("operation container.PutContainerArchive has not yet been implemented")
		}),
		SecretSecretCreateHandler: secret.SecretCreateHandlerFunc(func(params secret.SecretCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation secret.SecretCreate has not yet been implemented")
		}),
		SecretSecretDeleteHandler: secret.SecretDeleteHandlerFunc(func(params secret.SecretDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation secret.SecretDelete has not yet been implemented")
		}),
		SecretSecretInspectHandler: secret.SecretInspectHandlerFunc(func(params secret.SecretInspectParams) middleware.Responder {
			return middleware.NotImplemented("operation secret.SecretInspect has not yet been implemented")
		}),
		SecretSecretListHandler: secret.SecretListHandlerFunc(func(params secret.SecretListParams) middleware.Responder {
			return middleware.NotImplemented("operation secret.SecretList has not yet been implemented")
		}),
		SecretSecretUpdateHandler: secret.SecretUpdateHandlerFunc(func(params secret.SecretUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation secret.SecretUpdate has not yet been implemented")
		}),
		ServiceServiceCreateHandler: service.ServiceCreateHandlerFunc(func(params service.ServiceCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation service.ServiceCreate has not yet been implemented")
		}),
		ServiceServiceDeleteHandler: service.ServiceDeleteHandlerFunc(func(params service.ServiceDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation service.ServiceDelete has not yet been implemented")
		}),
		ServiceServiceInspectHandler: service.ServiceInspectHandlerFunc(func(params service.ServiceInspectParams) middleware.Responder {
			return middleware.NotImplemented("operation service.ServiceInspect has not yet been implemented")
		}),
		ServiceServiceListHandler: service.ServiceListHandlerFunc(func(params service.ServiceListParams) middleware.Responder {
			return middleware.NotImplemented("operation service.ServiceList has not yet been implemented")
		}),
		ServiceServiceLogsHandler: service.ServiceLogsHandlerFunc(func(params service.ServiceLogsParams) middleware.Responder {
			return middleware.NotImplemented("operation service.ServiceLogs has not yet been implemented")
		}),
		ServiceServiceUpdateHandler: service.ServiceUpdateHandlerFunc(func(params service.ServiceUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation service.ServiceUpdate has not yet been implemented")
		}),
		SessionSessionHandler: session.SessionHandlerFunc(func(params session.SessionParams) middleware.Responder {
			return middleware.NotImplemented("operation session.Session has not yet been implemented")
		}),
		SwarmSwarmInitHandler: swarm.SwarmInitHandlerFunc(func(params swarm.SwarmInitParams) middleware.Responder {
			return middleware.NotImplemented("operation swarm.SwarmInit has not yet been implemented")
		}),
		SwarmSwarmInspectHandler: swarm.SwarmInspectHandlerFunc(func(params swarm.SwarmInspectParams) middleware.Responder {
			return middleware.NotImplemented("operation swarm.SwarmInspect has not yet been implemented")
		}),
		SwarmSwarmJoinHandler: swarm.SwarmJoinHandlerFunc(func(params swarm.SwarmJoinParams) middleware.Responder {
			return middleware.NotImplemented("operation swarm.SwarmJoin has not yet been implemented")
		}),
		SwarmSwarmLeaveHandler: swarm.SwarmLeaveHandlerFunc(func(params swarm.SwarmLeaveParams) middleware.Responder {
			return middleware.NotImplemented("operation swarm.SwarmLeave has not yet been implemented")
		}),
		SwarmSwarmUnlockHandler: swarm.SwarmUnlockHandlerFunc(func(params swarm.SwarmUnlockParams) middleware.Responder {
			return middleware.NotImplemented("operation swarm.SwarmUnlock has not yet been implemented")
		}),
		SwarmSwarmUnlockkeyHandler: swarm.SwarmUnlockkeyHandlerFunc(func(params swarm.SwarmUnlockkeyParams) middleware.Responder {
			return middleware.NotImplemented("operation swarm.SwarmUnlockkey has not yet been implemented")
		}),
		SwarmSwarmUpdateHandler: swarm.SwarmUpdateHandlerFunc(func(params swarm.SwarmUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation swarm.SwarmUpdate has not yet been implemented")
		}),
		SystemSystemAuthHandler: system.SystemAuthHandlerFunc(func(params system.SystemAuthParams) middleware.Responder {
			return middleware.NotImplemented("operation system.SystemAuth has not yet been implemented")
		}),
		SystemSystemDataUsageHandler: system.SystemDataUsageHandlerFunc(func(params system.SystemDataUsageParams) middleware.Responder {
			return middleware.NotImplemented("operation system.SystemDataUsage has not yet been implemented")
		}),
		SystemSystemEventsHandler: system.SystemEventsHandlerFunc(func(params system.SystemEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation system.SystemEvents has not yet been implemented")
		}),
		SystemSystemInfoHandler: system.SystemInfoHandlerFunc(func(params system.SystemInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation system.SystemInfo has not yet been implemented")
		}),
		SystemSystemPingHandler: system.SystemPingHandlerFunc(func(params system.SystemPingParams) middleware.Responder {
			return middleware.NotImplemented("operation system.SystemPing has not yet been implemented")
		}),
		SystemSystemPingHeadHandler: system.SystemPingHeadHandlerFunc(func(params system.SystemPingHeadParams) middleware.Responder {
			return middleware.NotImplemented("operation system.SystemPingHead has not yet been implemented")
		}),
		SystemSystemVersionHandler: system.SystemVersionHandlerFunc(func(params system.SystemVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation system.SystemVersion has not yet been implemented")
		}),
		TaskTaskInspectHandler: task.TaskInspectHandlerFunc(func(params task.TaskInspectParams) middleware.Responder {
			return middleware.NotImplemented("operation task.TaskInspect has not yet been implemented")
		}),
		TaskTaskListHandler: task.TaskListHandlerFunc(func(params task.TaskListParams) middleware.Responder {
			return middleware.NotImplemented("operation task.TaskList has not yet been implemented")
		}),
		TaskTaskLogsHandler: task.TaskLogsHandlerFunc(func(params task.TaskLogsParams) middleware.Responder {
			return middleware.NotImplemented("operation task.TaskLogs has not yet been implemented")
		}),
		VolumeVolumeCreateHandler: volume.VolumeCreateHandlerFunc(func(params volume.VolumeCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation volume.VolumeCreate has not yet been implemented")
		}),
		VolumeVolumeDeleteHandler: volume.VolumeDeleteHandlerFunc(func(params volume.VolumeDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation volume.VolumeDelete has not yet been implemented")
		}),
		VolumeVolumeInspectHandler: volume.VolumeInspectHandlerFunc(func(params volume.VolumeInspectParams) middleware.Responder {
			return middleware.NotImplemented("operation volume.VolumeInspect has not yet been implemented")
		}),
		VolumeVolumeListHandler: volume.VolumeListHandlerFunc(func(params volume.VolumeListParams) middleware.Responder {
			return middleware.NotImplemented("operation volume.VolumeList has not yet been implemented")
		}),
		VolumeVolumePruneHandler: volume.VolumePruneHandlerFunc(func(params volume.VolumePruneParams) middleware.Responder {
			return middleware.NotImplemented("operation volume.VolumePrune has not yet been implemented")
		}),
	}
}

/*DockerEngineAPIAPI The Engine API is an HTTP API served by Docker Engine. It is the API the
Docker client uses to communicate with the Engine, so everything the Docker
client can do can be done with the API.

Most of the client's commands map directly to API endpoints (e.g. `docker ps`
is `GET /containers/json`). The notable exception is running containers,
which consists of several API calls.

# Errors

The API uses standard HTTP status codes to indicate the success or failure
of the API call. The body of the response will be JSON in the following
format:

```
{
  "message": "page not found"
}
```

# Versioning

The API is usually changed in each release, so API calls are versioned to
ensure that clients don't break. To lock to a specific version of the API,
you prefix the URL with its version, for example, call `/v1.30/info` to use
the v1.30 version of the `/info` endpoint. If the API version specified in
the URL is not supported by the daemon, a HTTP `400 Bad Request` error message
is returned.

If you omit the version-prefix, the current version of the API (v1.41) is used.
For example, calling `/info` is the same as calling `/v1.41/info`. Using the
API without a version-prefix is deprecated and will be removed in a future release.

Engine releases in the near future should support this version of the API,
so your client will continue to work even if it is talking to a newer Engine.

The API uses an open schema model, which means server may add extra properties
to responses. Likewise, the server will ignore any extra query parameters and
request body properties. When you write clients, you need to ignore additional
properties in responses to ensure they do not break when talking to newer
daemons.


# Authentication

Authentication for registries is handled client side. The client has to send
authentication details to various endpoints that need to communicate with
registries, such as `POST /images/(name)/push`. These are sent as
`X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5)
(JSON) string with the following structure:

```
{
  "username": "string",
  "password": "string",
  "email": "string",
  "serveraddress": "string"
}
```

The `serveraddress` is a domain/IP without a protocol. Throughout this
structure, double quotes are required.

If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth),
you can just pass this instead of credentials:

```
{
  "identitytoken": "9cbaf023786cd7..."
}
```
*/
type DockerEngineAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// BinConsumer registers a consumer for the following mime types:
	//   - application/octet-stream
	BinConsumer runtime.Consumer
	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// TarConsumer registers a consumer for the following mime types:
	//   - application/x-tar
	TarConsumer runtime.Consumer
	// TxtConsumer registers a consumer for the following mime types:
	//   - text/plain
	TxtConsumer runtime.Consumer

	// BinProducer registers a producer for the following mime types:
	//   - application/octet-stream
	//   - application/vnd.docker.raw-stream
	BinProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer
	// TarProducer registers a producer for the following mime types:
	//   - application/x-tar
	TarProducer runtime.Producer
	// TxtProducer registers a producer for the following mime types:
	//   - text/plain
	TxtProducer runtime.Producer

	// ImageBuildPruneHandler sets the operation handler for the build prune operation
	ImageBuildPruneHandler image.BuildPruneHandler
	// ConfigConfigCreateHandler sets the operation handler for the config create operation
	ConfigConfigCreateHandler config.ConfigCreateHandler
	// ConfigConfigDeleteHandler sets the operation handler for the config delete operation
	ConfigConfigDeleteHandler config.ConfigDeleteHandler
	// ConfigConfigInspectHandler sets the operation handler for the config inspect operation
	ConfigConfigInspectHandler config.ConfigInspectHandler
	// ConfigConfigListHandler sets the operation handler for the config list operation
	ConfigConfigListHandler config.ConfigListHandler
	// ConfigConfigUpdateHandler sets the operation handler for the config update operation
	ConfigConfigUpdateHandler config.ConfigUpdateHandler
	// ContainerContainerArchiveHandler sets the operation handler for the container archive operation
	ContainerContainerArchiveHandler container.ContainerArchiveHandler
	// ContainerContainerArchiveInfoHandler sets the operation handler for the container archive info operation
	ContainerContainerArchiveInfoHandler container.ContainerArchiveInfoHandler
	// ContainerContainerAttachHandler sets the operation handler for the container attach operation
	ContainerContainerAttachHandler container.ContainerAttachHandler
	// ContainerContainerAttachWebsocketHandler sets the operation handler for the container attach websocket operation
	ContainerContainerAttachWebsocketHandler container.ContainerAttachWebsocketHandler
	// ContainerContainerChangesHandler sets the operation handler for the container changes operation
	ContainerContainerChangesHandler container.ContainerChangesHandler
	// ContainerContainerCreateHandler sets the operation handler for the container create operation
	ContainerContainerCreateHandler container.ContainerCreateHandler
	// ContainerContainerDeleteHandler sets the operation handler for the container delete operation
	ContainerContainerDeleteHandler container.ContainerDeleteHandler
	// ExecContainerExecHandler sets the operation handler for the container exec operation
	ExecContainerExecHandler exec.ContainerExecHandler
	// ContainerContainerExportHandler sets the operation handler for the container export operation
	ContainerContainerExportHandler container.ContainerExportHandler
	// ContainerContainerInspectHandler sets the operation handler for the container inspect operation
	ContainerContainerInspectHandler container.ContainerInspectHandler
	// ContainerContainerKillHandler sets the operation handler for the container kill operation
	ContainerContainerKillHandler container.ContainerKillHandler
	// ContainerContainerListHandler sets the operation handler for the container list operation
	ContainerContainerListHandler container.ContainerListHandler
	// ContainerContainerLogsHandler sets the operation handler for the container logs operation
	ContainerContainerLogsHandler container.ContainerLogsHandler
	// ContainerContainerPauseHandler sets the operation handler for the container pause operation
	ContainerContainerPauseHandler container.ContainerPauseHandler
	// ContainerContainerPruneHandler sets the operation handler for the container prune operation
	ContainerContainerPruneHandler container.ContainerPruneHandler
	// ContainerContainerRenameHandler sets the operation handler for the container rename operation
	ContainerContainerRenameHandler container.ContainerRenameHandler
	// ContainerContainerResizeHandler sets the operation handler for the container resize operation
	ContainerContainerResizeHandler container.ContainerResizeHandler
	// ContainerContainerRestartHandler sets the operation handler for the container restart operation
	ContainerContainerRestartHandler container.ContainerRestartHandler
	// ContainerContainerStartHandler sets the operation handler for the container start operation
	ContainerContainerStartHandler container.ContainerStartHandler
	// ContainerContainerStatsHandler sets the operation handler for the container stats operation
	ContainerContainerStatsHandler container.ContainerStatsHandler
	// ContainerContainerStopHandler sets the operation handler for the container stop operation
	ContainerContainerStopHandler container.ContainerStopHandler
	// ContainerContainerTopHandler sets the operation handler for the container top operation
	ContainerContainerTopHandler container.ContainerTopHandler
	// ContainerContainerUnpauseHandler sets the operation handler for the container unpause operation
	ContainerContainerUnpauseHandler container.ContainerUnpauseHandler
	// ContainerContainerUpdateHandler sets the operation handler for the container update operation
	ContainerContainerUpdateHandler container.ContainerUpdateHandler
	// ContainerContainerWaitHandler sets the operation handler for the container wait operation
	ContainerContainerWaitHandler container.ContainerWaitHandler
	// DistributionDistributionInspectHandler sets the operation handler for the distribution inspect operation
	DistributionDistributionInspectHandler distribution.DistributionInspectHandler
	// ExecExecInspectHandler sets the operation handler for the exec inspect operation
	ExecExecInspectHandler exec.ExecInspectHandler
	// ExecExecResizeHandler sets the operation handler for the exec resize operation
	ExecExecResizeHandler exec.ExecResizeHandler
	// ExecExecStartHandler sets the operation handler for the exec start operation
	ExecExecStartHandler exec.ExecStartHandler
	// PluginGetPluginPrivilegesHandler sets the operation handler for the get plugin privileges operation
	PluginGetPluginPrivilegesHandler plugin.GetPluginPrivilegesHandler
	// ImageImageBuildHandler sets the operation handler for the image build operation
	ImageImageBuildHandler image.ImageBuildHandler
	// ImageImageCommitHandler sets the operation handler for the image commit operation
	ImageImageCommitHandler image.ImageCommitHandler
	// ImageImageCreateHandler sets the operation handler for the image create operation
	ImageImageCreateHandler image.ImageCreateHandler
	// ImageImageDeleteHandler sets the operation handler for the image delete operation
	ImageImageDeleteHandler image.ImageDeleteHandler
	// ImageImageGetHandler sets the operation handler for the image get operation
	ImageImageGetHandler image.ImageGetHandler
	// ImageImageGetAllHandler sets the operation handler for the image get all operation
	ImageImageGetAllHandler image.ImageGetAllHandler
	// ImageImageHistoryHandler sets the operation handler for the image history operation
	ImageImageHistoryHandler image.ImageHistoryHandler
	// ImageImageInspectHandler sets the operation handler for the image inspect operation
	ImageImageInspectHandler image.ImageInspectHandler
	// ImageImageListHandler sets the operation handler for the image list operation
	ImageImageListHandler image.ImageListHandler
	// ImageImageLoadHandler sets the operation handler for the image load operation
	ImageImageLoadHandler image.ImageLoadHandler
	// ImageImagePruneHandler sets the operation handler for the image prune operation
	ImageImagePruneHandler image.ImagePruneHandler
	// ImageImagePushHandler sets the operation handler for the image push operation
	ImageImagePushHandler image.ImagePushHandler
	// ImageImageSearchHandler sets the operation handler for the image search operation
	ImageImageSearchHandler image.ImageSearchHandler
	// ImageImageTagHandler sets the operation handler for the image tag operation
	ImageImageTagHandler image.ImageTagHandler
	// NetworkNetworkConnectHandler sets the operation handler for the network connect operation
	NetworkNetworkConnectHandler network.NetworkConnectHandler
	// NetworkNetworkCreateHandler sets the operation handler for the network create operation
	NetworkNetworkCreateHandler network.NetworkCreateHandler
	// NetworkNetworkDeleteHandler sets the operation handler for the network delete operation
	NetworkNetworkDeleteHandler network.NetworkDeleteHandler
	// NetworkNetworkDisconnectHandler sets the operation handler for the network disconnect operation
	NetworkNetworkDisconnectHandler network.NetworkDisconnectHandler
	// NetworkNetworkInspectHandler sets the operation handler for the network inspect operation
	NetworkNetworkInspectHandler network.NetworkInspectHandler
	// NetworkNetworkListHandler sets the operation handler for the network list operation
	NetworkNetworkListHandler network.NetworkListHandler
	// NetworkNetworkPruneHandler sets the operation handler for the network prune operation
	NetworkNetworkPruneHandler network.NetworkPruneHandler
	// NodeNodeDeleteHandler sets the operation handler for the node delete operation
	NodeNodeDeleteHandler node.NodeDeleteHandler
	// NodeNodeInspectHandler sets the operation handler for the node inspect operation
	NodeNodeInspectHandler node.NodeInspectHandler
	// NodeNodeListHandler sets the operation handler for the node list operation
	NodeNodeListHandler node.NodeListHandler
	// NodeNodeUpdateHandler sets the operation handler for the node update operation
	NodeNodeUpdateHandler node.NodeUpdateHandler
	// PluginPluginCreateHandler sets the operation handler for the plugin create operation
	PluginPluginCreateHandler plugin.PluginCreateHandler
	// PluginPluginDeleteHandler sets the operation handler for the plugin delete operation
	PluginPluginDeleteHandler plugin.PluginDeleteHandler
	// PluginPluginDisableHandler sets the operation handler for the plugin disable operation
	PluginPluginDisableHandler plugin.PluginDisableHandler
	// PluginPluginEnableHandler sets the operation handler for the plugin enable operation
	PluginPluginEnableHandler plugin.PluginEnableHandler
	// PluginPluginInspectHandler sets the operation handler for the plugin inspect operation
	PluginPluginInspectHandler plugin.PluginInspectHandler
	// PluginPluginListHandler sets the operation handler for the plugin list operation
	PluginPluginListHandler plugin.PluginListHandler
	// PluginPluginPullHandler sets the operation handler for the plugin pull operation
	PluginPluginPullHandler plugin.PluginPullHandler
	// PluginPluginPushHandler sets the operation handler for the plugin push operation
	PluginPluginPushHandler plugin.PluginPushHandler
	// PluginPluginSetHandler sets the operation handler for the plugin set operation
	PluginPluginSetHandler plugin.PluginSetHandler
	// PluginPluginUpgradeHandler sets the operation handler for the plugin upgrade operation
	PluginPluginUpgradeHandler plugin.PluginUpgradeHandler
	// ContainerPutContainerArchiveHandler sets the operation handler for the put container archive operation
	ContainerPutContainerArchiveHandler container.PutContainerArchiveHandler
	// SecretSecretCreateHandler sets the operation handler for the secret create operation
	SecretSecretCreateHandler secret.SecretCreateHandler
	// SecretSecretDeleteHandler sets the operation handler for the secret delete operation
	SecretSecretDeleteHandler secret.SecretDeleteHandler
	// SecretSecretInspectHandler sets the operation handler for the secret inspect operation
	SecretSecretInspectHandler secret.SecretInspectHandler
	// SecretSecretListHandler sets the operation handler for the secret list operation
	SecretSecretListHandler secret.SecretListHandler
	// SecretSecretUpdateHandler sets the operation handler for the secret update operation
	SecretSecretUpdateHandler secret.SecretUpdateHandler
	// ServiceServiceCreateHandler sets the operation handler for the service create operation
	ServiceServiceCreateHandler service.ServiceCreateHandler
	// ServiceServiceDeleteHandler sets the operation handler for the service delete operation
	ServiceServiceDeleteHandler service.ServiceDeleteHandler
	// ServiceServiceInspectHandler sets the operation handler for the service inspect operation
	ServiceServiceInspectHandler service.ServiceInspectHandler
	// ServiceServiceListHandler sets the operation handler for the service list operation
	ServiceServiceListHandler service.ServiceListHandler
	// ServiceServiceLogsHandler sets the operation handler for the service logs operation
	ServiceServiceLogsHandler service.ServiceLogsHandler
	// ServiceServiceUpdateHandler sets the operation handler for the service update operation
	ServiceServiceUpdateHandler service.ServiceUpdateHandler
	// SessionSessionHandler sets the operation handler for the session operation
	SessionSessionHandler session.SessionHandler
	// SwarmSwarmInitHandler sets the operation handler for the swarm init operation
	SwarmSwarmInitHandler swarm.SwarmInitHandler
	// SwarmSwarmInspectHandler sets the operation handler for the swarm inspect operation
	SwarmSwarmInspectHandler swarm.SwarmInspectHandler
	// SwarmSwarmJoinHandler sets the operation handler for the swarm join operation
	SwarmSwarmJoinHandler swarm.SwarmJoinHandler
	// SwarmSwarmLeaveHandler sets the operation handler for the swarm leave operation
	SwarmSwarmLeaveHandler swarm.SwarmLeaveHandler
	// SwarmSwarmUnlockHandler sets the operation handler for the swarm unlock operation
	SwarmSwarmUnlockHandler swarm.SwarmUnlockHandler
	// SwarmSwarmUnlockkeyHandler sets the operation handler for the swarm unlockkey operation
	SwarmSwarmUnlockkeyHandler swarm.SwarmUnlockkeyHandler
	// SwarmSwarmUpdateHandler sets the operation handler for the swarm update operation
	SwarmSwarmUpdateHandler swarm.SwarmUpdateHandler
	// SystemSystemAuthHandler sets the operation handler for the system auth operation
	SystemSystemAuthHandler system.SystemAuthHandler
	// SystemSystemDataUsageHandler sets the operation handler for the system data usage operation
	SystemSystemDataUsageHandler system.SystemDataUsageHandler
	// SystemSystemEventsHandler sets the operation handler for the system events operation
	SystemSystemEventsHandler system.SystemEventsHandler
	// SystemSystemInfoHandler sets the operation handler for the system info operation
	SystemSystemInfoHandler system.SystemInfoHandler
	// SystemSystemPingHandler sets the operation handler for the system ping operation
	SystemSystemPingHandler system.SystemPingHandler
	// SystemSystemPingHeadHandler sets the operation handler for the system ping head operation
	SystemSystemPingHeadHandler system.SystemPingHeadHandler
	// SystemSystemVersionHandler sets the operation handler for the system version operation
	SystemSystemVersionHandler system.SystemVersionHandler
	// TaskTaskInspectHandler sets the operation handler for the task inspect operation
	TaskTaskInspectHandler task.TaskInspectHandler
	// TaskTaskListHandler sets the operation handler for the task list operation
	TaskTaskListHandler task.TaskListHandler
	// TaskTaskLogsHandler sets the operation handler for the task logs operation
	TaskTaskLogsHandler task.TaskLogsHandler
	// VolumeVolumeCreateHandler sets the operation handler for the volume create operation
	VolumeVolumeCreateHandler volume.VolumeCreateHandler
	// VolumeVolumeDeleteHandler sets the operation handler for the volume delete operation
	VolumeVolumeDeleteHandler volume.VolumeDeleteHandler
	// VolumeVolumeInspectHandler sets the operation handler for the volume inspect operation
	VolumeVolumeInspectHandler volume.VolumeInspectHandler
	// VolumeVolumeListHandler sets the operation handler for the volume list operation
	VolumeVolumeListHandler volume.VolumeListHandler
	// VolumeVolumePruneHandler sets the operation handler for the volume prune operation
	VolumeVolumePruneHandler volume.VolumePruneHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *DockerEngineAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *DockerEngineAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *DockerEngineAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *DockerEngineAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *DockerEngineAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *DockerEngineAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *DockerEngineAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *DockerEngineAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *DockerEngineAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the DockerEngineAPIAPI
func (o *DockerEngineAPIAPI) Validate() error {
	var unregistered []string

	if o.BinConsumer == nil {
		unregistered = append(unregistered, "BinConsumer")
	}
	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.TarConsumer == nil {
		unregistered = append(unregistered, "TarConsumer")
	}
	if o.TxtConsumer == nil {
		unregistered = append(unregistered, "TxtConsumer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}
	if o.TarProducer == nil {
		unregistered = append(unregistered, "TarProducer")
	}
	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.ImageBuildPruneHandler == nil {
		unregistered = append(unregistered, "image.BuildPruneHandler")
	}
	if o.ConfigConfigCreateHandler == nil {
		unregistered = append(unregistered, "config.ConfigCreateHandler")
	}
	if o.ConfigConfigDeleteHandler == nil {
		unregistered = append(unregistered, "config.ConfigDeleteHandler")
	}
	if o.ConfigConfigInspectHandler == nil {
		unregistered = append(unregistered, "config.ConfigInspectHandler")
	}
	if o.ConfigConfigListHandler == nil {
		unregistered = append(unregistered, "config.ConfigListHandler")
	}
	if o.ConfigConfigUpdateHandler == nil {
		unregistered = append(unregistered, "config.ConfigUpdateHandler")
	}
	if o.ContainerContainerArchiveHandler == nil {
		unregistered = append(unregistered, "container.ContainerArchiveHandler")
	}
	if o.ContainerContainerArchiveInfoHandler == nil {
		unregistered = append(unregistered, "container.ContainerArchiveInfoHandler")
	}
	if o.ContainerContainerAttachHandler == nil {
		unregistered = append(unregistered, "container.ContainerAttachHandler")
	}
	if o.ContainerContainerAttachWebsocketHandler == nil {
		unregistered = append(unregistered, "container.ContainerAttachWebsocketHandler")
	}
	if o.ContainerContainerChangesHandler == nil {
		unregistered = append(unregistered, "container.ContainerChangesHandler")
	}
	if o.ContainerContainerCreateHandler == nil {
		unregistered = append(unregistered, "container.ContainerCreateHandler")
	}
	if o.ContainerContainerDeleteHandler == nil {
		unregistered = append(unregistered, "container.ContainerDeleteHandler")
	}
	if o.ExecContainerExecHandler == nil {
		unregistered = append(unregistered, "exec.ContainerExecHandler")
	}
	if o.ContainerContainerExportHandler == nil {
		unregistered = append(unregistered, "container.ContainerExportHandler")
	}
	if o.ContainerContainerInspectHandler == nil {
		unregistered = append(unregistered, "container.ContainerInspectHandler")
	}
	if o.ContainerContainerKillHandler == nil {
		unregistered = append(unregistered, "container.ContainerKillHandler")
	}
	if o.ContainerContainerListHandler == nil {
		unregistered = append(unregistered, "container.ContainerListHandler")
	}
	if o.ContainerContainerLogsHandler == nil {
		unregistered = append(unregistered, "container.ContainerLogsHandler")
	}
	if o.ContainerContainerPauseHandler == nil {
		unregistered = append(unregistered, "container.ContainerPauseHandler")
	}
	if o.ContainerContainerPruneHandler == nil {
		unregistered = append(unregistered, "container.ContainerPruneHandler")
	}
	if o.ContainerContainerRenameHandler == nil {
		unregistered = append(unregistered, "container.ContainerRenameHandler")
	}
	if o.ContainerContainerResizeHandler == nil {
		unregistered = append(unregistered, "container.ContainerResizeHandler")
	}
	if o.ContainerContainerRestartHandler == nil {
		unregistered = append(unregistered, "container.ContainerRestartHandler")
	}
	if o.ContainerContainerStartHandler == nil {
		unregistered = append(unregistered, "container.ContainerStartHandler")
	}
	if o.ContainerContainerStatsHandler == nil {
		unregistered = append(unregistered, "container.ContainerStatsHandler")
	}
	if o.ContainerContainerStopHandler == nil {
		unregistered = append(unregistered, "container.ContainerStopHandler")
	}
	if o.ContainerContainerTopHandler == nil {
		unregistered = append(unregistered, "container.ContainerTopHandler")
	}
	if o.ContainerContainerUnpauseHandler == nil {
		unregistered = append(unregistered, "container.ContainerUnpauseHandler")
	}
	if o.ContainerContainerUpdateHandler == nil {
		unregistered = append(unregistered, "container.ContainerUpdateHandler")
	}
	if o.ContainerContainerWaitHandler == nil {
		unregistered = append(unregistered, "container.ContainerWaitHandler")
	}
	if o.DistributionDistributionInspectHandler == nil {
		unregistered = append(unregistered, "distribution.DistributionInspectHandler")
	}
	if o.ExecExecInspectHandler == nil {
		unregistered = append(unregistered, "exec.ExecInspectHandler")
	}
	if o.ExecExecResizeHandler == nil {
		unregistered = append(unregistered, "exec.ExecResizeHandler")
	}
	if o.ExecExecStartHandler == nil {
		unregistered = append(unregistered, "exec.ExecStartHandler")
	}
	if o.PluginGetPluginPrivilegesHandler == nil {
		unregistered = append(unregistered, "plugin.GetPluginPrivilegesHandler")
	}
	if o.ImageImageBuildHandler == nil {
		unregistered = append(unregistered, "image.ImageBuildHandler")
	}
	if o.ImageImageCommitHandler == nil {
		unregistered = append(unregistered, "image.ImageCommitHandler")
	}
	if o.ImageImageCreateHandler == nil {
		unregistered = append(unregistered, "image.ImageCreateHandler")
	}
	if o.ImageImageDeleteHandler == nil {
		unregistered = append(unregistered, "image.ImageDeleteHandler")
	}
	if o.ImageImageGetHandler == nil {
		unregistered = append(unregistered, "image.ImageGetHandler")
	}
	if o.ImageImageGetAllHandler == nil {
		unregistered = append(unregistered, "image.ImageGetAllHandler")
	}
	if o.ImageImageHistoryHandler == nil {
		unregistered = append(unregistered, "image.ImageHistoryHandler")
	}
	if o.ImageImageInspectHandler == nil {
		unregistered = append(unregistered, "image.ImageInspectHandler")
	}
	if o.ImageImageListHandler == nil {
		unregistered = append(unregistered, "image.ImageListHandler")
	}
	if o.ImageImageLoadHandler == nil {
		unregistered = append(unregistered, "image.ImageLoadHandler")
	}
	if o.ImageImagePruneHandler == nil {
		unregistered = append(unregistered, "image.ImagePruneHandler")
	}
	if o.ImageImagePushHandler == nil {
		unregistered = append(unregistered, "image.ImagePushHandler")
	}
	if o.ImageImageSearchHandler == nil {
		unregistered = append(unregistered, "image.ImageSearchHandler")
	}
	if o.ImageImageTagHandler == nil {
		unregistered = append(unregistered, "image.ImageTagHandler")
	}
	if o.NetworkNetworkConnectHandler == nil {
		unregistered = append(unregistered, "network.NetworkConnectHandler")
	}
	if o.NetworkNetworkCreateHandler == nil {
		unregistered = append(unregistered, "network.NetworkCreateHandler")
	}
	if o.NetworkNetworkDeleteHandler == nil {
		unregistered = append(unregistered, "network.NetworkDeleteHandler")
	}
	if o.NetworkNetworkDisconnectHandler == nil {
		unregistered = append(unregistered, "network.NetworkDisconnectHandler")
	}
	if o.NetworkNetworkInspectHandler == nil {
		unregistered = append(unregistered, "network.NetworkInspectHandler")
	}
	if o.NetworkNetworkListHandler == nil {
		unregistered = append(unregistered, "network.NetworkListHandler")
	}
	if o.NetworkNetworkPruneHandler == nil {
		unregistered = append(unregistered, "network.NetworkPruneHandler")
	}
	if o.NodeNodeDeleteHandler == nil {
		unregistered = append(unregistered, "node.NodeDeleteHandler")
	}
	if o.NodeNodeInspectHandler == nil {
		unregistered = append(unregistered, "node.NodeInspectHandler")
	}
	if o.NodeNodeListHandler == nil {
		unregistered = append(unregistered, "node.NodeListHandler")
	}
	if o.NodeNodeUpdateHandler == nil {
		unregistered = append(unregistered, "node.NodeUpdateHandler")
	}
	if o.PluginPluginCreateHandler == nil {
		unregistered = append(unregistered, "plugin.PluginCreateHandler")
	}
	if o.PluginPluginDeleteHandler == nil {
		unregistered = append(unregistered, "plugin.PluginDeleteHandler")
	}
	if o.PluginPluginDisableHandler == nil {
		unregistered = append(unregistered, "plugin.PluginDisableHandler")
	}
	if o.PluginPluginEnableHandler == nil {
		unregistered = append(unregistered, "plugin.PluginEnableHandler")
	}
	if o.PluginPluginInspectHandler == nil {
		unregistered = append(unregistered, "plugin.PluginInspectHandler")
	}
	if o.PluginPluginListHandler == nil {
		unregistered = append(unregistered, "plugin.PluginListHandler")
	}
	if o.PluginPluginPullHandler == nil {
		unregistered = append(unregistered, "plugin.PluginPullHandler")
	}
	if o.PluginPluginPushHandler == nil {
		unregistered = append(unregistered, "plugin.PluginPushHandler")
	}
	if o.PluginPluginSetHandler == nil {
		unregistered = append(unregistered, "plugin.PluginSetHandler")
	}
	if o.PluginPluginUpgradeHandler == nil {
		unregistered = append(unregistered, "plugin.PluginUpgradeHandler")
	}
	if o.ContainerPutContainerArchiveHandler == nil {
		unregistered = append(unregistered, "container.PutContainerArchiveHandler")
	}
	if o.SecretSecretCreateHandler == nil {
		unregistered = append(unregistered, "secret.SecretCreateHandler")
	}
	if o.SecretSecretDeleteHandler == nil {
		unregistered = append(unregistered, "secret.SecretDeleteHandler")
	}
	if o.SecretSecretInspectHandler == nil {
		unregistered = append(unregistered, "secret.SecretInspectHandler")
	}
	if o.SecretSecretListHandler == nil {
		unregistered = append(unregistered, "secret.SecretListHandler")
	}
	if o.SecretSecretUpdateHandler == nil {
		unregistered = append(unregistered, "secret.SecretUpdateHandler")
	}
	if o.ServiceServiceCreateHandler == nil {
		unregistered = append(unregistered, "service.ServiceCreateHandler")
	}
	if o.ServiceServiceDeleteHandler == nil {
		unregistered = append(unregistered, "service.ServiceDeleteHandler")
	}
	if o.ServiceServiceInspectHandler == nil {
		unregistered = append(unregistered, "service.ServiceInspectHandler")
	}
	if o.ServiceServiceListHandler == nil {
		unregistered = append(unregistered, "service.ServiceListHandler")
	}
	if o.ServiceServiceLogsHandler == nil {
		unregistered = append(unregistered, "service.ServiceLogsHandler")
	}
	if o.ServiceServiceUpdateHandler == nil {
		unregistered = append(unregistered, "service.ServiceUpdateHandler")
	}
	if o.SessionSessionHandler == nil {
		unregistered = append(unregistered, "session.SessionHandler")
	}
	if o.SwarmSwarmInitHandler == nil {
		unregistered = append(unregistered, "swarm.SwarmInitHandler")
	}
	if o.SwarmSwarmInspectHandler == nil {
		unregistered = append(unregistered, "swarm.SwarmInspectHandler")
	}
	if o.SwarmSwarmJoinHandler == nil {
		unregistered = append(unregistered, "swarm.SwarmJoinHandler")
	}
	if o.SwarmSwarmLeaveHandler == nil {
		unregistered = append(unregistered, "swarm.SwarmLeaveHandler")
	}
	if o.SwarmSwarmUnlockHandler == nil {
		unregistered = append(unregistered, "swarm.SwarmUnlockHandler")
	}
	if o.SwarmSwarmUnlockkeyHandler == nil {
		unregistered = append(unregistered, "swarm.SwarmUnlockkeyHandler")
	}
	if o.SwarmSwarmUpdateHandler == nil {
		unregistered = append(unregistered, "swarm.SwarmUpdateHandler")
	}
	if o.SystemSystemAuthHandler == nil {
		unregistered = append(unregistered, "system.SystemAuthHandler")
	}
	if o.SystemSystemDataUsageHandler == nil {
		unregistered = append(unregistered, "system.SystemDataUsageHandler")
	}
	if o.SystemSystemEventsHandler == nil {
		unregistered = append(unregistered, "system.SystemEventsHandler")
	}
	if o.SystemSystemInfoHandler == nil {
		unregistered = append(unregistered, "system.SystemInfoHandler")
	}
	if o.SystemSystemPingHandler == nil {
		unregistered = append(unregistered, "system.SystemPingHandler")
	}
	if o.SystemSystemPingHeadHandler == nil {
		unregistered = append(unregistered, "system.SystemPingHeadHandler")
	}
	if o.SystemSystemVersionHandler == nil {
		unregistered = append(unregistered, "system.SystemVersionHandler")
	}
	if o.TaskTaskInspectHandler == nil {
		unregistered = append(unregistered, "task.TaskInspectHandler")
	}
	if o.TaskTaskListHandler == nil {
		unregistered = append(unregistered, "task.TaskListHandler")
	}
	if o.TaskTaskLogsHandler == nil {
		unregistered = append(unregistered, "task.TaskLogsHandler")
	}
	if o.VolumeVolumeCreateHandler == nil {
		unregistered = append(unregistered, "volume.VolumeCreateHandler")
	}
	if o.VolumeVolumeDeleteHandler == nil {
		unregistered = append(unregistered, "volume.VolumeDeleteHandler")
	}
	if o.VolumeVolumeInspectHandler == nil {
		unregistered = append(unregistered, "volume.VolumeInspectHandler")
	}
	if o.VolumeVolumeListHandler == nil {
		unregistered = append(unregistered, "volume.VolumeListHandler")
	}
	if o.VolumeVolumePruneHandler == nil {
		unregistered = append(unregistered, "volume.VolumePruneHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *DockerEngineAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *DockerEngineAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *DockerEngineAPIAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *DockerEngineAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/octet-stream":
			result["application/octet-stream"] = o.BinConsumer
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "application/x-tar":
			result["application/x-tar"] = o.TarConsumer
		case "text/plain":
			result["text/plain"] = o.TxtConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *DockerEngineAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer
		case "application/vnd.docker.raw-stream":
			result["application/vnd.docker.raw-stream"] = o.BinProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		case "application/x-tar":
			result["application/x-tar"] = o.TarProducer
		case "text/plain":
			result["text/plain"] = o.TxtProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *DockerEngineAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the docker engine API API
func (o *DockerEngineAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *DockerEngineAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/build/prune"] = image.NewBuildPrune(o.context, o.ImageBuildPruneHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/configs/create"] = config.NewConfigCreate(o.context, o.ConfigConfigCreateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/configs/{id}"] = config.NewConfigDelete(o.context, o.ConfigConfigDeleteHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/configs/{id}"] = config.NewConfigInspect(o.context, o.ConfigConfigInspectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/configs"] = config.NewConfigList(o.context, o.ConfigConfigListHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/configs/{id}/update"] = config.NewConfigUpdate(o.context, o.ConfigConfigUpdateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{id}/archive"] = container.NewContainerArchive(o.context, o.ContainerContainerArchiveHandler)
	if o.handlers["HEAD"] == nil {
		o.handlers["HEAD"] = make(map[string]http.Handler)
	}
	o.handlers["HEAD"]["/containers/{id}/archive"] = container.NewContainerArchiveInfo(o.context, o.ContainerContainerArchiveInfoHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/{id}/attach"] = container.NewContainerAttach(o.context, o.ContainerContainerAttachHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{id}/attach/ws"] = container.NewContainerAttachWebsocket(o.context, o.ContainerContainerAttachWebsocketHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{id}/changes"] = container.NewContainerChanges(o.context, o.ContainerContainerChangesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/create"] = container.NewContainerCreate(o.context, o.ContainerContainerCreateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/containers/{id}"] = container.NewContainerDelete(o.context, o.ContainerContainerDeleteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/{id}/exec"] = exec.NewContainerExec(o.context, o.ExecContainerExecHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{id}/export"] = container.NewContainerExport(o.context, o.ContainerContainerExportHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{id}/json"] = container.NewContainerInspect(o.context, o.ContainerContainerInspectHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/{id}/kill"] = container.NewContainerKill(o.context, o.ContainerContainerKillHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/json"] = container.NewContainerList(o.context, o.ContainerContainerListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{id}/logs"] = container.NewContainerLogs(o.context, o.ContainerContainerLogsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/{id}/pause"] = container.NewContainerPause(o.context, o.ContainerContainerPauseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/prune"] = container.NewContainerPrune(o.context, o.ContainerContainerPruneHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/{id}/rename"] = container.NewContainerRename(o.context, o.ContainerContainerRenameHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/{id}/resize"] = container.NewContainerResize(o.context, o.ContainerContainerResizeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/{id}/restart"] = container.NewContainerRestart(o.context, o.ContainerContainerRestartHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/{id}/start"] = container.NewContainerStart(o.context, o.ContainerContainerStartHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{id}/stats"] = container.NewContainerStats(o.context, o.ContainerContainerStatsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/{id}/stop"] = container.NewContainerStop(o.context, o.ContainerContainerStopHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/containers/{id}/top"] = container.NewContainerTop(o.context, o.ContainerContainerTopHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/{id}/unpause"] = container.NewContainerUnpause(o.context, o.ContainerContainerUnpauseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/{id}/update"] = container.NewContainerUpdate(o.context, o.ContainerContainerUpdateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/containers/{id}/wait"] = container.NewContainerWait(o.context, o.ContainerContainerWaitHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/distribution/{name}/json"] = distribution.NewDistributionInspect(o.context, o.DistributionDistributionInspectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/exec/{id}/json"] = exec.NewExecInspect(o.context, o.ExecExecInspectHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/exec/{id}/resize"] = exec.NewExecResize(o.context, o.ExecExecResizeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/exec/{id}/start"] = exec.NewExecStart(o.context, o.ExecExecStartHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/plugins/privileges"] = plugin.NewGetPluginPrivileges(o.context, o.PluginGetPluginPrivilegesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/build"] = image.NewImageBuild(o.context, o.ImageImageBuildHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/commit"] = image.NewImageCommit(o.context, o.ImageImageCommitHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/images/create"] = image.NewImageCreate(o.context, o.ImageImageCreateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/images/{name}"] = image.NewImageDelete(o.context, o.ImageImageDeleteHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/images/{name}/get"] = image.NewImageGet(o.context, o.ImageImageGetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/images/get"] = image.NewImageGetAll(o.context, o.ImageImageGetAllHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/images/{name}/history"] = image.NewImageHistory(o.context, o.ImageImageHistoryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/images/{name}/json"] = image.NewImageInspect(o.context, o.ImageImageInspectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/images/json"] = image.NewImageList(o.context, o.ImageImageListHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/images/load"] = image.NewImageLoad(o.context, o.ImageImageLoadHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/images/prune"] = image.NewImagePrune(o.context, o.ImageImagePruneHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/images/{name}/push"] = image.NewImagePush(o.context, o.ImageImagePushHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/images/search"] = image.NewImageSearch(o.context, o.ImageImageSearchHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/images/{name}/tag"] = image.NewImageTag(o.context, o.ImageImageTagHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/networks/{id}/connect"] = network.NewNetworkConnect(o.context, o.NetworkNetworkConnectHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/networks/create"] = network.NewNetworkCreate(o.context, o.NetworkNetworkCreateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/networks/{id}"] = network.NewNetworkDelete(o.context, o.NetworkNetworkDeleteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/networks/{id}/disconnect"] = network.NewNetworkDisconnect(o.context, o.NetworkNetworkDisconnectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networks/{id}"] = network.NewNetworkInspect(o.context, o.NetworkNetworkInspectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/networks"] = network.NewNetworkList(o.context, o.NetworkNetworkListHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/networks/prune"] = network.NewNetworkPrune(o.context, o.NetworkNetworkPruneHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/nodes/{id}"] = node.NewNodeDelete(o.context, o.NodeNodeDeleteHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes/{id}"] = node.NewNodeInspect(o.context, o.NodeNodeInspectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes"] = node.NewNodeList(o.context, o.NodeNodeListHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/nodes/{id}/update"] = node.NewNodeUpdate(o.context, o.NodeNodeUpdateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/plugins/create"] = plugin.NewPluginCreate(o.context, o.PluginPluginCreateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/plugins/{name}"] = plugin.NewPluginDelete(o.context, o.PluginPluginDeleteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/plugins/{name}/disable"] = plugin.NewPluginDisable(o.context, o.PluginPluginDisableHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/plugins/{name}/enable"] = plugin.NewPluginEnable(o.context, o.PluginPluginEnableHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/plugins/{name}/json"] = plugin.NewPluginInspect(o.context, o.PluginPluginInspectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/plugins"] = plugin.NewPluginList(o.context, o.PluginPluginListHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/plugins/pull"] = plugin.NewPluginPull(o.context, o.PluginPluginPullHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/plugins/{name}/push"] = plugin.NewPluginPush(o.context, o.PluginPluginPushHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/plugins/{name}/set"] = plugin.NewPluginSet(o.context, o.PluginPluginSetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/plugins/{name}/upgrade"] = plugin.NewPluginUpgrade(o.context, o.PluginPluginUpgradeHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/containers/{id}/archive"] = container.NewPutContainerArchive(o.context, o.ContainerPutContainerArchiveHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/secrets/create"] = secret.NewSecretCreate(o.context, o.SecretSecretCreateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/secrets/{id}"] = secret.NewSecretDelete(o.context, o.SecretSecretDeleteHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/secrets/{id}"] = secret.NewSecretInspect(o.context, o.SecretSecretInspectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/secrets"] = secret.NewSecretList(o.context, o.SecretSecretListHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/secrets/{id}/update"] = secret.NewSecretUpdate(o.context, o.SecretSecretUpdateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/create"] = service.NewServiceCreate(o.context, o.ServiceServiceCreateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/{id}"] = service.NewServiceDelete(o.context, o.ServiceServiceDeleteHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/{id}"] = service.NewServiceInspect(o.context, o.ServiceServiceInspectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services"] = service.NewServiceList(o.context, o.ServiceServiceListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/{id}/logs"] = service.NewServiceLogs(o.context, o.ServiceServiceLogsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services/{id}/update"] = service.NewServiceUpdate(o.context, o.ServiceServiceUpdateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/session"] = session.NewSession(o.context, o.SessionSessionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/swarm/init"] = swarm.NewSwarmInit(o.context, o.SwarmSwarmInitHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/swarm"] = swarm.NewSwarmInspect(o.context, o.SwarmSwarmInspectHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/swarm/join"] = swarm.NewSwarmJoin(o.context, o.SwarmSwarmJoinHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/swarm/leave"] = swarm.NewSwarmLeave(o.context, o.SwarmSwarmLeaveHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/swarm/unlock"] = swarm.NewSwarmUnlock(o.context, o.SwarmSwarmUnlockHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/swarm/unlockkey"] = swarm.NewSwarmUnlockkey(o.context, o.SwarmSwarmUnlockkeyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/swarm/update"] = swarm.NewSwarmUpdate(o.context, o.SwarmSwarmUpdateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth"] = system.NewSystemAuth(o.context, o.SystemSystemAuthHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/system/df"] = system.NewSystemDataUsage(o.context, o.SystemSystemDataUsageHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/events"] = system.NewSystemEvents(o.context, o.SystemSystemEventsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/info"] = system.NewSystemInfo(o.context, o.SystemSystemInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/_ping"] = system.NewSystemPing(o.context, o.SystemSystemPingHandler)
	if o.handlers["HEAD"] == nil {
		o.handlers["HEAD"] = make(map[string]http.Handler)
	}
	o.handlers["HEAD"]["/_ping"] = system.NewSystemPingHead(o.context, o.SystemSystemPingHeadHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/version"] = system.NewSystemVersion(o.context, o.SystemSystemVersionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tasks/{id}"] = task.NewTaskInspect(o.context, o.TaskTaskInspectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tasks"] = task.NewTaskList(o.context, o.TaskTaskListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tasks/{id}/logs"] = task.NewTaskLogs(o.context, o.TaskTaskLogsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/volumes/create"] = volume.NewVolumeCreate(o.context, o.VolumeVolumeCreateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/volumes/{name}"] = volume.NewVolumeDelete(o.context, o.VolumeVolumeDeleteHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/volumes/{name}"] = volume.NewVolumeInspect(o.context, o.VolumeVolumeInspectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/volumes"] = volume.NewVolumeList(o.context, o.VolumeVolumeListHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/volumes/prune"] = volume.NewVolumePrune(o.context, o.VolumeVolumePruneHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *DockerEngineAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *DockerEngineAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *DockerEngineAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *DockerEngineAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *DockerEngineAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
