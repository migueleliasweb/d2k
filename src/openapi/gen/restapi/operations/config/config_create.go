// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// ConfigCreateHandlerFunc turns a function with the right signature into a config create handler
type ConfigCreateHandlerFunc func(ConfigCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ConfigCreateHandlerFunc) Handle(params ConfigCreateParams) middleware.Responder {
	return fn(params)
}

// ConfigCreateHandler interface for that can handle valid config create params
type ConfigCreateHandler interface {
	Handle(ConfigCreateParams) middleware.Responder
}

// NewConfigCreate creates a new http.Handler for the config create operation
func NewConfigCreate(ctx *middleware.Context, handler ConfigCreateHandler) *ConfigCreate {
	return &ConfigCreate{Context: ctx, Handler: handler}
}

/* ConfigCreate swagger:route POST /configs/create Config configCreate

Create a config

*/
type ConfigCreate struct {
	Context *middleware.Context
	Handler ConfigCreateHandler
}

func (o *ConfigCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewConfigCreateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ConfigCreateBody config create body
//
// swagger:model ConfigCreateBody
type ConfigCreateBody struct {
	models.ConfigSpec

	ConfigCreateParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ConfigCreateBody) UnmarshalJSON(raw []byte) error {
	// ConfigCreateParamsBodyAO0
	var configCreateParamsBodyAO0 models.ConfigSpec
	if err := swag.ReadJSON(raw, &configCreateParamsBodyAO0); err != nil {
		return err
	}
	o.ConfigSpec = configCreateParamsBodyAO0

	// ConfigCreateParamsBodyAO1
	var configCreateParamsBodyAO1 ConfigCreateParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &configCreateParamsBodyAO1); err != nil {
		return err
	}
	o.ConfigCreateParamsBodyAllOf1 = configCreateParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ConfigCreateBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	configCreateParamsBodyAO0, err := swag.WriteJSON(o.ConfigSpec)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, configCreateParamsBodyAO0)

	configCreateParamsBodyAO1, err := swag.WriteJSON(o.ConfigCreateParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, configCreateParamsBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this config create body
func (o *ConfigCreateBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ConfigSpec
	if err := o.ConfigSpec.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ConfigCreateParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this config create body based on the context it is used
func (o *ConfigCreateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ConfigSpec
	if err := o.ConfigSpec.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ConfigCreateParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ConfigCreateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ConfigCreateBody) UnmarshalBinary(b []byte) error {
	var res ConfigCreateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ConfigCreateParamsBodyAllOf1 config create params body all of1
// Example: {"Data":"VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==","Labels":{"foo":"bar"},"Name":"server.conf"}
//
// swagger:model ConfigCreateParamsBodyAllOf1
type ConfigCreateParamsBodyAllOf1 interface{}
