// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// NetworkCreateHandlerFunc turns a function with the right signature into a network create handler
type NetworkCreateHandlerFunc func(NetworkCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NetworkCreateHandlerFunc) Handle(params NetworkCreateParams) middleware.Responder {
	return fn(params)
}

// NetworkCreateHandler interface for that can handle valid network create params
type NetworkCreateHandler interface {
	Handle(NetworkCreateParams) middleware.Responder
}

// NewNetworkCreate creates a new http.Handler for the network create operation
func NewNetworkCreate(ctx *middleware.Context, handler NetworkCreateHandler) *NetworkCreate {
	return &NetworkCreate{Context: ctx, Handler: handler}
}

/* NetworkCreate swagger:route POST /networks/create Network networkCreate

Create a network

*/
type NetworkCreate struct {
	Context *middleware.Context
	Handler NetworkCreateHandler
}

func (o *NetworkCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewNetworkCreateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// NetworkCreateBody network create body
// Example: {"Attachable":false,"CheckDuplicate":false,"Driver":"bridge","EnableIPv6":true,"IPAM":{"Config":[{"Gateway":"172.20.10.11","IPRange":"172.20.10.0/24","Subnet":"172.20.0.0/16"},{"Gateway":"2001:db8:abcd::1011","Subnet":"2001:db8:abcd::/64"}],"Driver":"default","Options":{"foo":"bar"}},"Ingress":false,"Internal":true,"Labels":{"com.example.some-label":"some-value","com.example.some-other-label":"some-other-value"},"Name":"isolated_nw","Options":{"com.docker.network.bridge.default_bridge":"true","com.docker.network.bridge.enable_icc":"true","com.docker.network.bridge.enable_ip_masquerade":"true","com.docker.network.bridge.host_binding_ipv4":"0.0.0.0","com.docker.network.bridge.name":"docker0","com.docker.network.driver.mtu":"1500"}}
//
// swagger:model NetworkCreateBody
type NetworkCreateBody struct {

	// Globally scoped network is manually attachable by regular
	// containers from workers in swarm mode.
	//
	Attachable bool `json:"Attachable,omitempty"`

	// Check for networks with duplicate names. Since Network is
	// primarily keyed based on a random ID and not on the name, and
	// network name is strictly a user-friendly alias to the network
	// which is uniquely identified using ID, there is no guaranteed
	// way to check for duplicates. CheckDuplicate is there to provide
	// a best effort checking of any networks which has the same name
	// but it is not guaranteed to catch all name collisions.
	//
	CheckDuplicate bool `json:"CheckDuplicate,omitempty"`

	// Name of the network driver plugin to use.
	Driver *string `json:"Driver,omitempty"`

	// Enable IPv6 on the network.
	EnableIPV6 bool `json:"EnableIPv6,omitempty"`

	// Optional custom IP scheme for the network.
	IPAM *models.IPAM `json:"IPAM,omitempty"`

	// Ingress network is the network which provides the routing-mesh
	// in swarm mode.
	//
	Ingress bool `json:"Ingress,omitempty"`

	// Restrict external access to the network.
	Internal bool `json:"Internal,omitempty"`

	// User-defined key/value metadata.
	Labels map[string]string `json:"Labels,omitempty"`

	// The network's name.
	// Required: true
	Name *string `json:"Name"`

	// Network specific options to be used by the drivers.
	Options map[string]string `json:"Options,omitempty"`
}

// Validate validates this network create body
func (o *NetworkCreateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIPAM(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkCreateBody) validateIPAM(formats strfmt.Registry) error {
	if swag.IsZero(o.IPAM) { // not required
		return nil
	}

	if o.IPAM != nil {
		if err := o.IPAM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig" + "." + "IPAM")
			}
			return err
		}
	}

	return nil
}

func (o *NetworkCreateBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("networkConfig"+"."+"Name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this network create body based on the context it is used
func (o *NetworkCreateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIPAM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NetworkCreateBody) contextValidateIPAM(ctx context.Context, formats strfmt.Registry) error {

	if o.IPAM != nil {
		if err := o.IPAM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConfig" + "." + "IPAM")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NetworkCreateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkCreateBody) UnmarshalBinary(b []byte) error {
	var res NetworkCreateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// NetworkCreateCreatedBody NetworkCreateResponse
// Example: {"Id":"22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30","Warning":""}
//
// swagger:model NetworkCreateCreatedBody
type NetworkCreateCreatedBody struct {

	// The ID of the created network.
	ID string `json:"Id,omitempty"`

	// warning
	Warning string `json:"Warning,omitempty"`
}

// Validate validates this network create created body
func (o *NetworkCreateCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this network create created body based on context it is used
func (o *NetworkCreateCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NetworkCreateCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NetworkCreateCreatedBody) UnmarshalBinary(b []byte) error {
	var res NetworkCreateCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
