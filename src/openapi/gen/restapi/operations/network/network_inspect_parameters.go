// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNetworkInspectParams creates a new NetworkInspectParams object
// with the default values initialized.
func NewNetworkInspectParams() NetworkInspectParams {

	var (
		// initialize parameters with default values

		verboseDefault = bool(false)
	)

	return NetworkInspectParams{
		Verbose: &verboseDefault,
	}
}

// NetworkInspectParams contains all the bound params for the network inspect operation
// typically these are obtained from a http.Request
//
// swagger:parameters NetworkInspect
type NetworkInspectParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Network ID or name
	  Required: true
	  In: path
	*/
	ID string
	/*Filter the network by scope (swarm, global, or local)
	  In: query
	*/
	Scope *string
	/*Detailed inspect output for troubleshooting
	  In: query
	  Default: false
	*/
	Verbose *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewNetworkInspectParams() beforehand.
func (o *NetworkInspectParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qScope, qhkScope, _ := qs.GetOK("scope")
	if err := o.bindScope(qScope, qhkScope, route.Formats); err != nil {
		res = append(res, err)
	}

	qVerbose, qhkVerbose, _ := qs.GetOK("verbose")
	if err := o.bindVerbose(qVerbose, qhkVerbose, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindID binds and validates parameter ID from path.
func (o *NetworkInspectParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ID = raw

	return nil
}

// bindScope binds and validates parameter Scope from query.
func (o *NetworkInspectParams) bindScope(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Scope = &raw

	return nil
}

// bindVerbose binds and validates parameter Verbose from query.
func (o *NetworkInspectParams) bindVerbose(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewNetworkInspectParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("verbose", "query", "bool", raw)
	}
	o.Verbose = &value

	return nil
}
