// Code generated by go-swagger; DO NOT EDIT.

package swarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// SwarmUpdateOKCode is the HTTP code returned for type SwarmUpdateOK
const SwarmUpdateOKCode int = 200

/*SwarmUpdateOK no error

swagger:response swarmUpdateOK
*/
type SwarmUpdateOK struct {
}

// NewSwarmUpdateOK creates SwarmUpdateOK with default headers values
func NewSwarmUpdateOK() *SwarmUpdateOK {

	return &SwarmUpdateOK{}
}

// WriteResponse to the client
func (o *SwarmUpdateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// SwarmUpdateBadRequestCode is the HTTP code returned for type SwarmUpdateBadRequest
const SwarmUpdateBadRequestCode int = 400

/*SwarmUpdateBadRequest bad parameter

swagger:response swarmUpdateBadRequest
*/
type SwarmUpdateBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSwarmUpdateBadRequest creates SwarmUpdateBadRequest with default headers values
func NewSwarmUpdateBadRequest() *SwarmUpdateBadRequest {

	return &SwarmUpdateBadRequest{}
}

// WithPayload adds the payload to the swarm update bad request response
func (o *SwarmUpdateBadRequest) WithPayload(payload *models.ErrorResponse) *SwarmUpdateBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the swarm update bad request response
func (o *SwarmUpdateBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SwarmUpdateBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SwarmUpdateInternalServerErrorCode is the HTTP code returned for type SwarmUpdateInternalServerError
const SwarmUpdateInternalServerErrorCode int = 500

/*SwarmUpdateInternalServerError server error

swagger:response swarmUpdateInternalServerError
*/
type SwarmUpdateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSwarmUpdateInternalServerError creates SwarmUpdateInternalServerError with default headers values
func NewSwarmUpdateInternalServerError() *SwarmUpdateInternalServerError {

	return &SwarmUpdateInternalServerError{}
}

// WithPayload adds the payload to the swarm update internal server error response
func (o *SwarmUpdateInternalServerError) WithPayload(payload *models.ErrorResponse) *SwarmUpdateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the swarm update internal server error response
func (o *SwarmUpdateInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SwarmUpdateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SwarmUpdateServiceUnavailableCode is the HTTP code returned for type SwarmUpdateServiceUnavailable
const SwarmUpdateServiceUnavailableCode int = 503

/*SwarmUpdateServiceUnavailable node is not part of a swarm

swagger:response swarmUpdateServiceUnavailable
*/
type SwarmUpdateServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSwarmUpdateServiceUnavailable creates SwarmUpdateServiceUnavailable with default headers values
func NewSwarmUpdateServiceUnavailable() *SwarmUpdateServiceUnavailable {

	return &SwarmUpdateServiceUnavailable{}
}

// WithPayload adds the payload to the swarm update service unavailable response
func (o *SwarmUpdateServiceUnavailable) WithPayload(payload *models.ErrorResponse) *SwarmUpdateServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the swarm update service unavailable response
func (o *SwarmUpdateServiceUnavailable) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SwarmUpdateServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
