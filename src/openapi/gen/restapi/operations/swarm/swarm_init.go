// Code generated by go-swagger; DO NOT EDIT.

package swarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// SwarmInitHandlerFunc turns a function with the right signature into a swarm init handler
type SwarmInitHandlerFunc func(SwarmInitParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SwarmInitHandlerFunc) Handle(params SwarmInitParams) middleware.Responder {
	return fn(params)
}

// SwarmInitHandler interface for that can handle valid swarm init params
type SwarmInitHandler interface {
	Handle(SwarmInitParams) middleware.Responder
}

// NewSwarmInit creates a new http.Handler for the swarm init operation
func NewSwarmInit(ctx *middleware.Context, handler SwarmInitHandler) *SwarmInit {
	return &SwarmInit{Context: ctx, Handler: handler}
}

/* SwarmInit swagger:route POST /swarm/init Swarm swarmInit

Initialize a new swarm

*/
type SwarmInit struct {
	Context *middleware.Context
	Handler SwarmInitHandler
}

func (o *SwarmInit) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSwarmInitParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SwarmInitBody swarm init body
// Example: {"AdvertiseAddr":"192.168.1.1:2377","DataPathPort":4789,"DefaultAddrPool":["10.10.0.0/8","20.20.0.0/8"],"ForceNewCluster":false,"ListenAddr":"0.0.0.0:2377","Spec":{"CAConfig":{},"Dispatcher":{},"EncryptionConfig":{"AutoLockManagers":false},"Orchestration":{},"Raft":{}},"SubnetSize":24}
//
// swagger:model SwarmInitBody
type SwarmInitBody struct {

	// Externally reachable address advertised to other nodes. This
	// can either be an address/port combination in the form
	// `192.168.1.1:4567`, or an interface followed by a port number,
	// like `eth0:4567`. If the port number is omitted, the port
	// number from the listen address is used. If `AdvertiseAddr` is
	// not specified, it will be automatically detected when possible.
	//
	AdvertiseAddr string `json:"AdvertiseAddr,omitempty"`

	// Address or interface to use for data path traffic (format:
	// `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
	// like `eth0`. If `DataPathAddr` is unspecified, the same address
	// as `AdvertiseAddr` is used.
	//
	// The `DataPathAddr` specifies the address that global scope
	// network drivers will publish towards other  nodes in order to
	// reach the containers running on this node. Using this parameter
	// it is possible to separate the container data traffic from the
	// management traffic of the cluster.
	//
	DataPathAddr string `json:"DataPathAddr,omitempty"`

	// DataPathPort specifies the data path port number for data traffic.
	// Acceptable port range is 1024 to 49151.
	// if no port is set or is set to 0, default port 4789 will be used.
	//
	DataPathPort uint32 `json:"DataPathPort,omitempty"`

	// Default Address Pool specifies default subnet pools for global
	// scope networks.
	//
	DefaultAddrPool []string `json:"DefaultAddrPool"`

	// Force creation of a new swarm.
	ForceNewCluster bool `json:"ForceNewCluster,omitempty"`

	// Listen address used for inter-manager communication, as well
	// as determining the networking interface used for the VXLAN
	// Tunnel Endpoint (VTEP). This can either be an address/port
	// combination in the form `192.168.1.1:4567`, or an interface
	// followed by a port number, like `eth0:4567`. If the port number
	// is omitted, the default swarm listening port is used.
	//
	ListenAddr string `json:"ListenAddr,omitempty"`

	// spec
	Spec *models.SwarmSpec `json:"Spec,omitempty"`

	// SubnetSize specifies the subnet size of the networks created
	// from the default subnet pool.
	//
	SubnetSize uint32 `json:"SubnetSize,omitempty"`
}

// Validate validates this swarm init body
func (o *SwarmInitBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SwarmInitBody) validateSpec(formats strfmt.Registry) error {
	if swag.IsZero(o.Spec) { // not required
		return nil
	}

	if o.Spec != nil {
		if err := o.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "Spec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this swarm init body based on the context it is used
func (o *SwarmInitBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SwarmInitBody) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if o.Spec != nil {
		if err := o.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "Spec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SwarmInitBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SwarmInitBody) UnmarshalBinary(b []byte) error {
	var res SwarmInitBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
