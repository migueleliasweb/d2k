// Code generated by go-swagger; DO NOT EDIT.

package swarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// SwarmUpdateURL generates an URL for the swarm update operation
type SwarmUpdateURL struct {
	RotateManagerToken     *bool
	RotateManagerUnlockKey *bool
	RotateWorkerToken      *bool
	Version                int64

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *SwarmUpdateURL) WithBasePath(bp string) *SwarmUpdateURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *SwarmUpdateURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *SwarmUpdateURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/swarm/update"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/v1.41"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var rotateManagerTokenQ string
	if o.RotateManagerToken != nil {
		rotateManagerTokenQ = swag.FormatBool(*o.RotateManagerToken)
	}
	if rotateManagerTokenQ != "" {
		qs.Set("rotateManagerToken", rotateManagerTokenQ)
	}

	var rotateManagerUnlockKeyQ string
	if o.RotateManagerUnlockKey != nil {
		rotateManagerUnlockKeyQ = swag.FormatBool(*o.RotateManagerUnlockKey)
	}
	if rotateManagerUnlockKeyQ != "" {
		qs.Set("rotateManagerUnlockKey", rotateManagerUnlockKeyQ)
	}

	var rotateWorkerTokenQ string
	if o.RotateWorkerToken != nil {
		rotateWorkerTokenQ = swag.FormatBool(*o.RotateWorkerToken)
	}
	if rotateWorkerTokenQ != "" {
		qs.Set("rotateWorkerToken", rotateWorkerTokenQ)
	}

	versionQ := swag.FormatInt64(o.Version)
	if versionQ != "" {
		qs.Set("version", versionQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *SwarmUpdateURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *SwarmUpdateURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *SwarmUpdateURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on SwarmUpdateURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on SwarmUpdateURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *SwarmUpdateURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
