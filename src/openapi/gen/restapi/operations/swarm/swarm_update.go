// Code generated by go-swagger; DO NOT EDIT.

package swarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SwarmUpdateHandlerFunc turns a function with the right signature into a swarm update handler
type SwarmUpdateHandlerFunc func(SwarmUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SwarmUpdateHandlerFunc) Handle(params SwarmUpdateParams) middleware.Responder {
	return fn(params)
}

// SwarmUpdateHandler interface for that can handle valid swarm update params
type SwarmUpdateHandler interface {
	Handle(SwarmUpdateParams) middleware.Responder
}

// NewSwarmUpdate creates a new http.Handler for the swarm update operation
func NewSwarmUpdate(ctx *middleware.Context, handler SwarmUpdateHandler) *SwarmUpdate {
	return &SwarmUpdate{Context: ctx, Handler: handler}
}

/* SwarmUpdate swagger:route POST /swarm/update Swarm swarmUpdate

Update a swarm

*/
type SwarmUpdate struct {
	Context *middleware.Context
	Handler SwarmUpdateHandler
}

func (o *SwarmUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSwarmUpdateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
