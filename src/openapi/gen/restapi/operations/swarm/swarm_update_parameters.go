// Code generated by go-swagger; DO NOT EDIT.

package swarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// NewSwarmUpdateParams creates a new SwarmUpdateParams object
// with the default values initialized.
func NewSwarmUpdateParams() SwarmUpdateParams {

	var (
		// initialize parameters with default values

		rotateManagerTokenDefault     = bool(false)
		rotateManagerUnlockKeyDefault = bool(false)
		rotateWorkerTokenDefault      = bool(false)
	)

	return SwarmUpdateParams{
		RotateManagerToken: &rotateManagerTokenDefault,

		RotateManagerUnlockKey: &rotateManagerUnlockKeyDefault,

		RotateWorkerToken: &rotateWorkerTokenDefault,
	}
}

// SwarmUpdateParams contains all the bound params for the swarm update operation
// typically these are obtained from a http.Request
//
// swagger:parameters SwarmUpdate
type SwarmUpdateParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: body
	*/
	Body *models.SwarmSpec
	/*Rotate the manager join token.
	  In: query
	  Default: false
	*/
	RotateManagerToken *bool
	/*Rotate the manager unlock key.
	  In: query
	  Default: false
	*/
	RotateManagerUnlockKey *bool
	/*Rotate the worker join token.
	  In: query
	  Default: false
	*/
	RotateWorkerToken *bool
	/*The version number of the swarm object being updated. This is
	required to avoid conflicting writes.

	  Required: true
	  In: query
	*/
	Version int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSwarmUpdateParams() beforehand.
func (o *SwarmUpdateParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.SwarmSpec
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body", ""))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(context.Background())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}
	} else {
		res = append(res, errors.Required("body", "body", ""))
	}

	qRotateManagerToken, qhkRotateManagerToken, _ := qs.GetOK("rotateManagerToken")
	if err := o.bindRotateManagerToken(qRotateManagerToken, qhkRotateManagerToken, route.Formats); err != nil {
		res = append(res, err)
	}

	qRotateManagerUnlockKey, qhkRotateManagerUnlockKey, _ := qs.GetOK("rotateManagerUnlockKey")
	if err := o.bindRotateManagerUnlockKey(qRotateManagerUnlockKey, qhkRotateManagerUnlockKey, route.Formats); err != nil {
		res = append(res, err)
	}

	qRotateWorkerToken, qhkRotateWorkerToken, _ := qs.GetOK("rotateWorkerToken")
	if err := o.bindRotateWorkerToken(qRotateWorkerToken, qhkRotateWorkerToken, route.Formats); err != nil {
		res = append(res, err)
	}

	qVersion, qhkVersion, _ := qs.GetOK("version")
	if err := o.bindVersion(qVersion, qhkVersion, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindRotateManagerToken binds and validates parameter RotateManagerToken from query.
func (o *SwarmUpdateParams) bindRotateManagerToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewSwarmUpdateParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("rotateManagerToken", "query", "bool", raw)
	}
	o.RotateManagerToken = &value

	return nil
}

// bindRotateManagerUnlockKey binds and validates parameter RotateManagerUnlockKey from query.
func (o *SwarmUpdateParams) bindRotateManagerUnlockKey(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewSwarmUpdateParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("rotateManagerUnlockKey", "query", "bool", raw)
	}
	o.RotateManagerUnlockKey = &value

	return nil
}

// bindRotateWorkerToken binds and validates parameter RotateWorkerToken from query.
func (o *SwarmUpdateParams) bindRotateWorkerToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewSwarmUpdateParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("rotateWorkerToken", "query", "bool", raw)
	}
	o.RotateWorkerToken = &value

	return nil
}

// bindVersion binds and validates parameter Version from query.
func (o *SwarmUpdateParams) bindVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("version", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("version", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("version", "query", "int64", raw)
	}
	o.Version = value

	return nil
}
