// Code generated by go-swagger; DO NOT EDIT.

package swarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// SwarmUnlockkeyOKCode is the HTTP code returned for type SwarmUnlockkeyOK
const SwarmUnlockkeyOKCode int = 200

/*SwarmUnlockkeyOK no error

swagger:response swarmUnlockkeyOK
*/
type SwarmUnlockkeyOK struct {

	/*
	  In: Body
	*/
	Payload *SwarmUnlockkeyOKBody `json:"body,omitempty"`
}

// NewSwarmUnlockkeyOK creates SwarmUnlockkeyOK with default headers values
func NewSwarmUnlockkeyOK() *SwarmUnlockkeyOK {

	return &SwarmUnlockkeyOK{}
}

// WithPayload adds the payload to the swarm unlockkey o k response
func (o *SwarmUnlockkeyOK) WithPayload(payload *SwarmUnlockkeyOKBody) *SwarmUnlockkeyOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the swarm unlockkey o k response
func (o *SwarmUnlockkeyOK) SetPayload(payload *SwarmUnlockkeyOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SwarmUnlockkeyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SwarmUnlockkeyInternalServerErrorCode is the HTTP code returned for type SwarmUnlockkeyInternalServerError
const SwarmUnlockkeyInternalServerErrorCode int = 500

/*SwarmUnlockkeyInternalServerError server error

swagger:response swarmUnlockkeyInternalServerError
*/
type SwarmUnlockkeyInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSwarmUnlockkeyInternalServerError creates SwarmUnlockkeyInternalServerError with default headers values
func NewSwarmUnlockkeyInternalServerError() *SwarmUnlockkeyInternalServerError {

	return &SwarmUnlockkeyInternalServerError{}
}

// WithPayload adds the payload to the swarm unlockkey internal server error response
func (o *SwarmUnlockkeyInternalServerError) WithPayload(payload *models.ErrorResponse) *SwarmUnlockkeyInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the swarm unlockkey internal server error response
func (o *SwarmUnlockkeyInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SwarmUnlockkeyInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SwarmUnlockkeyServiceUnavailableCode is the HTTP code returned for type SwarmUnlockkeyServiceUnavailable
const SwarmUnlockkeyServiceUnavailableCode int = 503

/*SwarmUnlockkeyServiceUnavailable node is not part of a swarm

swagger:response swarmUnlockkeyServiceUnavailable
*/
type SwarmUnlockkeyServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSwarmUnlockkeyServiceUnavailable creates SwarmUnlockkeyServiceUnavailable with default headers values
func NewSwarmUnlockkeyServiceUnavailable() *SwarmUnlockkeyServiceUnavailable {

	return &SwarmUnlockkeyServiceUnavailable{}
}

// WithPayload adds the payload to the swarm unlockkey service unavailable response
func (o *SwarmUnlockkeyServiceUnavailable) WithPayload(payload *models.ErrorResponse) *SwarmUnlockkeyServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the swarm unlockkey service unavailable response
func (o *SwarmUnlockkeyServiceUnavailable) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SwarmUnlockkeyServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
