// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PluginPullHandlerFunc turns a function with the right signature into a plugin pull handler
type PluginPullHandlerFunc func(PluginPullParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PluginPullHandlerFunc) Handle(params PluginPullParams) middleware.Responder {
	return fn(params)
}

// PluginPullHandler interface for that can handle valid plugin pull params
type PluginPullHandler interface {
	Handle(PluginPullParams) middleware.Responder
}

// NewPluginPull creates a new http.Handler for the plugin pull operation
func NewPluginPull(ctx *middleware.Context, handler PluginPullHandler) *PluginPull {
	return &PluginPull{Context: ctx, Handler: handler}
}

/* PluginPull swagger:route POST /plugins/pull Plugin pluginPull

Install a plugin

Pulls and installs a plugin. After the plugin is installed, it can be
enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).


*/
type PluginPull struct {
	Context *middleware.Context
	Handler PluginPullHandler
}

func (o *PluginPull) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPluginPullParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PluginPullParamsBodyItems0 Describes a permission accepted by the user upon installing the
// plugin.
//
//
// swagger:model PluginPullParamsBodyItems0
type PluginPullParamsBodyItems0 struct {

	// description
	Description string `json:"Description,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// value
	Value []string `json:"Value"`
}

// Validate validates this plugin pull params body items0
func (o *PluginPullParamsBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this plugin pull params body items0 based on context it is used
func (o *PluginPullParamsBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PluginPullParamsBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PluginPullParamsBodyItems0) UnmarshalBinary(b []byte) error {
	var res PluginPullParamsBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
