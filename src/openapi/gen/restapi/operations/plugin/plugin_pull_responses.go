// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// PluginPullNoContentCode is the HTTP code returned for type PluginPullNoContent
const PluginPullNoContentCode int = 204

/*PluginPullNoContent no error

swagger:response pluginPullNoContent
*/
type PluginPullNoContent struct {
}

// NewPluginPullNoContent creates PluginPullNoContent with default headers values
func NewPluginPullNoContent() *PluginPullNoContent {

	return &PluginPullNoContent{}
}

// WriteResponse to the client
func (o *PluginPullNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// PluginPullInternalServerErrorCode is the HTTP code returned for type PluginPullInternalServerError
const PluginPullInternalServerErrorCode int = 500

/*PluginPullInternalServerError server error

swagger:response pluginPullInternalServerError
*/
type PluginPullInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewPluginPullInternalServerError creates PluginPullInternalServerError with default headers values
func NewPluginPullInternalServerError() *PluginPullInternalServerError {

	return &PluginPullInternalServerError{}
}

// WithPayload adds the payload to the plugin pull internal server error response
func (o *PluginPullInternalServerError) WithPayload(payload *models.ErrorResponse) *PluginPullInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the plugin pull internal server error response
func (o *PluginPullInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PluginPullInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
