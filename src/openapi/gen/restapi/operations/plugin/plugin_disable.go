// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PluginDisableHandlerFunc turns a function with the right signature into a plugin disable handler
type PluginDisableHandlerFunc func(PluginDisableParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PluginDisableHandlerFunc) Handle(params PluginDisableParams) middleware.Responder {
	return fn(params)
}

// PluginDisableHandler interface for that can handle valid plugin disable params
type PluginDisableHandler interface {
	Handle(PluginDisableParams) middleware.Responder
}

// NewPluginDisable creates a new http.Handler for the plugin disable operation
func NewPluginDisable(ctx *middleware.Context, handler PluginDisableHandler) *PluginDisable {
	return &PluginDisable{Context: ctx, Handler: handler}
}

/* PluginDisable swagger:route POST /plugins/{name}/disable Plugin pluginDisable

Disable a plugin

*/
type PluginDisable struct {
	Context *middleware.Context
	Handler PluginDisableHandler
}

func (o *PluginDisable) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPluginDisableParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
