// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PluginListHandlerFunc turns a function with the right signature into a plugin list handler
type PluginListHandlerFunc func(PluginListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PluginListHandlerFunc) Handle(params PluginListParams) middleware.Responder {
	return fn(params)
}

// PluginListHandler interface for that can handle valid plugin list params
type PluginListHandler interface {
	Handle(PluginListParams) middleware.Responder
}

// NewPluginList creates a new http.Handler for the plugin list operation
func NewPluginList(ctx *middleware.Context, handler PluginListHandler) *PluginList {
	return &PluginList{Context: ctx, Handler: handler}
}

/* PluginList swagger:route GET /plugins Plugin pluginList

List plugins

Returns information about installed plugins.

*/
type PluginList struct {
	Context *middleware.Context
	Handler PluginListHandler
}

func (o *PluginList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPluginListParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
