// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PluginPushHandlerFunc turns a function with the right signature into a plugin push handler
type PluginPushHandlerFunc func(PluginPushParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PluginPushHandlerFunc) Handle(params PluginPushParams) middleware.Responder {
	return fn(params)
}

// PluginPushHandler interface for that can handle valid plugin push params
type PluginPushHandler interface {
	Handle(PluginPushParams) middleware.Responder
}

// NewPluginPush creates a new http.Handler for the plugin push operation
func NewPluginPush(ctx *middleware.Context, handler PluginPushHandler) *PluginPush {
	return &PluginPush{Context: ctx, Handler: handler}
}

/* PluginPush swagger:route POST /plugins/{name}/push Plugin pluginPush

Push a plugin

Push a plugin to the registry.


*/
type PluginPush struct {
	Context *middleware.Context
	Handler PluginPushHandler
}

func (o *PluginPush) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPluginPushParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
