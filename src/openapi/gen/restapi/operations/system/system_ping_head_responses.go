// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// SystemPingHeadOKCode is the HTTP code returned for type SystemPingHeadOK
const SystemPingHeadOKCode int = 200

/*SystemPingHeadOK no error

swagger:response systemPingHeadOK
*/
type SystemPingHeadOK struct {
	/*Max API Version the server supports

	 */
	APIVersion string `json:"API-Version"`
	/*Default version of docker image builder

	 */
	BuilderVersion string `json:"Builder-Version"`
	/*

	  Default: "no-cache, no-store, must-revalidate"
	*/
	CacheControl string `json:"Cache-Control"`
	/*If the server is running with experimental mode enabled

	 */
	DockerExperimental bool `json:"Docker-Experimental"`
	/*

	  Default: "no-cache"
	*/
	Pragma string `json:"Pragma"`

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSystemPingHeadOK creates SystemPingHeadOK with default headers values
func NewSystemPingHeadOK() *SystemPingHeadOK {

	var (
		// initialize headers with default values

		cacheControlDefault = string("no-cache, no-store, must-revalidate")

		pragmaDefault = string("no-cache")
	)

	return &SystemPingHeadOK{

		CacheControl: cacheControlDefault,

		Pragma: pragmaDefault,
	}
}

// WithAPIVersion adds the apiVersion to the system ping head o k response
func (o *SystemPingHeadOK) WithAPIVersion(aPIVersion string) *SystemPingHeadOK {
	o.APIVersion = aPIVersion
	return o
}

// SetAPIVersion sets the apiVersion to the system ping head o k response
func (o *SystemPingHeadOK) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithBuilderVersion adds the builderVersion to the system ping head o k response
func (o *SystemPingHeadOK) WithBuilderVersion(builderVersion string) *SystemPingHeadOK {
	o.BuilderVersion = builderVersion
	return o
}

// SetBuilderVersion sets the builderVersion to the system ping head o k response
func (o *SystemPingHeadOK) SetBuilderVersion(builderVersion string) {
	o.BuilderVersion = builderVersion
}

// WithCacheControl adds the cacheControl to the system ping head o k response
func (o *SystemPingHeadOK) WithCacheControl(cacheControl string) *SystemPingHeadOK {
	o.CacheControl = cacheControl
	return o
}

// SetCacheControl sets the cacheControl to the system ping head o k response
func (o *SystemPingHeadOK) SetCacheControl(cacheControl string) {
	o.CacheControl = cacheControl
}

// WithDockerExperimental adds the dockerExperimental to the system ping head o k response
func (o *SystemPingHeadOK) WithDockerExperimental(dockerExperimental bool) *SystemPingHeadOK {
	o.DockerExperimental = dockerExperimental
	return o
}

// SetDockerExperimental sets the dockerExperimental to the system ping head o k response
func (o *SystemPingHeadOK) SetDockerExperimental(dockerExperimental bool) {
	o.DockerExperimental = dockerExperimental
}

// WithPragma adds the pragma to the system ping head o k response
func (o *SystemPingHeadOK) WithPragma(pragma string) *SystemPingHeadOK {
	o.Pragma = pragma
	return o
}

// SetPragma sets the pragma to the system ping head o k response
func (o *SystemPingHeadOK) SetPragma(pragma string) {
	o.Pragma = pragma
}

// WithPayload adds the payload to the system ping head o k response
func (o *SystemPingHeadOK) WithPayload(payload string) *SystemPingHeadOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the system ping head o k response
func (o *SystemPingHeadOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SystemPingHeadOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header API-Version

	aPIVersion := o.APIVersion
	if aPIVersion != "" {
		rw.Header().Set("API-Version", aPIVersion)
	}

	// response header Builder-Version

	builderVersion := o.BuilderVersion
	if builderVersion != "" {
		rw.Header().Set("Builder-Version", builderVersion)
	}

	// response header Cache-Control

	cacheControl := o.CacheControl
	if cacheControl != "" {
		rw.Header().Set("Cache-Control", cacheControl)
	}

	// response header Docker-Experimental

	dockerExperimental := swag.FormatBool(o.DockerExperimental)
	if dockerExperimental != "" {
		rw.Header().Set("Docker-Experimental", dockerExperimental)
	}

	// response header Pragma

	pragma := o.Pragma
	if pragma != "" {
		rw.Header().Set("Pragma", pragma)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SystemPingHeadInternalServerErrorCode is the HTTP code returned for type SystemPingHeadInternalServerError
const SystemPingHeadInternalServerErrorCode int = 500

/*SystemPingHeadInternalServerError server error

swagger:response systemPingHeadInternalServerError
*/
type SystemPingHeadInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSystemPingHeadInternalServerError creates SystemPingHeadInternalServerError with default headers values
func NewSystemPingHeadInternalServerError() *SystemPingHeadInternalServerError {

	return &SystemPingHeadInternalServerError{}
}

// WithPayload adds the payload to the system ping head internal server error response
func (o *SystemPingHeadInternalServerError) WithPayload(payload *models.ErrorResponse) *SystemPingHeadInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the system ping head internal server error response
func (o *SystemPingHeadInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SystemPingHeadInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
