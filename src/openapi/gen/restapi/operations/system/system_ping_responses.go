// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// SystemPingOKCode is the HTTP code returned for type SystemPingOK
const SystemPingOKCode int = 200

/*SystemPingOK no error

swagger:response systemPingOK
*/
type SystemPingOK struct {
	/*Max API Version the server supports

	 */
	APIVersion string `json:"API-Version"`
	/*Default version of docker image builder

	 */
	BuilderVersion string `json:"Builder-Version"`
	/*

	  Default: "no-cache, no-store, must-revalidate"
	*/
	CacheControl string `json:"Cache-Control"`
	/*If the server is running with experimental mode enabled

	 */
	DockerExperimental bool `json:"Docker-Experimental"`
	/*

	  Default: "no-cache"
	*/
	Pragma string `json:"Pragma"`

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewSystemPingOK creates SystemPingOK with default headers values
func NewSystemPingOK() *SystemPingOK {

	var (
		// initialize headers with default values

		cacheControlDefault = string("no-cache, no-store, must-revalidate")

		pragmaDefault = string("no-cache")
	)

	return &SystemPingOK{

		CacheControl: cacheControlDefault,

		Pragma: pragmaDefault,
	}
}

// WithAPIVersion adds the apiVersion to the system ping o k response
func (o *SystemPingOK) WithAPIVersion(aPIVersion string) *SystemPingOK {
	o.APIVersion = aPIVersion
	return o
}

// SetAPIVersion sets the apiVersion to the system ping o k response
func (o *SystemPingOK) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithBuilderVersion adds the builderVersion to the system ping o k response
func (o *SystemPingOK) WithBuilderVersion(builderVersion string) *SystemPingOK {
	o.BuilderVersion = builderVersion
	return o
}

// SetBuilderVersion sets the builderVersion to the system ping o k response
func (o *SystemPingOK) SetBuilderVersion(builderVersion string) {
	o.BuilderVersion = builderVersion
}

// WithCacheControl adds the cacheControl to the system ping o k response
func (o *SystemPingOK) WithCacheControl(cacheControl string) *SystemPingOK {
	o.CacheControl = cacheControl
	return o
}

// SetCacheControl sets the cacheControl to the system ping o k response
func (o *SystemPingOK) SetCacheControl(cacheControl string) {
	o.CacheControl = cacheControl
}

// WithDockerExperimental adds the dockerExperimental to the system ping o k response
func (o *SystemPingOK) WithDockerExperimental(dockerExperimental bool) *SystemPingOK {
	o.DockerExperimental = dockerExperimental
	return o
}

// SetDockerExperimental sets the dockerExperimental to the system ping o k response
func (o *SystemPingOK) SetDockerExperimental(dockerExperimental bool) {
	o.DockerExperimental = dockerExperimental
}

// WithPragma adds the pragma to the system ping o k response
func (o *SystemPingOK) WithPragma(pragma string) *SystemPingOK {
	o.Pragma = pragma
	return o
}

// SetPragma sets the pragma to the system ping o k response
func (o *SystemPingOK) SetPragma(pragma string) {
	o.Pragma = pragma
}

// WithPayload adds the payload to the system ping o k response
func (o *SystemPingOK) WithPayload(payload string) *SystemPingOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the system ping o k response
func (o *SystemPingOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SystemPingOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header API-Version

	aPIVersion := o.APIVersion
	if aPIVersion != "" {
		rw.Header().Set("API-Version", aPIVersion)
	}

	// response header Builder-Version

	builderVersion := o.BuilderVersion
	if builderVersion != "" {
		rw.Header().Set("Builder-Version", builderVersion)
	}

	// response header Cache-Control

	cacheControl := o.CacheControl
	if cacheControl != "" {
		rw.Header().Set("Cache-Control", cacheControl)
	}

	// response header Docker-Experimental

	dockerExperimental := swag.FormatBool(o.DockerExperimental)
	if dockerExperimental != "" {
		rw.Header().Set("Docker-Experimental", dockerExperimental)
	}

	// response header Pragma

	pragma := o.Pragma
	if pragma != "" {
		rw.Header().Set("Pragma", pragma)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SystemPingInternalServerErrorCode is the HTTP code returned for type SystemPingInternalServerError
const SystemPingInternalServerErrorCode int = 500

/*SystemPingInternalServerError server error

swagger:response systemPingInternalServerError
*/
type SystemPingInternalServerError struct {
	/*

	  Default: "no-cache, no-store, must-revalidate"
	*/
	CacheControl string `json:"Cache-Control"`
	/*

	  Default: "no-cache"
	*/
	Pragma string `json:"Pragma"`

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSystemPingInternalServerError creates SystemPingInternalServerError with default headers values
func NewSystemPingInternalServerError() *SystemPingInternalServerError {

	var (
		// initialize headers with default values

		cacheControlDefault = string("no-cache, no-store, must-revalidate")
		pragmaDefault       = string("no-cache")
	)

	return &SystemPingInternalServerError{

		CacheControl: cacheControlDefault,

		Pragma: pragmaDefault,
	}
}

// WithCacheControl adds the cacheControl to the system ping internal server error response
func (o *SystemPingInternalServerError) WithCacheControl(cacheControl string) *SystemPingInternalServerError {
	o.CacheControl = cacheControl
	return o
}

// SetCacheControl sets the cacheControl to the system ping internal server error response
func (o *SystemPingInternalServerError) SetCacheControl(cacheControl string) {
	o.CacheControl = cacheControl
}

// WithPragma adds the pragma to the system ping internal server error response
func (o *SystemPingInternalServerError) WithPragma(pragma string) *SystemPingInternalServerError {
	o.Pragma = pragma
	return o
}

// SetPragma sets the pragma to the system ping internal server error response
func (o *SystemPingInternalServerError) SetPragma(pragma string) {
	o.Pragma = pragma
}

// WithPayload adds the payload to the system ping internal server error response
func (o *SystemPingInternalServerError) WithPayload(payload *models.ErrorResponse) *SystemPingInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the system ping internal server error response
func (o *SystemPingInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SystemPingInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Cache-Control

	cacheControl := o.CacheControl
	if cacheControl != "" {
		rw.Header().Set("Cache-Control", cacheControl)
	}

	// response header Pragma

	pragma := o.Pragma
	if pragma != "" {
		rw.Header().Set("Pragma", pragma)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
