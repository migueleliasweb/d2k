// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SystemEventsHandlerFunc turns a function with the right signature into a system events handler
type SystemEventsHandlerFunc func(SystemEventsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SystemEventsHandlerFunc) Handle(params SystemEventsParams) middleware.Responder {
	return fn(params)
}

// SystemEventsHandler interface for that can handle valid system events params
type SystemEventsHandler interface {
	Handle(SystemEventsParams) middleware.Responder
}

// NewSystemEvents creates a new http.Handler for the system events operation
func NewSystemEvents(ctx *middleware.Context, handler SystemEventsHandler) *SystemEvents {
	return &SystemEvents{Context: ctx, Handler: handler}
}

/* SystemEvents swagger:route GET /events System systemEvents

Monitor events

Stream real-time events from the server.

Various objects within Docker report events when something happens to them.

Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`

Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`

Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`

Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`

The Docker daemon reports these events: `reload`

Services report these events: `create`, `update`, and `remove`

Nodes report these events: `create`, `update`, and `remove`

Secrets report these events: `create`, `update`, and `remove`

Configs report these events: `create`, `update`, and `remove`

The Builder reports `prune` events


*/
type SystemEvents struct {
	Context *middleware.Context
	Handler SystemEventsHandler
}

func (o *SystemEvents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSystemEventsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SystemEventsOKBody SystemEventsResponse
//
// swagger:model SystemEventsOKBody
type SystemEventsOKBody struct {

	// The type of event
	Action string `json:"Action,omitempty"`

	// actor
	Actor *SystemEventsOKBodyActor `json:"Actor,omitempty"`

	// The type of object emitting the event
	Type string `json:"Type,omitempty"`

	// Timestamp of event
	Time int64 `json:"time,omitempty"`

	// Timestamp of event, with nanosecond accuracy
	TimeNano int64 `json:"timeNano,omitempty"`
}

// Validate validates this system events o k body
func (o *SystemEventsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SystemEventsOKBody) validateActor(formats strfmt.Registry) error {
	if swag.IsZero(o.Actor) { // not required
		return nil
	}

	if o.Actor != nil {
		if err := o.Actor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemEventsOK" + "." + "Actor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this system events o k body based on the context it is used
func (o *SystemEventsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SystemEventsOKBody) contextValidateActor(ctx context.Context, formats strfmt.Registry) error {

	if o.Actor != nil {
		if err := o.Actor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemEventsOK" + "." + "Actor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SystemEventsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SystemEventsOKBody) UnmarshalBinary(b []byte) error {
	var res SystemEventsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SystemEventsOKBodyActor system events o k body actor
//
// swagger:model SystemEventsOKBodyActor
type SystemEventsOKBodyActor struct {

	// Various key/value attributes of the object, depending on its type
	Attributes map[string]string `json:"Attributes,omitempty"`

	// The ID of the object emitting the event
	ID string `json:"ID,omitempty"`
}

// Validate validates this system events o k body actor
func (o *SystemEventsOKBodyActor) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this system events o k body actor based on context it is used
func (o *SystemEventsOKBodyActor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SystemEventsOKBodyActor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SystemEventsOKBodyActor) UnmarshalBinary(b []byte) error {
	var res SystemEventsOKBodyActor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
