// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SystemPingHandlerFunc turns a function with the right signature into a system ping handler
type SystemPingHandlerFunc func(SystemPingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SystemPingHandlerFunc) Handle(params SystemPingParams) middleware.Responder {
	return fn(params)
}

// SystemPingHandler interface for that can handle valid system ping params
type SystemPingHandler interface {
	Handle(SystemPingParams) middleware.Responder
}

// NewSystemPing creates a new http.Handler for the system ping operation
func NewSystemPing(ctx *middleware.Context, handler SystemPingHandler) *SystemPing {
	return &SystemPing{Context: ctx, Handler: handler}
}

/* SystemPing swagger:route GET /_ping System systemPing

Ping

This is a dummy endpoint you can use to test if the server is accessible.

*/
type SystemPing struct {
	Context *middleware.Context
	Handler SystemPingHandler
}

func (o *SystemPing) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSystemPingParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
