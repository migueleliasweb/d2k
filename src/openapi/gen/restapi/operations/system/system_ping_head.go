// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SystemPingHeadHandlerFunc turns a function with the right signature into a system ping head handler
type SystemPingHeadHandlerFunc func(SystemPingHeadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SystemPingHeadHandlerFunc) Handle(params SystemPingHeadParams) middleware.Responder {
	return fn(params)
}

// SystemPingHeadHandler interface for that can handle valid system ping head params
type SystemPingHeadHandler interface {
	Handle(SystemPingHeadParams) middleware.Responder
}

// NewSystemPingHead creates a new http.Handler for the system ping head operation
func NewSystemPingHead(ctx *middleware.Context, handler SystemPingHeadHandler) *SystemPingHead {
	return &SystemPingHead{Context: ctx, Handler: handler}
}

/* SystemPingHead swagger:route HEAD /_ping System systemPingHead

Ping

This is a dummy endpoint you can use to test if the server is accessible.

*/
type SystemPingHead struct {
	Context *middleware.Context
	Handler SystemPingHeadHandler
}

func (o *SystemPingHead) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSystemPingHeadParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
