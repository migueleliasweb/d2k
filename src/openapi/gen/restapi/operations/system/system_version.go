// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SystemVersionHandlerFunc turns a function with the right signature into a system version handler
type SystemVersionHandlerFunc func(SystemVersionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SystemVersionHandlerFunc) Handle(params SystemVersionParams) middleware.Responder {
	return fn(params)
}

// SystemVersionHandler interface for that can handle valid system version params
type SystemVersionHandler interface {
	Handle(SystemVersionParams) middleware.Responder
}

// NewSystemVersion creates a new http.Handler for the system version operation
func NewSystemVersion(ctx *middleware.Context, handler SystemVersionHandler) *SystemVersion {
	return &SystemVersion{Context: ctx, Handler: handler}
}

/* SystemVersion swagger:route GET /version System systemVersion

Get version

Returns the version of Docker that is running and various information about the system that Docker is running on.

*/
type SystemVersion struct {
	Context *middleware.Context
	Handler SystemVersionHandler
}

func (o *SystemVersion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSystemVersionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
