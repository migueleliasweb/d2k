// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewServiceUpdateParams creates a new ServiceUpdateParams object
// with the default values initialized.
func NewServiceUpdateParams() ServiceUpdateParams {

	var (
		// initialize parameters with default values

		registryAuthFromDefault = string("spec")
	)

	return ServiceUpdateParams{
		RegistryAuthFrom: &registryAuthFromDefault,
	}
}

// ServiceUpdateParams contains all the bound params for the service update operation
// typically these are obtained from a http.Request
//
// swagger:parameters ServiceUpdate
type ServiceUpdateParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*A base64url-encoded auth configuration for pulling from private
	registries.

	Refer to the [authentication section](#section/Authentication) for
	details.

	  In: header
	*/
	XRegistryAuth *string
	/*
	  Required: true
	  In: body
	*/
	Body ServiceUpdateBody
	/*ID or name of service.
	  Required: true
	  In: path
	*/
	ID string
	/*If the `X-Registry-Auth` header is not specified, this parameter
	indicates where to find registry authorization credentials.

	  In: query
	  Default: "spec"
	*/
	RegistryAuthFrom *string
	/*Set to this parameter to `previous` to cause a server-side rollback
	to the previous service spec. The supplied spec will be ignored in
	this case.

	  In: query
	*/
	Rollback *string
	/*The version number of the service object being updated. This is
	required to avoid conflicting writes.
	This version number should be the value as currently set on the
	service *before* the update. You can find the current version by
	calling `GET /services/{id}`

	  Required: true
	  In: query
	*/
	Version int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewServiceUpdateParams() beforehand.
func (o *ServiceUpdateParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindXRegistryAuth(r.Header[http.CanonicalHeaderKey("X-Registry-Auth")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body ServiceUpdateBody
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body", ""))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(context.Background())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = body
			}
		}
	} else {
		res = append(res, errors.Required("body", "body", ""))
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qRegistryAuthFrom, qhkRegistryAuthFrom, _ := qs.GetOK("registryAuthFrom")
	if err := o.bindRegistryAuthFrom(qRegistryAuthFrom, qhkRegistryAuthFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qRollback, qhkRollback, _ := qs.GetOK("rollback")
	if err := o.bindRollback(qRollback, qhkRollback, route.Formats); err != nil {
		res = append(res, err)
	}

	qVersion, qhkVersion, _ := qs.GetOK("version")
	if err := o.bindVersion(qVersion, qhkVersion, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXRegistryAuth binds and validates parameter XRegistryAuth from header.
func (o *ServiceUpdateParams) bindXRegistryAuth(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.XRegistryAuth = &raw

	return nil
}

// bindID binds and validates parameter ID from path.
func (o *ServiceUpdateParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ID = raw

	return nil
}

// bindRegistryAuthFrom binds and validates parameter RegistryAuthFrom from query.
func (o *ServiceUpdateParams) bindRegistryAuthFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewServiceUpdateParams()
		return nil
	}
	o.RegistryAuthFrom = &raw

	if err := o.validateRegistryAuthFrom(formats); err != nil {
		return err
	}

	return nil
}

// validateRegistryAuthFrom carries on validations for parameter RegistryAuthFrom
func (o *ServiceUpdateParams) validateRegistryAuthFrom(formats strfmt.Registry) error {

	if err := validate.EnumCase("registryAuthFrom", "query", *o.RegistryAuthFrom, []interface{}{"spec", "previous-spec"}, true); err != nil {
		return err
	}

	return nil
}

// bindRollback binds and validates parameter Rollback from query.
func (o *ServiceUpdateParams) bindRollback(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Rollback = &raw

	return nil
}

// bindVersion binds and validates parameter Version from query.
func (o *ServiceUpdateParams) bindVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("version", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("version", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("version", "query", "int64", raw)
	}
	o.Version = value

	return nil
}
