// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// ServiceUpdateHandlerFunc turns a function with the right signature into a service update handler
type ServiceUpdateHandlerFunc func(ServiceUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ServiceUpdateHandlerFunc) Handle(params ServiceUpdateParams) middleware.Responder {
	return fn(params)
}

// ServiceUpdateHandler interface for that can handle valid service update params
type ServiceUpdateHandler interface {
	Handle(ServiceUpdateParams) middleware.Responder
}

// NewServiceUpdate creates a new http.Handler for the service update operation
func NewServiceUpdate(ctx *middleware.Context, handler ServiceUpdateHandler) *ServiceUpdate {
	return &ServiceUpdate{Context: ctx, Handler: handler}
}

/* ServiceUpdate swagger:route POST /services/{id}/update Service serviceUpdate

Update a service

*/
type ServiceUpdate struct {
	Context *middleware.Context
	Handler ServiceUpdateHandler
}

func (o *ServiceUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewServiceUpdateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ServiceUpdateBody service update body
//
// swagger:model ServiceUpdateBody
type ServiceUpdateBody struct {
	models.ServiceSpec

	ServiceUpdateParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ServiceUpdateBody) UnmarshalJSON(raw []byte) error {
	// ServiceUpdateParamsBodyAO0
	var serviceUpdateParamsBodyAO0 models.ServiceSpec
	if err := swag.ReadJSON(raw, &serviceUpdateParamsBodyAO0); err != nil {
		return err
	}
	o.ServiceSpec = serviceUpdateParamsBodyAO0

	// ServiceUpdateParamsBodyAO1
	var serviceUpdateParamsBodyAO1 ServiceUpdateParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &serviceUpdateParamsBodyAO1); err != nil {
		return err
	}
	o.ServiceUpdateParamsBodyAllOf1 = serviceUpdateParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ServiceUpdateBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	serviceUpdateParamsBodyAO0, err := swag.WriteJSON(o.ServiceSpec)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, serviceUpdateParamsBodyAO0)

	serviceUpdateParamsBodyAO1, err := swag.WriteJSON(o.ServiceUpdateParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, serviceUpdateParamsBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this service update body
func (o *ServiceUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ServiceSpec
	if err := o.ServiceSpec.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ServiceUpdateParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this service update body based on the context it is used
func (o *ServiceUpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ServiceSpec
	if err := o.ServiceSpec.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ServiceUpdateParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ServiceUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServiceUpdateBody) UnmarshalBinary(b []byte) error {
	var res ServiceUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ServiceUpdateParamsBodyAllOf1 service update params body all of1
// Example: {"EndpointSpec":{"Mode":"vip"},"Mode":{"Replicated":{"Replicas":1}},"Name":"top","RollbackConfig":{"Delay":1000000000,"FailureAction":"pause","MaxFailureRatio":0.15,"Monitor":15000000000,"Parallelism":1},"TaskTemplate":{"ContainerSpec":{"Args":["top"],"Image":"busybox"},"ForceUpdate":0,"Placement":{},"Resources":{"Limits":{},"Reservations":{}},"RestartPolicy":{"Condition":"any","MaxAttempts":0}},"UpdateConfig":{"Delay":1000000000,"FailureAction":"pause","MaxFailureRatio":0.15,"Monitor":15000000000,"Parallelism":2}}
//
// swagger:model ServiceUpdateParamsBodyAllOf1
type ServiceUpdateParamsBodyAllOf1 interface{}
