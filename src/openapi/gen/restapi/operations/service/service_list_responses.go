// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// ServiceListOKCode is the HTTP code returned for type ServiceListOK
const ServiceListOKCode int = 200

/*ServiceListOK no error

swagger:response serviceListOK
*/
type ServiceListOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Service `json:"body,omitempty"`
}

// NewServiceListOK creates ServiceListOK with default headers values
func NewServiceListOK() *ServiceListOK {

	return &ServiceListOK{}
}

// WithPayload adds the payload to the service list o k response
func (o *ServiceListOK) WithPayload(payload []*models.Service) *ServiceListOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the service list o k response
func (o *ServiceListOK) SetPayload(payload []*models.Service) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ServiceListOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Service, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ServiceListInternalServerErrorCode is the HTTP code returned for type ServiceListInternalServerError
const ServiceListInternalServerErrorCode int = 500

/*ServiceListInternalServerError server error

swagger:response serviceListInternalServerError
*/
type ServiceListInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewServiceListInternalServerError creates ServiceListInternalServerError with default headers values
func NewServiceListInternalServerError() *ServiceListInternalServerError {

	return &ServiceListInternalServerError{}
}

// WithPayload adds the payload to the service list internal server error response
func (o *ServiceListInternalServerError) WithPayload(payload *models.ErrorResponse) *ServiceListInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the service list internal server error response
func (o *ServiceListInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ServiceListInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ServiceListServiceUnavailableCode is the HTTP code returned for type ServiceListServiceUnavailable
const ServiceListServiceUnavailableCode int = 503

/*ServiceListServiceUnavailable node is not part of a swarm

swagger:response serviceListServiceUnavailable
*/
type ServiceListServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewServiceListServiceUnavailable creates ServiceListServiceUnavailable with default headers values
func NewServiceListServiceUnavailable() *ServiceListServiceUnavailable {

	return &ServiceListServiceUnavailable{}
}

// WithPayload adds the payload to the service list service unavailable response
func (o *ServiceListServiceUnavailable) WithPayload(payload *models.ErrorResponse) *ServiceListServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the service list service unavailable response
func (o *ServiceListServiceUnavailable) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ServiceListServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
