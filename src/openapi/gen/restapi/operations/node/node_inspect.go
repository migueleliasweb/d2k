// Code generated by go-swagger; DO NOT EDIT.

package node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// NodeInspectHandlerFunc turns a function with the right signature into a node inspect handler
type NodeInspectHandlerFunc func(NodeInspectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NodeInspectHandlerFunc) Handle(params NodeInspectParams) middleware.Responder {
	return fn(params)
}

// NodeInspectHandler interface for that can handle valid node inspect params
type NodeInspectHandler interface {
	Handle(NodeInspectParams) middleware.Responder
}

// NewNodeInspect creates a new http.Handler for the node inspect operation
func NewNodeInspect(ctx *middleware.Context, handler NodeInspectHandler) *NodeInspect {
	return &NodeInspect{Context: ctx, Handler: handler}
}

/* NodeInspect swagger:route GET /nodes/{id} Node nodeInspect

Inspect a node

*/
type NodeInspect struct {
	Context *middleware.Context
	Handler NodeInspectHandler
}

func (o *NodeInspect) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewNodeInspectParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
