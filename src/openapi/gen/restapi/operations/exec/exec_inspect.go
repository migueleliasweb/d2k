// Code generated by go-swagger; DO NOT EDIT.

package exec

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// ExecInspectHandlerFunc turns a function with the right signature into a exec inspect handler
type ExecInspectHandlerFunc func(ExecInspectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ExecInspectHandlerFunc) Handle(params ExecInspectParams) middleware.Responder {
	return fn(params)
}

// ExecInspectHandler interface for that can handle valid exec inspect params
type ExecInspectHandler interface {
	Handle(ExecInspectParams) middleware.Responder
}

// NewExecInspect creates a new http.Handler for the exec inspect operation
func NewExecInspect(ctx *middleware.Context, handler ExecInspectHandler) *ExecInspect {
	return &ExecInspect{Context: ctx, Handler: handler}
}

/* ExecInspect swagger:route GET /exec/{id}/json Exec execInspect

Inspect an exec instance

Return low-level information about an exec instance.

*/
type ExecInspect struct {
	Context *middleware.Context
	Handler ExecInspectHandler
}

func (o *ExecInspect) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewExecInspectParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ExecInspectOKBody ExecInspectResponse
//
// swagger:model ExecInspectOKBody
type ExecInspectOKBody struct {

	// can remove
	CanRemove bool `json:"CanRemove,omitempty"`

	// container ID
	ContainerID string `json:"ContainerID,omitempty"`

	// detach keys
	DetachKeys string `json:"DetachKeys,omitempty"`

	// exit code
	ExitCode int64 `json:"ExitCode,omitempty"`

	// ID
	ID string `json:"ID,omitempty"`

	// open stderr
	OpenStderr bool `json:"OpenStderr,omitempty"`

	// open stdin
	OpenStdin bool `json:"OpenStdin,omitempty"`

	// open stdout
	OpenStdout bool `json:"OpenStdout,omitempty"`

	// The system process ID for the exec process.
	Pid int64 `json:"Pid,omitempty"`

	// process config
	ProcessConfig *models.ProcessConfig `json:"ProcessConfig,omitempty"`

	// running
	Running bool `json:"Running,omitempty"`
}

// Validate validates this exec inspect o k body
func (o *ExecInspectOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProcessConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExecInspectOKBody) validateProcessConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.ProcessConfig) { // not required
		return nil
	}

	if o.ProcessConfig != nil {
		if err := o.ProcessConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execInspectOK" + "." + "ProcessConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this exec inspect o k body based on the context it is used
func (o *ExecInspectOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProcessConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExecInspectOKBody) contextValidateProcessConfig(ctx context.Context, formats strfmt.Registry) error {

	if o.ProcessConfig != nil {
		if err := o.ProcessConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execInspectOK" + "." + "ProcessConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ExecInspectOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExecInspectOKBody) UnmarshalBinary(b []byte) error {
	var res ExecInspectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
