// Code generated by go-swagger; DO NOT EDIT.

package exec

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ExecResizeHandlerFunc turns a function with the right signature into a exec resize handler
type ExecResizeHandlerFunc func(ExecResizeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ExecResizeHandlerFunc) Handle(params ExecResizeParams) middleware.Responder {
	return fn(params)
}

// ExecResizeHandler interface for that can handle valid exec resize params
type ExecResizeHandler interface {
	Handle(ExecResizeParams) middleware.Responder
}

// NewExecResize creates a new http.Handler for the exec resize operation
func NewExecResize(ctx *middleware.Context, handler ExecResizeHandler) *ExecResize {
	return &ExecResize{Context: ctx, Handler: handler}
}

/* ExecResize swagger:route POST /exec/{id}/resize Exec execResize

Resize an exec instance

Resize the TTY session used by an exec instance. This endpoint only works
if `tty` was specified as part of creating and starting the exec instance.


*/
type ExecResize struct {
	Context *middleware.Context
	Handler ExecResizeHandler
}

func (o *ExecResize) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewExecResizeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
