// Code generated by go-swagger; DO NOT EDIT.

package exec

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContainerExecHandlerFunc turns a function with the right signature into a container exec handler
type ContainerExecHandlerFunc func(ContainerExecParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ContainerExecHandlerFunc) Handle(params ContainerExecParams) middleware.Responder {
	return fn(params)
}

// ContainerExecHandler interface for that can handle valid container exec params
type ContainerExecHandler interface {
	Handle(ContainerExecParams) middleware.Responder
}

// NewContainerExec creates a new http.Handler for the container exec operation
func NewContainerExec(ctx *middleware.Context, handler ContainerExecHandler) *ContainerExec {
	return &ContainerExec{Context: ctx, Handler: handler}
}

/* ContainerExec swagger:route POST /containers/{id}/exec Exec containerExec

Create an exec instance

Run a command inside a running container.

*/
type ContainerExec struct {
	Context *middleware.Context
	Handler ContainerExecHandler
}

func (o *ContainerExec) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewContainerExecParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ContainerExecBody container exec body
// Example: {"AttachStderr":true,"AttachStdin":false,"AttachStdout":true,"Cmd":["date"],"DetachKeys":"ctrl-p,ctrl-q","Env":["FOO=bar","BAZ=quux"],"Tty":false}
//
// swagger:model ContainerExecBody
type ContainerExecBody struct {

	// Attach to `stderr` of the exec command.
	AttachStderr bool `json:"AttachStderr,omitempty"`

	// Attach to `stdin` of the exec command.
	AttachStdin bool `json:"AttachStdin,omitempty"`

	// Attach to `stdout` of the exec command.
	AttachStdout bool `json:"AttachStdout,omitempty"`

	// Command to run, as a string or array of strings.
	Cmd []string `json:"Cmd"`

	// Override the key sequence for detaching a container. Format is
	// a single character `[a-Z]` or `ctrl-<value>` where `<value>`
	// is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.
	//
	DetachKeys string `json:"DetachKeys,omitempty"`

	// A list of environment variables in the form `["VAR=value", ...]`.
	//
	Env []string `json:"Env"`

	// Runs the exec process with extended privileges.
	Privileged *bool `json:"Privileged,omitempty"`

	// Allocate a pseudo-TTY.
	Tty bool `json:"Tty,omitempty"`

	// The user, and optionally, group to run the exec process inside
	// the container. Format is one of: `user`, `user:group`, `uid`,
	// or `uid:gid`.
	//
	User string `json:"User,omitempty"`

	// The working directory for the exec process inside the container.
	//
	WorkingDir string `json:"WorkingDir,omitempty"`
}

// Validate validates this container exec body
func (o *ContainerExecBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this container exec body based on context it is used
func (o *ContainerExecBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ContainerExecBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContainerExecBody) UnmarshalBinary(b []byte) error {
	var res ContainerExecBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
