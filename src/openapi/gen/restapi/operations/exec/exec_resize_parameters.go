// Code generated by go-swagger; DO NOT EDIT.

package exec

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewExecResizeParams creates a new ExecResizeParams object
//
// There are no default values defined in the spec.
func NewExecResizeParams() ExecResizeParams {

	return ExecResizeParams{}
}

// ExecResizeParams contains all the bound params for the exec resize operation
// typically these are obtained from a http.Request
//
// swagger:parameters ExecResize
type ExecResizeParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Height of the TTY session in characters
	  In: query
	*/
	H *int64
	/*Exec instance ID
	  Required: true
	  In: path
	*/
	ID string
	/*Width of the TTY session in characters
	  In: query
	*/
	W *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewExecResizeParams() beforehand.
func (o *ExecResizeParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qH, qhkH, _ := qs.GetOK("h")
	if err := o.bindH(qH, qhkH, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qW, qhkW, _ := qs.GetOK("w")
	if err := o.bindW(qW, qhkW, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindH binds and validates parameter H from query.
func (o *ExecResizeParams) bindH(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("h", "query", "int64", raw)
	}
	o.H = &value

	return nil
}

// bindID binds and validates parameter ID from path.
func (o *ExecResizeParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ID = raw

	return nil
}

// bindW binds and validates parameter W from query.
func (o *ExecResizeParams) bindW(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("w", "query", "int64", raw)
	}
	o.W = &value

	return nil
}
