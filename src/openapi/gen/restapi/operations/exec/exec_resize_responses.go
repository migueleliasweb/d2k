// Code generated by go-swagger; DO NOT EDIT.

package exec

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// ExecResizeCreatedCode is the HTTP code returned for type ExecResizeCreated
const ExecResizeCreatedCode int = 201

/*ExecResizeCreated No error

swagger:response execResizeCreated
*/
type ExecResizeCreated struct {
}

// NewExecResizeCreated creates ExecResizeCreated with default headers values
func NewExecResizeCreated() *ExecResizeCreated {

	return &ExecResizeCreated{}
}

// WriteResponse to the client
func (o *ExecResizeCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// ExecResizeNotFoundCode is the HTTP code returned for type ExecResizeNotFound
const ExecResizeNotFoundCode int = 404

/*ExecResizeNotFound No such exec instance

swagger:response execResizeNotFound
*/
type ExecResizeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewExecResizeNotFound creates ExecResizeNotFound with default headers values
func NewExecResizeNotFound() *ExecResizeNotFound {

	return &ExecResizeNotFound{}
}

// WithPayload adds the payload to the exec resize not found response
func (o *ExecResizeNotFound) WithPayload(payload *models.ErrorResponse) *ExecResizeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the exec resize not found response
func (o *ExecResizeNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExecResizeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
