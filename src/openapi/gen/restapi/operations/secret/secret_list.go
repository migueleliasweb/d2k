// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SecretListHandlerFunc turns a function with the right signature into a secret list handler
type SecretListHandlerFunc func(SecretListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SecretListHandlerFunc) Handle(params SecretListParams) middleware.Responder {
	return fn(params)
}

// SecretListHandler interface for that can handle valid secret list params
type SecretListHandler interface {
	Handle(SecretListParams) middleware.Responder
}

// NewSecretList creates a new http.Handler for the secret list operation
func NewSecretList(ctx *middleware.Context, handler SecretListHandler) *SecretList {
	return &SecretList{Context: ctx, Handler: handler}
}

/* SecretList swagger:route GET /secrets Secret secretList

List secrets

*/
type SecretList struct {
	Context *middleware.Context
	Handler SecretListHandler
}

func (o *SecretList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSecretListParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
