// Code generated by go-swagger; DO NOT EDIT.

package distribution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DistributionInspectHandlerFunc turns a function with the right signature into a distribution inspect handler
type DistributionInspectHandlerFunc func(DistributionInspectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DistributionInspectHandlerFunc) Handle(params DistributionInspectParams) middleware.Responder {
	return fn(params)
}

// DistributionInspectHandler interface for that can handle valid distribution inspect params
type DistributionInspectHandler interface {
	Handle(DistributionInspectParams) middleware.Responder
}

// NewDistributionInspect creates a new http.Handler for the distribution inspect operation
func NewDistributionInspect(ctx *middleware.Context, handler DistributionInspectHandler) *DistributionInspect {
	return &DistributionInspect{Context: ctx, Handler: handler}
}

/* DistributionInspect swagger:route GET /distribution/{name}/json Distribution distributionInspect

Get image information from the registry

Return image digest and platform information by contacting the registry.


*/
type DistributionInspect struct {
	Context *middleware.Context
	Handler DistributionInspectHandler
}

func (o *DistributionInspect) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDistributionInspectParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DistributionInspectDistributionInspectOKBodyDescriptor A descriptor struct containing digest, media type, and size.
//
//
// swagger:model DistributionInspectDistributionInspectOKBodyDescriptor
type DistributionInspectDistributionInspectOKBodyDescriptor struct {

	// digest
	Digest string `json:"Digest,omitempty"`

	// media type
	MediaType string `json:"MediaType,omitempty"`

	// size
	Size int64 `json:"Size,omitempty"`

	// u r ls
	URLs []string `json:"URLs"`
}

// Validate validates this distribution inspect distribution inspect o k body descriptor
func (o *DistributionInspectDistributionInspectOKBodyDescriptor) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this distribution inspect distribution inspect o k body descriptor based on context it is used
func (o *DistributionInspectDistributionInspectOKBodyDescriptor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DistributionInspectDistributionInspectOKBodyDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DistributionInspectDistributionInspectOKBodyDescriptor) UnmarshalBinary(b []byte) error {
	var res DistributionInspectDistributionInspectOKBodyDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DistributionInspectOKBody DistributionInspectResponse
//
// swagger:model DistributionInspectOKBody
type DistributionInspectOKBody struct {

	// descriptor
	// Required: true
	Descriptor *DistributionInspectDistributionInspectOKBodyDescriptor `json:"Descriptor"`

	// An array containing all platforms supported by the image.
	//
	// Required: true
	Platforms []*DistributionInspectPlatformsItems0 `json:"Platforms"`
}

// Validate validates this distribution inspect o k body
func (o *DistributionInspectOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlatforms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DistributionInspectOKBody) validateDescriptor(formats strfmt.Registry) error {

	if err := validate.Required("distributionInspectOK"+"."+"Descriptor", "body", o.Descriptor); err != nil {
		return err
	}

	if o.Descriptor != nil {
		if err := o.Descriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("distributionInspectOK" + "." + "Descriptor")
			}
			return err
		}
	}

	return nil
}

func (o *DistributionInspectOKBody) validatePlatforms(formats strfmt.Registry) error {

	if err := validate.Required("distributionInspectOK"+"."+"Platforms", "body", o.Platforms); err != nil {
		return err
	}

	for i := 0; i < len(o.Platforms); i++ {
		if swag.IsZero(o.Platforms[i]) { // not required
			continue
		}

		if o.Platforms[i] != nil {
			if err := o.Platforms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("distributionInspectOK" + "." + "Platforms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this distribution inspect o k body based on the context it is used
func (o *DistributionInspectOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePlatforms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DistributionInspectOKBody) contextValidateDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if o.Descriptor != nil {
		if err := o.Descriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("distributionInspectOK" + "." + "Descriptor")
			}
			return err
		}
	}

	return nil
}

func (o *DistributionInspectOKBody) contextValidatePlatforms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Platforms); i++ {

		if o.Platforms[i] != nil {
			if err := o.Platforms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("distributionInspectOK" + "." + "Platforms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DistributionInspectOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DistributionInspectOKBody) UnmarshalBinary(b []byte) error {
	var res DistributionInspectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DistributionInspectPlatformsItems0 distribution inspect platforms items0
//
// swagger:model DistributionInspectPlatformsItems0
type DistributionInspectPlatformsItems0 struct {

	// architecture
	Architecture string `json:"Architecture,omitempty"`

	// features
	Features []string `json:"Features"`

	// o s
	OS string `json:"OS,omitempty"`

	// o s features
	OSFeatures []string `json:"OSFeatures"`

	// o s version
	OSVersion string `json:"OSVersion,omitempty"`

	// variant
	Variant string `json:"Variant,omitempty"`
}

// Validate validates this distribution inspect platforms items0
func (o *DistributionInspectPlatformsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this distribution inspect platforms items0 based on context it is used
func (o *DistributionInspectPlatformsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DistributionInspectPlatformsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DistributionInspectPlatformsItems0) UnmarshalBinary(b []byte) error {
	var res DistributionInspectPlatformsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
