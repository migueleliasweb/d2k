// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTaskLogsParams creates a new TaskLogsParams object
// with the default values initialized.
func NewTaskLogsParams() TaskLogsParams {

	var (
		// initialize parameters with default values

		detailsDefault = bool(false)
		followDefault  = bool(false)

		sinceDefault      = int64(0)
		stderrDefault     = bool(false)
		stdoutDefault     = bool(false)
		tailDefault       = string("all")
		timestampsDefault = bool(false)
	)

	return TaskLogsParams{
		Details: &detailsDefault,

		Follow: &followDefault,

		Since: &sinceDefault,

		Stderr: &stderrDefault,

		Stdout: &stdoutDefault,

		Tail: &tailDefault,

		Timestamps: &timestampsDefault,
	}
}

// TaskLogsParams contains all the bound params for the task logs operation
// typically these are obtained from a http.Request
//
// swagger:parameters TaskLogs
type TaskLogsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Show task context and extra details provided to logs.
	  In: query
	  Default: false
	*/
	Details *bool
	/*Keep connection after returning logs.
	  In: query
	  Default: false
	*/
	Follow *bool
	/*ID of the task
	  Required: true
	  In: path
	*/
	ID string
	/*Only return logs since this time, as a UNIX timestamp
	  In: query
	  Default: 0
	*/
	Since *int64
	/*Return logs from `stderr`
	  In: query
	  Default: false
	*/
	Stderr *bool
	/*Return logs from `stdout`
	  In: query
	  Default: false
	*/
	Stdout *bool
	/*Only return this number of log lines from the end of the logs.
	Specify as an integer or `all` to output all log lines.

	  In: query
	  Default: "all"
	*/
	Tail *string
	/*Add timestamps to every log line
	  In: query
	  Default: false
	*/
	Timestamps *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewTaskLogsParams() beforehand.
func (o *TaskLogsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDetails, qhkDetails, _ := qs.GetOK("details")
	if err := o.bindDetails(qDetails, qhkDetails, route.Formats); err != nil {
		res = append(res, err)
	}

	qFollow, qhkFollow, _ := qs.GetOK("follow")
	if err := o.bindFollow(qFollow, qhkFollow, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qSince, qhkSince, _ := qs.GetOK("since")
	if err := o.bindSince(qSince, qhkSince, route.Formats); err != nil {
		res = append(res, err)
	}

	qStderr, qhkStderr, _ := qs.GetOK("stderr")
	if err := o.bindStderr(qStderr, qhkStderr, route.Formats); err != nil {
		res = append(res, err)
	}

	qStdout, qhkStdout, _ := qs.GetOK("stdout")
	if err := o.bindStdout(qStdout, qhkStdout, route.Formats); err != nil {
		res = append(res, err)
	}

	qTail, qhkTail, _ := qs.GetOK("tail")
	if err := o.bindTail(qTail, qhkTail, route.Formats); err != nil {
		res = append(res, err)
	}

	qTimestamps, qhkTimestamps, _ := qs.GetOK("timestamps")
	if err := o.bindTimestamps(qTimestamps, qhkTimestamps, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDetails binds and validates parameter Details from query.
func (o *TaskLogsParams) bindDetails(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewTaskLogsParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("details", "query", "bool", raw)
	}
	o.Details = &value

	return nil
}

// bindFollow binds and validates parameter Follow from query.
func (o *TaskLogsParams) bindFollow(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewTaskLogsParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("follow", "query", "bool", raw)
	}
	o.Follow = &value

	return nil
}

// bindID binds and validates parameter ID from path.
func (o *TaskLogsParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ID = raw

	return nil
}

// bindSince binds and validates parameter Since from query.
func (o *TaskLogsParams) bindSince(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewTaskLogsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("since", "query", "int64", raw)
	}
	o.Since = &value

	return nil
}

// bindStderr binds and validates parameter Stderr from query.
func (o *TaskLogsParams) bindStderr(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewTaskLogsParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("stderr", "query", "bool", raw)
	}
	o.Stderr = &value

	return nil
}

// bindStdout binds and validates parameter Stdout from query.
func (o *TaskLogsParams) bindStdout(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewTaskLogsParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("stdout", "query", "bool", raw)
	}
	o.Stdout = &value

	return nil
}

// bindTail binds and validates parameter Tail from query.
func (o *TaskLogsParams) bindTail(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewTaskLogsParams()
		return nil
	}
	o.Tail = &raw

	return nil
}

// bindTimestamps binds and validates parameter Timestamps from query.
func (o *TaskLogsParams) bindTimestamps(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewTaskLogsParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("timestamps", "query", "bool", raw)
	}
	o.Timestamps = &value

	return nil
}
