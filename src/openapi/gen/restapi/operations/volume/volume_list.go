// Code generated by go-swagger; DO NOT EDIT.

package volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/migueleliasweb/d2k/src/openapi/gen/models"
)

// VolumeListHandlerFunc turns a function with the right signature into a volume list handler
type VolumeListHandlerFunc func(VolumeListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VolumeListHandlerFunc) Handle(params VolumeListParams) middleware.Responder {
	return fn(params)
}

// VolumeListHandler interface for that can handle valid volume list params
type VolumeListHandler interface {
	Handle(VolumeListParams) middleware.Responder
}

// NewVolumeList creates a new http.Handler for the volume list operation
func NewVolumeList(ctx *middleware.Context, handler VolumeListHandler) *VolumeList {
	return &VolumeList{Context: ctx, Handler: handler}
}

/* VolumeList swagger:route GET /volumes Volume volumeList

List volumes

*/
type VolumeList struct {
	Context *middleware.Context
	Handler VolumeListHandler
}

func (o *VolumeList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewVolumeListParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// VolumeListOKBody VolumeListResponse
//
// Volume list response
//
// swagger:model VolumeListOKBody
type VolumeListOKBody struct {

	// List of volumes
	// Required: true
	Volumes []*models.Volume `json:"Volumes"`

	// Warnings that occurred when fetching the list of volumes.
	//
	// Required: true
	Warnings []string `json:"Warnings"`
}

// Validate validates this volume list o k body
func (o *VolumeListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeListOKBody) validateVolumes(formats strfmt.Registry) error {

	if err := validate.Required("volumeListOK"+"."+"Volumes", "body", o.Volumes); err != nil {
		return err
	}

	for i := 0; i < len(o.Volumes); i++ {
		if swag.IsZero(o.Volumes[i]) { // not required
			continue
		}

		if o.Volumes[i] != nil {
			if err := o.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeListOK" + "." + "Volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *VolumeListOKBody) validateWarnings(formats strfmt.Registry) error {

	if err := validate.Required("volumeListOK"+"."+"Warnings", "body", o.Warnings); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this volume list o k body based on the context it is used
func (o *VolumeListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeListOKBody) contextValidateVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Volumes); i++ {

		if o.Volumes[i] != nil {
			if err := o.Volumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeListOK" + "." + "Volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *VolumeListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VolumeListOKBody) UnmarshalBinary(b []byte) error {
	var res VolumeListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
