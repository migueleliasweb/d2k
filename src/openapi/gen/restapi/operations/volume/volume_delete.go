// Code generated by go-swagger; DO NOT EDIT.

package volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// VolumeDeleteHandlerFunc turns a function with the right signature into a volume delete handler
type VolumeDeleteHandlerFunc func(VolumeDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VolumeDeleteHandlerFunc) Handle(params VolumeDeleteParams) middleware.Responder {
	return fn(params)
}

// VolumeDeleteHandler interface for that can handle valid volume delete params
type VolumeDeleteHandler interface {
	Handle(VolumeDeleteParams) middleware.Responder
}

// NewVolumeDelete creates a new http.Handler for the volume delete operation
func NewVolumeDelete(ctx *middleware.Context, handler VolumeDeleteHandler) *VolumeDelete {
	return &VolumeDelete{Context: ctx, Handler: handler}
}

/* VolumeDelete swagger:route DELETE /volumes/{name} Volume volumeDelete

Remove a volume

Instruct the driver to remove the volume.

*/
type VolumeDelete struct {
	Context *middleware.Context
	Handler VolumeDeleteHandler
}

func (o *VolumeDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewVolumeDeleteParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
