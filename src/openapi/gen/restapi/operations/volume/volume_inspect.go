// Code generated by go-swagger; DO NOT EDIT.

package volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// VolumeInspectHandlerFunc turns a function with the right signature into a volume inspect handler
type VolumeInspectHandlerFunc func(VolumeInspectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VolumeInspectHandlerFunc) Handle(params VolumeInspectParams) middleware.Responder {
	return fn(params)
}

// VolumeInspectHandler interface for that can handle valid volume inspect params
type VolumeInspectHandler interface {
	Handle(VolumeInspectParams) middleware.Responder
}

// NewVolumeInspect creates a new http.Handler for the volume inspect operation
func NewVolumeInspect(ctx *middleware.Context, handler VolumeInspectHandler) *VolumeInspect {
	return &VolumeInspect{Context: ctx, Handler: handler}
}

/* VolumeInspect swagger:route GET /volumes/{name} Volume volumeInspect

Inspect a volume

*/
type VolumeInspect struct {
	Context *middleware.Context
	Handler VolumeInspectHandler
}

func (o *VolumeInspect) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewVolumeInspectParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
